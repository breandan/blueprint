/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.google.speech.embedded;

import android.content.Context;
import android.os.AsyncTask;

import com.embryo.android.shared.util.ExtraPreconditions;
import com.embryo.android.speech.SpeechSettings;
import com.embryo.android.speech.callback.SimpleCallback;
import com.embryo.android.speech.embedded.Greco3DataManager;
import com.embryo.android.speech.embedded.Greco3Grammar;
import com.embryo.android.speech.grammar.GrammarCompilationService;
import com.embryo.wireless.voicesearch.proto.GstaticConfiguration;
import com.google.common.base.Preconditions;
import com.google.common.collect.Sets;

import java.util.Set;
import java.util.concurrent.Executor;

public class OfflineActionsManager {
    private volatile SimpleCallback<Integer> mCallback;
    private final Context mContext;
    private String mGrammarCompilationLocale;
    private final Greco3DataManager mGreco3DataManager;
    private final Executor mMainThread;
    private final SpeechSettings mSettings;
    private final Set<Greco3Grammar> mCompilingGrammars = Sets.newHashSet();

    public OfflineActionsManager(Context context, Greco3DataManager dataManager, SpeechSettings settings, Executor executor) {
        mContext = context;
        mGreco3DataManager = dataManager;
        mSettings = settings;
        mMainThread = executor;
    }

    public synchronized void startOfflineDataCheck(GrammarCompilationService gcs, SimpleCallback<Integer> completionCallback, String bcp47Locale, Greco3Grammar[] grammars) {
        ExtraPreconditions.checkMainThread();
        if ((mCallback == completionCallback) && (!mCompilingGrammars.isEmpty())) {
            return;
        }
        mGrammarCompilationLocale = bcp47Locale;
        mCallback = completionCallback;
        mCompilingGrammars.clear();
        if (mGreco3DataManager.isInitialized()) {
            initGrammars(gcs, grammars);
        } else {
            mGreco3DataManager.initialize(createInitGrammarCallback(grammars));
        }
    }

    private Runnable createInitGrammarCallback(final Greco3Grammar... paramVarArgs) {
        return new Runnable() {
            public void run() {
//                OfflineActionsManager.this.initGrammars(paramVarArgs);
            }
        };
    }

    private void dispatchCallbackOnMainThread(final int status) {
        mMainThread.execute(new Runnable() {
            public void run() {
                synchronized(OfflineActionsManager.this) {
                    if(mCallback != null) {
                        mCallback.onResult(Integer.valueOf(status));
                        mCallback = null;
                    }
                }
            }
        });
    }


    public synchronized void notifyStart(Greco3Grammar unused) {
    }

    public synchronized void notifyDone(Greco3Grammar greco3Grammar, boolean status) {
        if ((!mCompilingGrammars.contains(greco3Grammar)) || (mCallback == null)) {
            return;
        }
        if (!status) {
            mCompilingGrammars.clear();
            dispatchCallbackOnMainThread(0x4);
            mCallback = null;
            return;
        }
        mCompilingGrammars.remove(greco3Grammar);
        if (mCompilingGrammars.isEmpty()) {
            dispatchCallbackOnMainThread(0x1);
        }
    }

    private void initGrammars(GrammarCompilationService gcs, Greco3Grammar... paramVarArgs) {
        for (Greco3Grammar grammar : paramVarArgs) {
            initGrammar(gcs, grammar);
        }
        while(!mCompilingGrammars.isEmpty()) {}
    }

    public int initGrammar(GrammarCompilationService gcs, Greco3Grammar greco3Grammar) {
        Preconditions.checkState(mGreco3DataManager.isInitialized());
        ExtraPreconditions.checkHoldsLock(this);
        if (canCompileGrammar()) {
            if (hasCompiledGrammar(greco3Grammar)) {
                return 0x1;
            }
            return 0x2;
        }
        startGrammarCompilation(gcs, greco3Grammar);
        return 0x3;
    }

    private boolean canCompileGrammar() {
        return mGreco3DataManager.hasResourcesForCompilation(mGrammarCompilationLocale);
    }

    private boolean hasCompiledGrammar(Greco3Grammar greco3Grammar) {
        return mGreco3DataManager.hasCompiledGrammar(mGrammarCompilationLocale, greco3Grammar);
    }

    public synchronized void maybeScheduleGrammarCompilation() {
        String locale = mSettings.getSpokenLocaleBcp47();
        for (Greco3Grammar greco3Grammar : Greco3Grammar.values()) {
            internalMaybeScheduleGrammarCompilation(locale, AsyncTask.THREAD_POOL_EXECUTOR, greco3Grammar);
        }
    }

    private void internalMaybeScheduleGrammarCompilation(final String paramString, Executor paramExecutor, final Greco3Grammar paramGreco3Grammar) {
        if ((GrammarCompilationService.isGrammarCompilationAlarmSet()) || (!this.mGreco3DataManager.isInitialized())) {
            return;
        }
        paramExecutor.execute(new Runnable() {
            public void run() {
                GrammarCompilationService.maybeSchedulePeriodicCompilation(OfflineActionsManager.this.mGreco3DataManager.getRevisionForGrammar(paramString, paramGreco3Grammar), OfflineActionsManager.this.mContext, paramString, paramGreco3Grammar, OfflineActionsManager.this.getGrammarCompilationFrequency(paramGreco3Grammar));
            }
        });
    }

    private long getGrammarCompilationFrequency(Greco3Grammar greco3Grammar) {
        if (greco3Grammar == Greco3Grammar.CONTACT_DIALING) {
            GstaticConfiguration.Configuration config = mSettings.getConfiguration();
            if ((config.hasEmbeddedRecognizer()) && (config.getEmbeddedRecognizer().hasGrammarCompilationFrequencyMs())) {
                return (long) config.getEmbeddedRecognizer().getGrammarCompilationFrequencyMs();
            }
        }
        return 0xffffffff;
    }

    private void startGrammarCompilation(GrammarCompilationService gcs, Greco3Grammar greco3Grammar) {
        ExtraPreconditions.checkHoldsLock(this);
        mCompilingGrammars.add(greco3Grammar);
//        GrammarCompilationService.startCompilationForLocale(mContext, mGrammarCompilationLocale, greco3Grammar);
        gcs.onHandleIntent(GrammarCompilationService.getStartServiceIntent(mContext, mGrammarCompilationLocale, greco3Grammar));
    }
}
