package com.google.geo.sidekick;

import com.google.protobuf.micro.ByteStringMicro;
import com.google.protobuf.micro.CodedInputStreamMicro;
import com.google.protobuf.micro.CodedOutputStreamMicro;
import com.google.protobuf.micro.InvalidProtocolBufferMicroException;
import com.google.protobuf.micro.MessageMicro;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public final class Sidekick
{
  public static final class Action
    extends MessageMicro
  {
    private String actionTakenMessage_ = "";
    private int cachedSize = -1;
    private String displayMessage_ = "";
    private ByteStringMicro encodedServerPayload_ = ByteStringMicro.EMPTY;
    private boolean hasActionTakenMessage;
    private boolean hasDisplayMessage;
    private boolean hasEncodedServerPayload;
    private boolean hasInterest;
    private boolean hasInterestedItemIndex;
    private boolean hasRecordActionIfTaken;
    private boolean hasType;
    private Sidekick.Interest interest_ = null;
    private int interestedItemIndex_ = 0;
    private boolean recordActionIfTaken_ = false;
    private int type_ = 1;
    
    public String getActionTakenMessage()
    {
      return this.actionTakenMessage_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getDisplayMessage()
    {
      return this.displayMessage_;
    }
    
    public ByteStringMicro getEncodedServerPayload()
    {
      return this.encodedServerPayload_;
    }
    
    public Sidekick.Interest getInterest()
    {
      return this.interest_;
    }
    
    public int getInterestedItemIndex()
    {
      return this.interestedItemIndex_;
    }
    
    public boolean getRecordActionIfTaken()
    {
      return this.recordActionIfTaken_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getType());
      }
      if (hasDisplayMessage()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getDisplayMessage());
      }
      if (hasRecordActionIfTaken()) {
        i += CodedOutputStreamMicro.computeBoolSize(3, getRecordActionIfTaken());
      }
      if (hasInterest()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getInterest());
      }
      if (hasEncodedServerPayload()) {
        i += CodedOutputStreamMicro.computeBytesSize(5, getEncodedServerPayload());
      }
      if (hasInterestedItemIndex()) {
        i += CodedOutputStreamMicro.computeInt32Size(6, getInterestedItemIndex());
      }
      if (hasActionTakenMessage()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getActionTakenMessage());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public boolean hasActionTakenMessage()
    {
      return this.hasActionTakenMessage;
    }
    
    public boolean hasDisplayMessage()
    {
      return this.hasDisplayMessage;
    }
    
    public boolean hasEncodedServerPayload()
    {
      return this.hasEncodedServerPayload;
    }
    
    public boolean hasInterest()
    {
      return this.hasInterest;
    }
    
    public boolean hasInterestedItemIndex()
    {
      return this.hasInterestedItemIndex;
    }
    
    public boolean hasRecordActionIfTaken()
    {
      return this.hasRecordActionIfTaken;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public Action mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        case 18: 
          setDisplayMessage(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setRecordActionIfTaken(paramCodedInputStreamMicro.readBool());
          break;
        case 34: 
          Sidekick.Interest localInterest = new Sidekick.Interest();
          paramCodedInputStreamMicro.readMessage(localInterest);
          setInterest(localInterest);
          break;
        case 42: 
          setEncodedServerPayload(paramCodedInputStreamMicro.readBytes());
          break;
        case 48: 
          setInterestedItemIndex(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setActionTakenMessage(paramCodedInputStreamMicro.readString());
      }
    }
    
    public Action setActionTakenMessage(String paramString)
    {
      this.hasActionTakenMessage = true;
      this.actionTakenMessage_ = paramString;
      return this;
    }
    
    public Action setDisplayMessage(String paramString)
    {
      this.hasDisplayMessage = true;
      this.displayMessage_ = paramString;
      return this;
    }
    
    public Action setEncodedServerPayload(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedServerPayload = true;
      this.encodedServerPayload_ = paramByteStringMicro;
      return this;
    }
    
    public Action setInterest(Sidekick.Interest paramInterest)
    {
      if (paramInterest == null) {
        throw new NullPointerException();
      }
      this.hasInterest = true;
      this.interest_ = paramInterest;
      return this;
    }
    
    public Action setInterestedItemIndex(int paramInt)
    {
      this.hasInterestedItemIndex = true;
      this.interestedItemIndex_ = paramInt;
      return this;
    }
    
    public Action setRecordActionIfTaken(boolean paramBoolean)
    {
      this.hasRecordActionIfTaken = true;
      this.recordActionIfTaken_ = paramBoolean;
      return this;
    }
    
    public Action setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(1, getType());
      }
      if (hasDisplayMessage()) {
        paramCodedOutputStreamMicro.writeString(2, getDisplayMessage());
      }
      if (hasRecordActionIfTaken()) {
        paramCodedOutputStreamMicro.writeBool(3, getRecordActionIfTaken());
      }
      if (hasInterest()) {
        paramCodedOutputStreamMicro.writeMessage(4, getInterest());
      }
      if (hasEncodedServerPayload()) {
        paramCodedOutputStreamMicro.writeBytes(5, getEncodedServerPayload());
      }
      if (hasInterestedItemIndex()) {
        paramCodedOutputStreamMicro.writeInt32(6, getInterestedItemIndex());
      }
      if (hasActionTakenMessage()) {
        paramCodedOutputStreamMicro.writeString(7, getActionTakenMessage());
      }
    }
  }
  
  public static final class ActionsQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Sidekick.ExecutedUserAction> executedUserAction_ = Collections.emptyList();
    
    public ActionsQuery addExecutedUserAction(Sidekick.ExecutedUserAction paramExecutedUserAction)
    {
      if (paramExecutedUserAction == null) {
        throw new NullPointerException();
      }
      if (this.executedUserAction_.isEmpty()) {
        this.executedUserAction_ = new ArrayList();
      }
      this.executedUserAction_.add(paramExecutedUserAction);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getExecutedUserActionCount()
    {
      return this.executedUserAction_.size();
    }
    
    public List<Sidekick.ExecutedUserAction> getExecutedUserActionList()
    {
      return this.executedUserAction_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getExecutedUserActionList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.ExecutedUserAction)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public ActionsQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.ExecutedUserAction localExecutedUserAction = new Sidekick.ExecutedUserAction();
        paramCodedInputStreamMicro.readMessage(localExecutedUserAction);
        addExecutedUserAction(localExecutedUserAction);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getExecutedUserActionList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.ExecutedUserAction)localIterator.next());
      }
    }
  }
  
  public static final class ActionsResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int error_ = 12;
    private boolean hasError;
    private List<Sidekick.MinimumDataVersion> minimumDataVersion_ = Collections.emptyList();
    
    public ActionsResponse addMinimumDataVersion(Sidekick.MinimumDataVersion paramMinimumDataVersion)
    {
      if (paramMinimumDataVersion == null) {
        throw new NullPointerException();
      }
      if (this.minimumDataVersion_.isEmpty()) {
        this.minimumDataVersion_ = new ArrayList();
      }
      this.minimumDataVersion_.add(paramMinimumDataVersion);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getError()
    {
      return this.error_;
    }
    
    public List<Sidekick.MinimumDataVersion> getMinimumDataVersionList()
    {
      return this.minimumDataVersion_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasError();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getError());
      }
      Iterator localIterator = getMinimumDataVersionList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.MinimumDataVersion)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasError()
    {
      return this.hasError;
    }
    
    public ActionsResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setError(paramCodedInputStreamMicro.readInt32());
          break;
        }
        Sidekick.MinimumDataVersion localMinimumDataVersion = new Sidekick.MinimumDataVersion();
        paramCodedInputStreamMicro.readMessage(localMinimumDataVersion);
        addMinimumDataVersion(localMinimumDataVersion);
      }
    }
    
    public ActionsResponse setError(int paramInt)
    {
      this.hasError = true;
      this.error_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasError()) {
        paramCodedOutputStreamMicro.writeInt32(1, getError());
      }
      Iterator localIterator = getMinimumDataVersionList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.MinimumDataVersion)localIterator.next());
      }
    }
  }
  
  public static final class AlbumEntry
    extends MessageMicro
  {
    private String artist_ = "";
    private String availability_ = "";
    private int cachedSize = -1;
    private boolean hasArtist;
    private boolean hasAvailability;
    private boolean hasImage;
    private boolean hasPlayStoreViewAction;
    private boolean hasReasonEntityName;
    private boolean hasReleaseDateSecs;
    private boolean hasTitle;
    private Sidekick.Photo image_ = null;
    private Sidekick.ClickAction playStoreViewAction_ = null;
    private String reasonEntityName_ = "";
    private long releaseDateSecs_ = 0L;
    private String title_ = "";
    
    public String getArtist()
    {
      return this.artist_;
    }
    
    public String getAvailability()
    {
      return this.availability_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public Sidekick.ClickAction getPlayStoreViewAction()
    {
      return this.playStoreViewAction_;
    }
    
    public String getReasonEntityName()
    {
      return this.reasonEntityName_;
    }
    
    public long getReleaseDateSecs()
    {
      return this.releaseDateSecs_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasArtist()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getArtist());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getImage());
      }
      if (hasReleaseDateSecs()) {
        i += CodedOutputStreamMicro.computeInt64Size(4, getReleaseDateSecs());
      }
      if (hasPlayStoreViewAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getPlayStoreViewAction());
      }
      if (hasReasonEntityName()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getReasonEntityName());
      }
      if (hasAvailability()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getAvailability());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasArtist()
    {
      return this.hasArtist;
    }
    
    public boolean hasAvailability()
    {
      return this.hasAvailability;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasPlayStoreViewAction()
    {
      return this.hasPlayStoreViewAction;
    }
    
    public boolean hasReasonEntityName()
    {
      return this.hasReasonEntityName;
    }
    
    public boolean hasReleaseDateSecs()
    {
      return this.hasReleaseDateSecs;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public AlbumEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setArtist(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 32: 
          setReleaseDateSecs(paramCodedInputStreamMicro.readInt64());
          break;
        case 42: 
          Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction);
          setPlayStoreViewAction(localClickAction);
          break;
        case 50: 
          setReasonEntityName(paramCodedInputStreamMicro.readString());
          break;
        }
        setAvailability(paramCodedInputStreamMicro.readString());
      }
    }
    
    public AlbumEntry setArtist(String paramString)
    {
      this.hasArtist = true;
      this.artist_ = paramString;
      return this;
    }
    
    public AlbumEntry setAvailability(String paramString)
    {
      this.hasAvailability = true;
      this.availability_ = paramString;
      return this;
    }
    
    public AlbumEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public AlbumEntry setPlayStoreViewAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasPlayStoreViewAction = true;
      this.playStoreViewAction_ = paramClickAction;
      return this;
    }
    
    public AlbumEntry setReasonEntityName(String paramString)
    {
      this.hasReasonEntityName = true;
      this.reasonEntityName_ = paramString;
      return this;
    }
    
    public AlbumEntry setReleaseDateSecs(long paramLong)
    {
      this.hasReleaseDateSecs = true;
      this.releaseDateSecs_ = paramLong;
      return this;
    }
    
    public AlbumEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasArtist()) {
        paramCodedOutputStreamMicro.writeString(2, getArtist());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(3, getImage());
      }
      if (hasReleaseDateSecs()) {
        paramCodedOutputStreamMicro.writeInt64(4, getReleaseDateSecs());
      }
      if (hasPlayStoreViewAction()) {
        paramCodedOutputStreamMicro.writeMessage(5, getPlayStoreViewAction());
      }
      if (hasReasonEntityName()) {
        paramCodedOutputStreamMicro.writeString(6, getReasonEntityName());
      }
      if (hasAvailability()) {
        paramCodedOutputStreamMicro.writeString(7, getAvailability());
      }
    }
  }
  
  public static final class AndroidClientDescription
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasIsAndroidLauncher;
    private boolean hasPlayServicesAvailability;
    private boolean hasPlayServicesVersionCode;
    private boolean isAndroidLauncher_ = false;
    private int playServicesAvailability_ = 0;
    private int playServicesVersionCode_ = 0;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getIsAndroidLauncher()
    {
      return this.isAndroidLauncher_;
    }
    
    public int getPlayServicesAvailability()
    {
      return this.playServicesAvailability_;
    }
    
    public int getPlayServicesVersionCode()
    {
      return this.playServicesVersionCode_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasPlayServicesAvailability();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getPlayServicesAvailability());
      }
      if (hasPlayServicesVersionCode()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getPlayServicesVersionCode());
      }
      if (hasIsAndroidLauncher()) {
        i += CodedOutputStreamMicro.computeBoolSize(3, getIsAndroidLauncher());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasIsAndroidLauncher()
    {
      return this.hasIsAndroidLauncher;
    }
    
    public boolean hasPlayServicesAvailability()
    {
      return this.hasPlayServicesAvailability;
    }
    
    public boolean hasPlayServicesVersionCode()
    {
      return this.hasPlayServicesVersionCode;
    }
    
    public AndroidClientDescription mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setPlayServicesAvailability(paramCodedInputStreamMicro.readInt32());
          break;
        case 16: 
          setPlayServicesVersionCode(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setIsAndroidLauncher(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public AndroidClientDescription setIsAndroidLauncher(boolean paramBoolean)
    {
      this.hasIsAndroidLauncher = true;
      this.isAndroidLauncher_ = paramBoolean;
      return this;
    }
    
    public AndroidClientDescription setPlayServicesAvailability(int paramInt)
    {
      this.hasPlayServicesAvailability = true;
      this.playServicesAvailability_ = paramInt;
      return this;
    }
    
    public AndroidClientDescription setPlayServicesVersionCode(int paramInt)
    {
      this.hasPlayServicesVersionCode = true;
      this.playServicesVersionCode_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasPlayServicesAvailability()) {
        paramCodedOutputStreamMicro.writeInt32(1, getPlayServicesAvailability());
      }
      if (hasPlayServicesVersionCode()) {
        paramCodedOutputStreamMicro.writeInt32(2, getPlayServicesVersionCode());
      }
      if (hasIsAndroidLauncher()) {
        paramCodedOutputStreamMicro.writeBool(3, getIsAndroidLauncher());
      }
    }
  }
  
  public static final class AnsweredQuestions
    extends MessageMicro
  {
    private List<Sidekick.Question> answeredQuestion_ = Collections.emptyList();
    private int cachedSize = -1;
    private boolean hasUpdateMethod;
    private int updateMethod_ = 1;
    
    public AnsweredQuestions addAnsweredQuestion(Sidekick.Question paramQuestion)
    {
      if (paramQuestion == null) {
        throw new NullPointerException();
      }
      if (this.answeredQuestion_.isEmpty()) {
        this.answeredQuestion_ = new ArrayList();
      }
      this.answeredQuestion_.add(paramQuestion);
      return this;
    }
    
    public List<Sidekick.Question> getAnsweredQuestionList()
    {
      return this.answeredQuestion_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getAnsweredQuestionList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.Question)localIterator.next());
      }
      if (hasUpdateMethod()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getUpdateMethod());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getUpdateMethod()
    {
      return this.updateMethod_;
    }
    
    public boolean hasUpdateMethod()
    {
      return this.hasUpdateMethod;
    }
    
    public AnsweredQuestions mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Question localQuestion = new Sidekick.Question();
          paramCodedInputStreamMicro.readMessage(localQuestion);
          addAnsweredQuestion(localQuestion);
          break;
        }
        setUpdateMethod(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public AnsweredQuestions setUpdateMethod(int paramInt)
    {
      this.hasUpdateMethod = true;
      this.updateMethod_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getAnsweredQuestionList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.Question)localIterator.next());
      }
      if (hasUpdateMethod()) {
        paramCodedOutputStreamMicro.writeInt32(2, getUpdateMethod());
      }
    }
  }
  
  public static final class AnsweredQuestionsMetadata
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasLastAnsweredQuestionTimestampMillis;
    private long lastAnsweredQuestionTimestampMillis_ = 0L;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getLastAnsweredQuestionTimestampMillis()
    {
      return this.lastAnsweredQuestionTimestampMillis_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLastAnsweredQuestionTimestampMillis();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getLastAnsweredQuestionTimestampMillis());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasLastAnsweredQuestionTimestampMillis()
    {
      return this.hasLastAnsweredQuestionTimestampMillis;
    }
    
    public AnsweredQuestionsMetadata mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setLastAnsweredQuestionTimestampMillis(paramCodedInputStreamMicro.readInt64());
      }
    }
    
    public AnsweredQuestionsMetadata setLastAnsweredQuestionTimestampMillis(long paramLong)
    {
      this.hasLastAnsweredQuestionTimestampMillis = true;
      this.lastAnsweredQuestionTimestampMillis_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLastAnsweredQuestionTimestampMillis()) {
        paramCodedOutputStreamMicro.writeInt64(1, getLastAnsweredQuestionTimestampMillis());
      }
    }
  }
  
  public static final class AppSuggestionEntry
    extends MessageMicro
  {
    private Sidekick.Photo appIcon_ = null;
    private int cachedSize = -1;
    private String displayName_ = "";
    private boolean hasAppIcon;
    private boolean hasDisplayName;
    private boolean hasPackageName;
    private boolean hasScore;
    private String packageName_ = "";
    private float score_ = 0.0F;
    
    public Sidekick.Photo getAppIcon()
    {
      return this.appIcon_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getDisplayName()
    {
      return this.displayName_;
    }
    
    public String getPackageName()
    {
      return this.packageName_;
    }
    
    public float getScore()
    {
      return this.score_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasPackageName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getPackageName());
      }
      if (hasDisplayName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getDisplayName());
      }
      if (hasAppIcon()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getAppIcon());
      }
      if (hasScore()) {
        i += CodedOutputStreamMicro.computeFloatSize(4, getScore());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasAppIcon()
    {
      return this.hasAppIcon;
    }
    
    public boolean hasDisplayName()
    {
      return this.hasDisplayName;
    }
    
    public boolean hasPackageName()
    {
      return this.hasPackageName;
    }
    
    public boolean hasScore()
    {
      return this.hasScore;
    }
    
    public AppSuggestionEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setPackageName(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setDisplayName(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setAppIcon(localPhoto);
          break;
        }
        setScore(paramCodedInputStreamMicro.readFloat());
      }
    }
    
    public AppSuggestionEntry setAppIcon(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasAppIcon = true;
      this.appIcon_ = paramPhoto;
      return this;
    }
    
    public AppSuggestionEntry setDisplayName(String paramString)
    {
      this.hasDisplayName = true;
      this.displayName_ = paramString;
      return this;
    }
    
    public AppSuggestionEntry setPackageName(String paramString)
    {
      this.hasPackageName = true;
      this.packageName_ = paramString;
      return this;
    }
    
    public AppSuggestionEntry setScore(float paramFloat)
    {
      this.hasScore = true;
      this.score_ = paramFloat;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasPackageName()) {
        paramCodedOutputStreamMicro.writeString(1, getPackageName());
      }
      if (hasDisplayName()) {
        paramCodedOutputStreamMicro.writeString(2, getDisplayName());
      }
      if (hasAppIcon()) {
        paramCodedOutputStreamMicro.writeMessage(3, getAppIcon());
      }
      if (hasScore()) {
        paramCodedOutputStreamMicro.writeFloat(4, getScore());
      }
    }
  }
  
  public static final class Attraction
    extends MessageMicro
  {
    private Sidekick.BusinessData businessData_ = null;
    private int cachedSize = -1;
    private boolean hasBusinessData;
    private boolean hasRoute;
    private Sidekick.CommuteSummary route_ = null;
    
    public Sidekick.BusinessData getBusinessData()
    {
      return this.businessData_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.CommuteSummary getRoute()
    {
      return this.route_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasBusinessData();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getBusinessData());
      }
      if (hasRoute()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getRoute());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasBusinessData()
    {
      return this.hasBusinessData;
    }
    
    public boolean hasRoute()
    {
      return this.hasRoute;
    }
    
    public Attraction mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.BusinessData localBusinessData = new Sidekick.BusinessData();
          paramCodedInputStreamMicro.readMessage(localBusinessData);
          setBusinessData(localBusinessData);
          break;
        }
        Sidekick.CommuteSummary localCommuteSummary = new Sidekick.CommuteSummary();
        paramCodedInputStreamMicro.readMessage(localCommuteSummary);
        setRoute(localCommuteSummary);
      }
    }
    
    public Attraction setBusinessData(Sidekick.BusinessData paramBusinessData)
    {
      if (paramBusinessData == null) {
        throw new NullPointerException();
      }
      this.hasBusinessData = true;
      this.businessData_ = paramBusinessData;
      return this;
    }
    
    public Attraction setRoute(Sidekick.CommuteSummary paramCommuteSummary)
    {
      if (paramCommuteSummary == null) {
        throw new NullPointerException();
      }
      this.hasRoute = true;
      this.route_ = paramCommuteSummary;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasBusinessData()) {
        paramCodedOutputStreamMicro.writeMessage(1, getBusinessData());
      }
      if (hasRoute()) {
        paramCodedOutputStreamMicro.writeMessage(2, getRoute());
      }
    }
  }
  
  public static final class AttractionListEntry
    extends MessageMicro
  {
    private List<Sidekick.Attraction> attraction_ = Collections.emptyList();
    private int cachedSize = -1;
    private boolean hasLocation;
    private Sidekick.Location location_ = null;
    
    public AttractionListEntry addAttraction(Sidekick.Attraction paramAttraction)
    {
      if (paramAttraction == null) {
        throw new NullPointerException();
      }
      if (this.attraction_.isEmpty()) {
        this.attraction_ = new ArrayList();
      }
      this.attraction_.add(paramAttraction);
      return this;
    }
    
    public Sidekick.Attraction getAttraction(int paramInt)
    {
      return (Sidekick.Attraction)this.attraction_.get(paramInt);
    }
    
    public int getAttractionCount()
    {
      return this.attraction_.size();
    }
    
    public List<Sidekick.Attraction> getAttractionList()
    {
      return this.attraction_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLocation();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getLocation());
      }
      Iterator localIterator = getAttractionList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.Attraction)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public AttractionListEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        }
        Sidekick.Attraction localAttraction = new Sidekick.Attraction();
        paramCodedInputStreamMicro.readMessage(localAttraction);
        addAttraction(localAttraction);
      }
    }
    
    public AttractionListEntry setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(1, getLocation());
      }
      Iterator localIterator = getAttractionList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.Attraction)localIterator.next());
      }
    }
  }
  
  public static final class Attribution
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasTitle;
    private boolean hasUrl;
    private String title_ = "";
    private String url_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getUrl());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public String getUrl()
    {
      return this.url_;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasUrl()
    {
      return this.hasUrl;
    }
    
    public Attribution mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        }
        setUrl(paramCodedInputStreamMicro.readString());
      }
    }
    
    public Attribution setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public Attribution setUrl(String paramString)
    {
      this.hasUrl = true;
      this.url_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasUrl()) {
        paramCodedOutputStreamMicro.writeString(2, getUrl());
      }
    }
  }
  
  public static final class AuxiliaryMessage
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasPayload;
    private boolean hasType;
    private ByteStringMicro payload_ = ByteStringMicro.EMPTY;
    private String type_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public ByteStringMicro getPayload()
    {
      return this.payload_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getType());
      }
      if (hasPayload()) {
        i += CodedOutputStreamMicro.computeBytesSize(2, getPayload());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getType()
    {
      return this.type_;
    }
    
    public boolean hasPayload()
    {
      return this.hasPayload;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public AuxiliaryMessage mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setType(paramCodedInputStreamMicro.readString());
          break;
        }
        setPayload(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public AuxiliaryMessage setPayload(ByteStringMicro paramByteStringMicro)
    {
      this.hasPayload = true;
      this.payload_ = paramByteStringMicro;
      return this;
    }
    
    public AuxiliaryMessage setType(String paramString)
    {
      this.hasType = true;
      this.type_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasType()) {
        paramCodedOutputStreamMicro.writeString(1, getType());
      }
      if (hasPayload()) {
        paramCodedOutputStreamMicro.writeBytes(2, getPayload());
      }
    }
  }
  
  public static final class BackgroundPhotoDescriptor
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasSource;
    private int source_ = 0;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSource();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getSource());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getSource()
    {
      return this.source_;
    }
    
    public boolean hasSource()
    {
      return this.hasSource;
    }
    
    public BackgroundPhotoDescriptor mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setSource(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public BackgroundPhotoDescriptor setSource(int paramInt)
    {
      this.hasSource = true;
      this.source_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSource()) {
        paramCodedOutputStreamMicro.writeInt32(1, getSource());
      }
    }
  }
  
  public static final class BarcodeEntry
    extends MessageMicro
  {
    private String actionUrl_ = "";
    private Sidekick.Photo barcode_ = null;
    private int cachedSize = -1;
    private FlightBoardingPass flightBoardingPass_ = null;
    private boolean hasActionUrl;
    private boolean hasBarcode;
    private boolean hasFlightBoardingPass;
    
    public String getActionUrl()
    {
      return this.actionUrl_;
    }
    
    public Sidekick.Photo getBarcode()
    {
      return this.barcode_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public FlightBoardingPass getFlightBoardingPass()
    {
      return this.flightBoardingPass_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasBarcode();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getBarcode());
      }
      if (hasActionUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getActionUrl());
      }
      if (hasFlightBoardingPass()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getFlightBoardingPass());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasActionUrl()
    {
      return this.hasActionUrl;
    }
    
    public boolean hasBarcode()
    {
      return this.hasBarcode;
    }
    
    public boolean hasFlightBoardingPass()
    {
      return this.hasFlightBoardingPass;
    }
    
    public BarcodeEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setBarcode(localPhoto);
          break;
        case 18: 
          setActionUrl(paramCodedInputStreamMicro.readString());
          break;
        }
        FlightBoardingPass localFlightBoardingPass = new FlightBoardingPass();
        paramCodedInputStreamMicro.readMessage(localFlightBoardingPass);
        setFlightBoardingPass(localFlightBoardingPass);
      }
    }
    
    public BarcodeEntry setActionUrl(String paramString)
    {
      this.hasActionUrl = true;
      this.actionUrl_ = paramString;
      return this;
    }
    
    public BarcodeEntry setBarcode(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasBarcode = true;
      this.barcode_ = paramPhoto;
      return this;
    }
    
    public BarcodeEntry setFlightBoardingPass(FlightBoardingPass paramFlightBoardingPass)
    {
      if (paramFlightBoardingPass == null) {
        throw new NullPointerException();
      }
      this.hasFlightBoardingPass = true;
      this.flightBoardingPass_ = paramFlightBoardingPass;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasBarcode()) {
        paramCodedOutputStreamMicro.writeMessage(1, getBarcode());
      }
      if (hasActionUrl()) {
        paramCodedOutputStreamMicro.writeString(2, getActionUrl());
      }
      if (hasFlightBoardingPass()) {
        paramCodedOutputStreamMicro.writeMessage(3, getFlightBoardingPass());
      }
    }
    
    public static final class FlightBoardingPass
      extends MessageMicro
    {
      private String additionalTicketText_ = "";
      private String airlineCode_ = "";
      private String airlineName_ = "";
      private String airportCode_ = "";
      private String arrivalAirportCode_ = "";
      private String boardingTime_ = "";
      private int cachedSize = -1;
      private long departureTimeInMs_ = 0L;
      private String flightNumber_ = "";
      private String gate_ = "";
      private List<Sidekick.GmailReference> gmailReference_ = Collections.emptyList();
      private String group_ = "";
      private boolean hasAdditionalTicketText;
      private boolean hasAirlineCode;
      private boolean hasAirlineName;
      private boolean hasAirportCode;
      private boolean hasArrivalAirportCode;
      private boolean hasBoardingTime;
      private boolean hasDepartureTimeInMs;
      private boolean hasFlightNumber;
      private boolean hasGate;
      private boolean hasGroup;
      private boolean hasManageFlightUrl;
      private boolean hasOperatingAirlineCode;
      private boolean hasOperatingAirlineName;
      private boolean hasPassengerName;
      private boolean hasSeat;
      private boolean hasTerminal;
      private boolean hasTicketNumber;
      private String manageFlightUrl_ = "";
      private String operatingAirlineCode_ = "";
      private String operatingAirlineName_ = "";
      private String passengerName_ = "";
      private String seat_ = "";
      private String terminal_ = "";
      private String ticketNumber_ = "";
      
      public FlightBoardingPass addGmailReference(Sidekick.GmailReference paramGmailReference)
      {
        if (paramGmailReference == null) {
          throw new NullPointerException();
        }
        if (this.gmailReference_.isEmpty()) {
          this.gmailReference_ = new ArrayList();
        }
        this.gmailReference_.add(paramGmailReference);
        return this;
      }
      
      public String getAdditionalTicketText()
      {
        return this.additionalTicketText_;
      }
      
      public String getAirlineCode()
      {
        return this.airlineCode_;
      }
      
      public String getAirlineName()
      {
        return this.airlineName_;
      }
      
      public String getAirportCode()
      {
        return this.airportCode_;
      }
      
      public String getArrivalAirportCode()
      {
        return this.arrivalAirportCode_;
      }
      
      public String getBoardingTime()
      {
        return this.boardingTime_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public long getDepartureTimeInMs()
      {
        return this.departureTimeInMs_;
      }
      
      public String getFlightNumber()
      {
        return this.flightNumber_;
      }
      
      public String getGate()
      {
        return this.gate_;
      }
      
      public List<Sidekick.GmailReference> getGmailReferenceList()
      {
        return this.gmailReference_;
      }
      
      public String getGroup()
      {
        return this.group_;
      }
      
      public String getManageFlightUrl()
      {
        return this.manageFlightUrl_;
      }
      
      public String getOperatingAirlineCode()
      {
        return this.operatingAirlineCode_;
      }
      
      public String getOperatingAirlineName()
      {
        return this.operatingAirlineName_;
      }
      
      public String getPassengerName()
      {
        return this.passengerName_;
      }
      
      public String getSeat()
      {
        return this.seat_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasAirlineName();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getAirlineName());
        }
        if (hasFlightNumber()) {
          i += CodedOutputStreamMicro.computeStringSize(2, getFlightNumber());
        }
        if (hasAirportCode()) {
          i += CodedOutputStreamMicro.computeStringSize(3, getAirportCode());
        }
        if (hasPassengerName()) {
          i += CodedOutputStreamMicro.computeStringSize(4, getPassengerName());
        }
        if (hasTerminal()) {
          i += CodedOutputStreamMicro.computeStringSize(5, getTerminal());
        }
        if (hasGate()) {
          i += CodedOutputStreamMicro.computeStringSize(6, getGate());
        }
        if (hasSeat()) {
          i += CodedOutputStreamMicro.computeStringSize(7, getSeat());
        }
        if (hasGroup()) {
          i += CodedOutputStreamMicro.computeStringSize(8, getGroup());
        }
        if (hasBoardingTime()) {
          i += CodedOutputStreamMicro.computeStringSize(9, getBoardingTime());
        }
        Iterator localIterator = getGmailReferenceList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(10, (Sidekick.GmailReference)localIterator.next());
        }
        if (hasManageFlightUrl()) {
          i += CodedOutputStreamMicro.computeStringSize(11, getManageFlightUrl());
        }
        if (hasAirlineCode()) {
          i += CodedOutputStreamMicro.computeStringSize(12, getAirlineCode());
        }
        if (hasAdditionalTicketText()) {
          i += CodedOutputStreamMicro.computeStringSize(13, getAdditionalTicketText());
        }
        if (hasOperatingAirlineName()) {
          i += CodedOutputStreamMicro.computeStringSize(14, getOperatingAirlineName());
        }
        if (hasOperatingAirlineCode()) {
          i += CodedOutputStreamMicro.computeStringSize(15, getOperatingAirlineCode());
        }
        if (hasArrivalAirportCode()) {
          i += CodedOutputStreamMicro.computeStringSize(16, getArrivalAirportCode());
        }
        if (hasDepartureTimeInMs()) {
          i += CodedOutputStreamMicro.computeInt64Size(17, getDepartureTimeInMs());
        }
        if (hasTicketNumber()) {
          i += CodedOutputStreamMicro.computeStringSize(18, getTicketNumber());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getTerminal()
      {
        return this.terminal_;
      }
      
      public String getTicketNumber()
      {
        return this.ticketNumber_;
      }
      
      public boolean hasAdditionalTicketText()
      {
        return this.hasAdditionalTicketText;
      }
      
      public boolean hasAirlineCode()
      {
        return this.hasAirlineCode;
      }
      
      public boolean hasAirlineName()
      {
        return this.hasAirlineName;
      }
      
      public boolean hasAirportCode()
      {
        return this.hasAirportCode;
      }
      
      public boolean hasArrivalAirportCode()
      {
        return this.hasArrivalAirportCode;
      }
      
      public boolean hasBoardingTime()
      {
        return this.hasBoardingTime;
      }
      
      public boolean hasDepartureTimeInMs()
      {
        return this.hasDepartureTimeInMs;
      }
      
      public boolean hasFlightNumber()
      {
        return this.hasFlightNumber;
      }
      
      public boolean hasGate()
      {
        return this.hasGate;
      }
      
      public boolean hasGroup()
      {
        return this.hasGroup;
      }
      
      public boolean hasManageFlightUrl()
      {
        return this.hasManageFlightUrl;
      }
      
      public boolean hasOperatingAirlineCode()
      {
        return this.hasOperatingAirlineCode;
      }
      
      public boolean hasOperatingAirlineName()
      {
        return this.hasOperatingAirlineName;
      }
      
      public boolean hasPassengerName()
      {
        return this.hasPassengerName;
      }
      
      public boolean hasSeat()
      {
        return this.hasSeat;
      }
      
      public boolean hasTerminal()
      {
        return this.hasTerminal;
      }
      
      public boolean hasTicketNumber()
      {
        return this.hasTicketNumber;
      }
      
      public FlightBoardingPass mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setAirlineName(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            setFlightNumber(paramCodedInputStreamMicro.readString());
            break;
          case 26: 
            setAirportCode(paramCodedInputStreamMicro.readString());
            break;
          case 34: 
            setPassengerName(paramCodedInputStreamMicro.readString());
            break;
          case 42: 
            setTerminal(paramCodedInputStreamMicro.readString());
            break;
          case 50: 
            setGate(paramCodedInputStreamMicro.readString());
            break;
          case 58: 
            setSeat(paramCodedInputStreamMicro.readString());
            break;
          case 66: 
            setGroup(paramCodedInputStreamMicro.readString());
            break;
          case 74: 
            setBoardingTime(paramCodedInputStreamMicro.readString());
            break;
          case 82: 
            Sidekick.GmailReference localGmailReference = new Sidekick.GmailReference();
            paramCodedInputStreamMicro.readMessage(localGmailReference);
            addGmailReference(localGmailReference);
            break;
          case 90: 
            setManageFlightUrl(paramCodedInputStreamMicro.readString());
            break;
          case 98: 
            setAirlineCode(paramCodedInputStreamMicro.readString());
            break;
          case 106: 
            setAdditionalTicketText(paramCodedInputStreamMicro.readString());
            break;
          case 114: 
            setOperatingAirlineName(paramCodedInputStreamMicro.readString());
            break;
          case 122: 
            setOperatingAirlineCode(paramCodedInputStreamMicro.readString());
            break;
          case 130: 
            setArrivalAirportCode(paramCodedInputStreamMicro.readString());
            break;
          case 136: 
            setDepartureTimeInMs(paramCodedInputStreamMicro.readInt64());
            break;
          }
          setTicketNumber(paramCodedInputStreamMicro.readString());
        }
      }
      
      public FlightBoardingPass setAdditionalTicketText(String paramString)
      {
        this.hasAdditionalTicketText = true;
        this.additionalTicketText_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setAirlineCode(String paramString)
      {
        this.hasAirlineCode = true;
        this.airlineCode_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setAirlineName(String paramString)
      {
        this.hasAirlineName = true;
        this.airlineName_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setAirportCode(String paramString)
      {
        this.hasAirportCode = true;
        this.airportCode_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setArrivalAirportCode(String paramString)
      {
        this.hasArrivalAirportCode = true;
        this.arrivalAirportCode_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setBoardingTime(String paramString)
      {
        this.hasBoardingTime = true;
        this.boardingTime_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setDepartureTimeInMs(long paramLong)
      {
        this.hasDepartureTimeInMs = true;
        this.departureTimeInMs_ = paramLong;
        return this;
      }
      
      public FlightBoardingPass setFlightNumber(String paramString)
      {
        this.hasFlightNumber = true;
        this.flightNumber_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setGate(String paramString)
      {
        this.hasGate = true;
        this.gate_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setGroup(String paramString)
      {
        this.hasGroup = true;
        this.group_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setManageFlightUrl(String paramString)
      {
        this.hasManageFlightUrl = true;
        this.manageFlightUrl_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setOperatingAirlineCode(String paramString)
      {
        this.hasOperatingAirlineCode = true;
        this.operatingAirlineCode_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setOperatingAirlineName(String paramString)
      {
        this.hasOperatingAirlineName = true;
        this.operatingAirlineName_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setPassengerName(String paramString)
      {
        this.hasPassengerName = true;
        this.passengerName_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setSeat(String paramString)
      {
        this.hasSeat = true;
        this.seat_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setTerminal(String paramString)
      {
        this.hasTerminal = true;
        this.terminal_ = paramString;
        return this;
      }
      
      public FlightBoardingPass setTicketNumber(String paramString)
      {
        this.hasTicketNumber = true;
        this.ticketNumber_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasAirlineName()) {
          paramCodedOutputStreamMicro.writeString(1, getAirlineName());
        }
        if (hasFlightNumber()) {
          paramCodedOutputStreamMicro.writeString(2, getFlightNumber());
        }
        if (hasAirportCode()) {
          paramCodedOutputStreamMicro.writeString(3, getAirportCode());
        }
        if (hasPassengerName()) {
          paramCodedOutputStreamMicro.writeString(4, getPassengerName());
        }
        if (hasTerminal()) {
          paramCodedOutputStreamMicro.writeString(5, getTerminal());
        }
        if (hasGate()) {
          paramCodedOutputStreamMicro.writeString(6, getGate());
        }
        if (hasSeat()) {
          paramCodedOutputStreamMicro.writeString(7, getSeat());
        }
        if (hasGroup()) {
          paramCodedOutputStreamMicro.writeString(8, getGroup());
        }
        if (hasBoardingTime()) {
          paramCodedOutputStreamMicro.writeString(9, getBoardingTime());
        }
        Iterator localIterator = getGmailReferenceList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(10, (Sidekick.GmailReference)localIterator.next());
        }
        if (hasManageFlightUrl()) {
          paramCodedOutputStreamMicro.writeString(11, getManageFlightUrl());
        }
        if (hasAirlineCode()) {
          paramCodedOutputStreamMicro.writeString(12, getAirlineCode());
        }
        if (hasAdditionalTicketText()) {
          paramCodedOutputStreamMicro.writeString(13, getAdditionalTicketText());
        }
        if (hasOperatingAirlineName()) {
          paramCodedOutputStreamMicro.writeString(14, getOperatingAirlineName());
        }
        if (hasOperatingAirlineCode()) {
          paramCodedOutputStreamMicro.writeString(15, getOperatingAirlineCode());
        }
        if (hasArrivalAirportCode()) {
          paramCodedOutputStreamMicro.writeString(16, getArrivalAirportCode());
        }
        if (hasDepartureTimeInMs()) {
          paramCodedOutputStreamMicro.writeInt64(17, getDepartureTimeInMs());
        }
        if (hasTicketNumber()) {
          paramCodedOutputStreamMicro.writeString(18, getTicketNumber());
        }
      }
    }
  }
  
  public static final class BirthdayCardEntry
    extends MessageMicro
  {
    private Sidekick.Photo birthdayDoodle_ = null;
    private int cachedSize = -1;
    private String email_ = "";
    private boolean hasBirthdayDoodle;
    private boolean hasEmail;
    private boolean hasName;
    private boolean hasOwnBirthday;
    private boolean hasOwnBirthdaySeconds;
    private boolean hasPhone;
    private boolean hasPhoto;
    private boolean hasPlusUrl;
    private boolean hasRecipientFocusId;
    private boolean hasSenderFocusId;
    private String name_ = "";
    private long ownBirthdaySeconds_ = 0L;
    private boolean ownBirthday_ = false;
    private String phone_ = "";
    private Sidekick.Photo photo_ = null;
    private String plusUrl_ = "";
    private String recipientFocusId_ = "";
    private String senderFocusId_ = "";
    
    public Sidekick.Photo getBirthdayDoodle()
    {
      return this.birthdayDoodle_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getEmail()
    {
      return this.email_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public boolean getOwnBirthday()
    {
      return this.ownBirthday_;
    }
    
    public long getOwnBirthdaySeconds()
    {
      return this.ownBirthdaySeconds_;
    }
    
    public String getPhone()
    {
      return this.phone_;
    }
    
    public Sidekick.Photo getPhoto()
    {
      return this.photo_;
    }
    
    public String getPlusUrl()
    {
      return this.plusUrl_;
    }
    
    public String getRecipientFocusId()
    {
      return this.recipientFocusId_;
    }
    
    public String getSenderFocusId()
    {
      return this.senderFocusId_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasOwnBirthday();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getOwnBirthday());
      }
      if (hasName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getName());
      }
      if (hasPhoto()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getPhoto());
      }
      if (hasEmail()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getEmail());
      }
      if (hasPhone()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getPhone());
      }
      if (hasPlusUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getPlusUrl());
      }
      if (hasOwnBirthdaySeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(7, getOwnBirthdaySeconds());
      }
      if (hasBirthdayDoodle()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, getBirthdayDoodle());
      }
      if (hasSenderFocusId()) {
        i += CodedOutputStreamMicro.computeStringSize(9, getSenderFocusId());
      }
      if (hasRecipientFocusId()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getRecipientFocusId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasBirthdayDoodle()
    {
      return this.hasBirthdayDoodle;
    }
    
    public boolean hasEmail()
    {
      return this.hasEmail;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasOwnBirthday()
    {
      return this.hasOwnBirthday;
    }
    
    public boolean hasOwnBirthdaySeconds()
    {
      return this.hasOwnBirthdaySeconds;
    }
    
    public boolean hasPhone()
    {
      return this.hasPhone;
    }
    
    public boolean hasPhoto()
    {
      return this.hasPhoto;
    }
    
    public boolean hasPlusUrl()
    {
      return this.hasPlusUrl;
    }
    
    public boolean hasRecipientFocusId()
    {
      return this.hasRecipientFocusId;
    }
    
    public boolean hasSenderFocusId()
    {
      return this.hasSenderFocusId;
    }
    
    public BirthdayCardEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setOwnBirthday(paramCodedInputStreamMicro.readBool());
          break;
        case 18: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto2 = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto2);
          setPhoto(localPhoto2);
          break;
        case 34: 
          setEmail(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          setPhone(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setPlusUrl(paramCodedInputStreamMicro.readString());
          break;
        case 56: 
          setOwnBirthdaySeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 66: 
          Sidekick.Photo localPhoto1 = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto1);
          setBirthdayDoodle(localPhoto1);
          break;
        case 74: 
          setSenderFocusId(paramCodedInputStreamMicro.readString());
          break;
        }
        setRecipientFocusId(paramCodedInputStreamMicro.readString());
      }
    }
    
    public BirthdayCardEntry setBirthdayDoodle(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasBirthdayDoodle = true;
      this.birthdayDoodle_ = paramPhoto;
      return this;
    }
    
    public BirthdayCardEntry setEmail(String paramString)
    {
      this.hasEmail = true;
      this.email_ = paramString;
      return this;
    }
    
    public BirthdayCardEntry setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public BirthdayCardEntry setOwnBirthday(boolean paramBoolean)
    {
      this.hasOwnBirthday = true;
      this.ownBirthday_ = paramBoolean;
      return this;
    }
    
    public BirthdayCardEntry setOwnBirthdaySeconds(long paramLong)
    {
      this.hasOwnBirthdaySeconds = true;
      this.ownBirthdaySeconds_ = paramLong;
      return this;
    }
    
    public BirthdayCardEntry setPhone(String paramString)
    {
      this.hasPhone = true;
      this.phone_ = paramString;
      return this;
    }
    
    public BirthdayCardEntry setPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasPhoto = true;
      this.photo_ = paramPhoto;
      return this;
    }
    
    public BirthdayCardEntry setPlusUrl(String paramString)
    {
      this.hasPlusUrl = true;
      this.plusUrl_ = paramString;
      return this;
    }
    
    public BirthdayCardEntry setRecipientFocusId(String paramString)
    {
      this.hasRecipientFocusId = true;
      this.recipientFocusId_ = paramString;
      return this;
    }
    
    public BirthdayCardEntry setSenderFocusId(String paramString)
    {
      this.hasSenderFocusId = true;
      this.senderFocusId_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasOwnBirthday()) {
        paramCodedOutputStreamMicro.writeBool(1, getOwnBirthday());
      }
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(2, getName());
      }
      if (hasPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(3, getPhoto());
      }
      if (hasEmail()) {
        paramCodedOutputStreamMicro.writeString(4, getEmail());
      }
      if (hasPhone()) {
        paramCodedOutputStreamMicro.writeString(5, getPhone());
      }
      if (hasPlusUrl()) {
        paramCodedOutputStreamMicro.writeString(6, getPlusUrl());
      }
      if (hasOwnBirthdaySeconds()) {
        paramCodedOutputStreamMicro.writeInt64(7, getOwnBirthdaySeconds());
      }
      if (hasBirthdayDoodle()) {
        paramCodedOutputStreamMicro.writeMessage(8, getBirthdayDoodle());
      }
      if (hasSenderFocusId()) {
        paramCodedOutputStreamMicro.writeString(9, getSenderFocusId());
      }
      if (hasRecipientFocusId()) {
        paramCodedOutputStreamMicro.writeString(10, getRecipientFocusId());
      }
    }
  }
  
  public static final class BookEntry
    extends MessageMicro
  {
    private List<String> author_ = Collections.emptyList();
    private String availability_ = "";
    private int cachedSize = -1;
    private boolean hasAvailability;
    private boolean hasImage;
    private boolean hasPlayStoreViewAction;
    private boolean hasPublishDateSecs;
    private boolean hasReasonEntityName;
    private boolean hasTitle;
    private boolean hasViewAction;
    private Sidekick.Photo image_ = null;
    private Sidekick.ClickAction playStoreViewAction_ = null;
    private long publishDateSecs_ = 0L;
    private String reasonEntityName_ = "";
    private String title_ = "";
    private Sidekick.ClickAction viewAction_ = null;
    
    public BookEntry addAuthor(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.author_.isEmpty()) {
        this.author_ = new ArrayList();
      }
      this.author_.add(paramString);
      return this;
    }
    
    public String getAuthor(int paramInt)
    {
      return (String)this.author_.get(paramInt);
    }
    
    public int getAuthorCount()
    {
      return this.author_.size();
    }
    
    public List<String> getAuthorList()
    {
      return this.author_;
    }
    
    public String getAvailability()
    {
      return this.availability_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public Sidekick.ClickAction getPlayStoreViewAction()
    {
      return this.playStoreViewAction_;
    }
    
    public long getPublishDateSecs()
    {
      return this.publishDateSecs_;
    }
    
    public String getReasonEntityName()
    {
      return this.reasonEntityName_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      int j = 0;
      Iterator localIterator = getAuthorList().iterator();
      while (localIterator.hasNext()) {
        j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator.next());
      }
      int k = i + j + 1 * getAuthorList().size();
      if (hasImage()) {
        k += CodedOutputStreamMicro.computeMessageSize(3, getImage());
      }
      if (hasViewAction()) {
        k += CodedOutputStreamMicro.computeMessageSize(4, getViewAction());
      }
      if (hasReasonEntityName()) {
        k += CodedOutputStreamMicro.computeStringSize(5, getReasonEntityName());
      }
      if (hasPublishDateSecs()) {
        k += CodedOutputStreamMicro.computeInt64Size(6, getPublishDateSecs());
      }
      if (hasPlayStoreViewAction()) {
        k += CodedOutputStreamMicro.computeMessageSize(7, getPlayStoreViewAction());
      }
      if (hasAvailability()) {
        k += CodedOutputStreamMicro.computeStringSize(8, getAvailability());
      }
      this.cachedSize = k;
      return k;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public Sidekick.ClickAction getViewAction()
    {
      return this.viewAction_;
    }
    
    public boolean hasAvailability()
    {
      return this.hasAvailability;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasPlayStoreViewAction()
    {
      return this.hasPlayStoreViewAction;
    }
    
    public boolean hasPublishDateSecs()
    {
      return this.hasPublishDateSecs;
    }
    
    public boolean hasReasonEntityName()
    {
      return this.hasReasonEntityName;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasViewAction()
    {
      return this.hasViewAction;
    }
    
    public BookEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          addAuthor(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 34: 
          Sidekick.ClickAction localClickAction2 = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction2);
          setViewAction(localClickAction2);
          break;
        case 42: 
          setReasonEntityName(paramCodedInputStreamMicro.readString());
          break;
        case 48: 
          setPublishDateSecs(paramCodedInputStreamMicro.readInt64());
          break;
        case 58: 
          Sidekick.ClickAction localClickAction1 = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction1);
          setPlayStoreViewAction(localClickAction1);
          break;
        }
        setAvailability(paramCodedInputStreamMicro.readString());
      }
    }
    
    public BookEntry setAvailability(String paramString)
    {
      this.hasAvailability = true;
      this.availability_ = paramString;
      return this;
    }
    
    public BookEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public BookEntry setPlayStoreViewAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasPlayStoreViewAction = true;
      this.playStoreViewAction_ = paramClickAction;
      return this;
    }
    
    public BookEntry setPublishDateSecs(long paramLong)
    {
      this.hasPublishDateSecs = true;
      this.publishDateSecs_ = paramLong;
      return this;
    }
    
    public BookEntry setReasonEntityName(String paramString)
    {
      this.hasReasonEntityName = true;
      this.reasonEntityName_ = paramString;
      return this;
    }
    
    public BookEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public BookEntry setViewAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasViewAction = true;
      this.viewAction_ = paramClickAction;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      Iterator localIterator = getAuthorList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeString(2, (String)localIterator.next());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(3, getImage());
      }
      if (hasViewAction()) {
        paramCodedOutputStreamMicro.writeMessage(4, getViewAction());
      }
      if (hasReasonEntityName()) {
        paramCodedOutputStreamMicro.writeString(5, getReasonEntityName());
      }
      if (hasPublishDateSecs()) {
        paramCodedOutputStreamMicro.writeInt64(6, getPublishDateSecs());
      }
      if (hasPlayStoreViewAction()) {
        paramCodedOutputStreamMicro.writeMessage(7, getPlayStoreViewAction());
      }
      if (hasAvailability()) {
        paramCodedOutputStreamMicro.writeString(8, getAvailability());
      }
    }
  }
  
  public static final class BrowseModeEntityEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.ClickAction clickAction_ = null;
    private boolean hasClickAction;
    private boolean hasImage;
    private boolean hasRating;
    private boolean hasTitle;
    private Sidekick.Photo image_ = null;
    private List<String> knownForTerm_ = Collections.emptyList();
    private Sidekick.Rating rating_ = null;
    private String title_ = "";
    
    public BrowseModeEntityEntry addKnownForTerm(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.knownForTerm_.isEmpty()) {
        this.knownForTerm_ = new ArrayList();
      }
      this.knownForTerm_.add(paramString);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ClickAction getClickAction()
    {
      return this.clickAction_;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public List<String> getKnownForTermList()
    {
      return this.knownForTerm_;
    }
    
    public Sidekick.Rating getRating()
    {
      return this.rating_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getImage());
      }
      int j = 0;
      Iterator localIterator = getKnownForTermList().iterator();
      while (localIterator.hasNext()) {
        j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator.next());
      }
      int k = i + j + 1 * getKnownForTermList().size();
      if (hasClickAction()) {
        k += CodedOutputStreamMicro.computeMessageSize(5, getClickAction());
      }
      if (hasRating()) {
        k += CodedOutputStreamMicro.computeMessageSize(6, getRating());
      }
      this.cachedSize = k;
      return k;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasClickAction()
    {
      return this.hasClickAction;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasRating()
    {
      return this.hasRating;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public BrowseModeEntityEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 34: 
          addKnownForTerm(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction);
          setClickAction(localClickAction);
          break;
        }
        Sidekick.Rating localRating = new Sidekick.Rating();
        paramCodedInputStreamMicro.readMessage(localRating);
        setRating(localRating);
      }
    }
    
    public BrowseModeEntityEntry setClickAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasClickAction = true;
      this.clickAction_ = paramClickAction;
      return this;
    }
    
    public BrowseModeEntityEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public BrowseModeEntityEntry setRating(Sidekick.Rating paramRating)
    {
      if (paramRating == null) {
        throw new NullPointerException();
      }
      this.hasRating = true;
      this.rating_ = paramRating;
      return this;
    }
    
    public BrowseModeEntityEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(2, getImage());
      }
      Iterator localIterator = getKnownForTermList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeString(4, (String)localIterator.next());
      }
      if (hasClickAction()) {
        paramCodedOutputStreamMicro.writeMessage(5, getClickAction());
      }
      if (hasRating()) {
        paramCodedOutputStreamMicro.writeMessage(6, getRating());
      }
    }
  }
  
  public static final class BrowseModeVideoEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int durationSeconds_ = 0;
    private boolean hasDurationSeconds;
    private boolean hasImage;
    private boolean hasPublishTimestampSeconds;
    private boolean hasPublisher;
    private boolean hasTitle;
    private boolean hasViewCount;
    private boolean hasWatchAction;
    private Sidekick.Photo image_ = null;
    private long publishTimestampSeconds_ = 0L;
    private String publisher_ = "";
    private String title_ = "";
    private int viewCount_ = 0;
    private Sidekick.ClickAction watchAction_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getDurationSeconds()
    {
      return this.durationSeconds_;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public long getPublishTimestampSeconds()
    {
      return this.publishTimestampSeconds_;
    }
    
    public String getPublisher()
    {
      return this.publisher_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasPublisher()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getPublisher());
      }
      if (hasViewCount()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getViewCount());
      }
      if (hasDurationSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getDurationSeconds());
      }
      if (hasPublishTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(5, getPublishTimestampSeconds());
      }
      if (hasWatchAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, getWatchAction());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, getImage());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public int getViewCount()
    {
      return this.viewCount_;
    }
    
    public Sidekick.ClickAction getWatchAction()
    {
      return this.watchAction_;
    }
    
    public boolean hasDurationSeconds()
    {
      return this.hasDurationSeconds;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasPublishTimestampSeconds()
    {
      return this.hasPublishTimestampSeconds;
    }
    
    public boolean hasPublisher()
    {
      return this.hasPublisher;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasViewCount()
    {
      return this.hasViewCount;
    }
    
    public boolean hasWatchAction()
    {
      return this.hasWatchAction;
    }
    
    public BrowseModeVideoEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setPublisher(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setViewCount(paramCodedInputStreamMicro.readInt32());
          break;
        case 32: 
          setDurationSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 40: 
          setPublishTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 50: 
          Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction);
          setWatchAction(localClickAction);
          break;
        }
        Sidekick.Photo localPhoto = new Sidekick.Photo();
        paramCodedInputStreamMicro.readMessage(localPhoto);
        setImage(localPhoto);
      }
    }
    
    public BrowseModeVideoEntry setDurationSeconds(int paramInt)
    {
      this.hasDurationSeconds = true;
      this.durationSeconds_ = paramInt;
      return this;
    }
    
    public BrowseModeVideoEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public BrowseModeVideoEntry setPublishTimestampSeconds(long paramLong)
    {
      this.hasPublishTimestampSeconds = true;
      this.publishTimestampSeconds_ = paramLong;
      return this;
    }
    
    public BrowseModeVideoEntry setPublisher(String paramString)
    {
      this.hasPublisher = true;
      this.publisher_ = paramString;
      return this;
    }
    
    public BrowseModeVideoEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public BrowseModeVideoEntry setViewCount(int paramInt)
    {
      this.hasViewCount = true;
      this.viewCount_ = paramInt;
      return this;
    }
    
    public BrowseModeVideoEntry setWatchAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasWatchAction = true;
      this.watchAction_ = paramClickAction;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasPublisher()) {
        paramCodedOutputStreamMicro.writeString(2, getPublisher());
      }
      if (hasViewCount()) {
        paramCodedOutputStreamMicro.writeInt32(3, getViewCount());
      }
      if (hasDurationSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(4, getDurationSeconds());
      }
      if (hasPublishTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(5, getPublishTimestampSeconds());
      }
      if (hasWatchAction()) {
        paramCodedOutputStreamMicro.writeMessage(6, getWatchAction());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(7, getImage());
      }
    }
  }
  
  public static final class BusinessData
    extends MessageMicro
  {
    private BusinessTimeSeconds businessTime_ = null;
    private int cachedSize = -1;
    private long cid_ = 0L;
    private Sidekick.Photo coverPhoto_ = null;
    private Sidekick.GeostoreFeatureId featureId_ = null;
    private boolean hasBusinessTime;
    private boolean hasCid;
    private boolean hasCoverPhoto;
    private boolean hasFeatureId;
    private boolean hasLocation;
    private boolean hasName;
    private boolean hasNumRatingStarsE3;
    private boolean hasNumReviews;
    private boolean hasOpenHours;
    private boolean hasOpenHoursToday;
    private boolean hasOpenUntil;
    private boolean hasPhoneNumber;
    private boolean hasPriceLevel;
    private boolean hasReviewScore;
    private boolean hasStarRating;
    private boolean hasWebsite;
    private boolean hasZagatRated;
    private List<String> knownForTerm_ = Collections.emptyList();
    private Sidekick.Location location_ = null;
    private String name_ = "";
    private int numRatingStarsE3_ = 0;
    private int numReviews_ = 0;
    private String openHoursToday_ = "";
    private String openHours_ = "";
    private String openUntil_ = "";
    private String phoneNumber_ = "";
    private String priceLevel_ = "";
    private int reviewScore_ = 0;
    private String starRating_ = "";
    private String website_ = "";
    private boolean zagatRated_ = false;
    
    public BusinessData addKnownForTerm(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.knownForTerm_.isEmpty()) {
        this.knownForTerm_ = new ArrayList();
      }
      this.knownForTerm_.add(paramString);
      return this;
    }
    
    public BusinessTimeSeconds getBusinessTime()
    {
      return this.businessTime_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getCid()
    {
      return this.cid_;
    }
    
    public Sidekick.Photo getCoverPhoto()
    {
      return this.coverPhoto_;
    }
    
    public Sidekick.GeostoreFeatureId getFeatureId()
    {
      return this.featureId_;
    }
    
    public int getKnownForTermCount()
    {
      return this.knownForTerm_.size();
    }
    
    public List<String> getKnownForTermList()
    {
      return this.knownForTerm_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public int getNumRatingStarsE3()
    {
      return this.numRatingStarsE3_;
    }
    
    public int getNumReviews()
    {
      return this.numReviews_;
    }
    
    public String getOpenHours()
    {
      return this.openHours_;
    }
    
    public String getOpenHoursToday()
    {
      return this.openHoursToday_;
    }
    
    public String getOpenUntil()
    {
      return this.openUntil_;
    }
    
    public String getPhoneNumber()
    {
      return this.phoneNumber_;
    }
    
    public String getPriceLevel()
    {
      return this.priceLevel_;
    }
    
    public int getReviewScore()
    {
      return this.reviewScore_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasCid();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeUInt64Size(1, getCid());
      }
      if (hasOpenHours()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getOpenHours());
      }
      if (hasStarRating()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getStarRating());
      }
      int j = 0;
      Iterator localIterator = getKnownForTermList().iterator();
      while (localIterator.hasNext()) {
        j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator.next());
      }
      int k = i + j + 1 * getKnownForTermList().size();
      if (hasFeatureId()) {
        k += CodedOutputStreamMicro.computeMessageSize(5, getFeatureId());
      }
      if (hasOpenHoursToday()) {
        k += CodedOutputStreamMicro.computeStringSize(6, getOpenHoursToday());
      }
      if (hasCoverPhoto()) {
        k += CodedOutputStreamMicro.computeMessageSize(7, getCoverPhoto());
      }
      if (hasPhoneNumber()) {
        k += CodedOutputStreamMicro.computeStringSize(8, getPhoneNumber());
      }
      if (hasZagatRated()) {
        k += CodedOutputStreamMicro.computeBoolSize(9, getZagatRated());
      }
      if (hasNumReviews()) {
        k += CodedOutputStreamMicro.computeInt32Size(10, getNumReviews());
      }
      if (hasReviewScore()) {
        k += CodedOutputStreamMicro.computeInt32Size(11, getReviewScore());
      }
      if (hasPriceLevel()) {
        k += CodedOutputStreamMicro.computeStringSize(12, getPriceLevel());
      }
      if (hasName()) {
        k += CodedOutputStreamMicro.computeStringSize(13, getName());
      }
      if (hasWebsite()) {
        k += CodedOutputStreamMicro.computeStringSize(14, getWebsite());
      }
      if (hasOpenUntil()) {
        k += CodedOutputStreamMicro.computeStringSize(15, getOpenUntil());
      }
      if (hasNumRatingStarsE3()) {
        k += CodedOutputStreamMicro.computeInt32Size(17, getNumRatingStarsE3());
      }
      if (hasLocation()) {
        k += CodedOutputStreamMicro.computeMessageSize(18, getLocation());
      }
      if (hasBusinessTime()) {
        k += CodedOutputStreamMicro.computeMessageSize(19, getBusinessTime());
      }
      this.cachedSize = k;
      return k;
    }
    
    public String getStarRating()
    {
      return this.starRating_;
    }
    
    public String getWebsite()
    {
      return this.website_;
    }
    
    public boolean getZagatRated()
    {
      return this.zagatRated_;
    }
    
    public boolean hasBusinessTime()
    {
      return this.hasBusinessTime;
    }
    
    public boolean hasCid()
    {
      return this.hasCid;
    }
    
    public boolean hasCoverPhoto()
    {
      return this.hasCoverPhoto;
    }
    
    public boolean hasFeatureId()
    {
      return this.hasFeatureId;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasNumRatingStarsE3()
    {
      return this.hasNumRatingStarsE3;
    }
    
    public boolean hasNumReviews()
    {
      return this.hasNumReviews;
    }
    
    public boolean hasOpenHours()
    {
      return this.hasOpenHours;
    }
    
    public boolean hasOpenHoursToday()
    {
      return this.hasOpenHoursToday;
    }
    
    public boolean hasOpenUntil()
    {
      return this.hasOpenUntil;
    }
    
    public boolean hasPhoneNumber()
    {
      return this.hasPhoneNumber;
    }
    
    public boolean hasPriceLevel()
    {
      return this.hasPriceLevel;
    }
    
    public boolean hasReviewScore()
    {
      return this.hasReviewScore;
    }
    
    public boolean hasStarRating()
    {
      return this.hasStarRating;
    }
    
    public boolean hasWebsite()
    {
      return this.hasWebsite;
    }
    
    public boolean hasZagatRated()
    {
      return this.hasZagatRated;
    }
    
    public BusinessData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setCid(paramCodedInputStreamMicro.readUInt64());
          break;
        case 18: 
          setOpenHours(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setStarRating(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          addKnownForTerm(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          Sidekick.GeostoreFeatureId localGeostoreFeatureId = new Sidekick.GeostoreFeatureId();
          paramCodedInputStreamMicro.readMessage(localGeostoreFeatureId);
          setFeatureId(localGeostoreFeatureId);
          break;
        case 50: 
          setOpenHoursToday(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setCoverPhoto(localPhoto);
          break;
        case 66: 
          setPhoneNumber(paramCodedInputStreamMicro.readString());
          break;
        case 72: 
          setZagatRated(paramCodedInputStreamMicro.readBool());
          break;
        case 80: 
          setNumReviews(paramCodedInputStreamMicro.readInt32());
          break;
        case 88: 
          setReviewScore(paramCodedInputStreamMicro.readInt32());
          break;
        case 98: 
          setPriceLevel(paramCodedInputStreamMicro.readString());
          break;
        case 106: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 114: 
          setWebsite(paramCodedInputStreamMicro.readString());
          break;
        case 122: 
          setOpenUntil(paramCodedInputStreamMicro.readString());
          break;
        case 136: 
          setNumRatingStarsE3(paramCodedInputStreamMicro.readInt32());
          break;
        case 146: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        }
        BusinessTimeSeconds localBusinessTimeSeconds = new BusinessTimeSeconds();
        paramCodedInputStreamMicro.readMessage(localBusinessTimeSeconds);
        setBusinessTime(localBusinessTimeSeconds);
      }
    }
    
    public BusinessData setBusinessTime(BusinessTimeSeconds paramBusinessTimeSeconds)
    {
      if (paramBusinessTimeSeconds == null) {
        throw new NullPointerException();
      }
      this.hasBusinessTime = true;
      this.businessTime_ = paramBusinessTimeSeconds;
      return this;
    }
    
    public BusinessData setCid(long paramLong)
    {
      this.hasCid = true;
      this.cid_ = paramLong;
      return this;
    }
    
    public BusinessData setCoverPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasCoverPhoto = true;
      this.coverPhoto_ = paramPhoto;
      return this;
    }
    
    public BusinessData setFeatureId(Sidekick.GeostoreFeatureId paramGeostoreFeatureId)
    {
      if (paramGeostoreFeatureId == null) {
        throw new NullPointerException();
      }
      this.hasFeatureId = true;
      this.featureId_ = paramGeostoreFeatureId;
      return this;
    }
    
    public BusinessData setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public BusinessData setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public BusinessData setNumRatingStarsE3(int paramInt)
    {
      this.hasNumRatingStarsE3 = true;
      this.numRatingStarsE3_ = paramInt;
      return this;
    }
    
    public BusinessData setNumReviews(int paramInt)
    {
      this.hasNumReviews = true;
      this.numReviews_ = paramInt;
      return this;
    }
    
    public BusinessData setOpenHours(String paramString)
    {
      this.hasOpenHours = true;
      this.openHours_ = paramString;
      return this;
    }
    
    public BusinessData setOpenHoursToday(String paramString)
    {
      this.hasOpenHoursToday = true;
      this.openHoursToday_ = paramString;
      return this;
    }
    
    public BusinessData setOpenUntil(String paramString)
    {
      this.hasOpenUntil = true;
      this.openUntil_ = paramString;
      return this;
    }
    
    public BusinessData setPhoneNumber(String paramString)
    {
      this.hasPhoneNumber = true;
      this.phoneNumber_ = paramString;
      return this;
    }
    
    public BusinessData setPriceLevel(String paramString)
    {
      this.hasPriceLevel = true;
      this.priceLevel_ = paramString;
      return this;
    }
    
    public BusinessData setReviewScore(int paramInt)
    {
      this.hasReviewScore = true;
      this.reviewScore_ = paramInt;
      return this;
    }
    
    public BusinessData setStarRating(String paramString)
    {
      this.hasStarRating = true;
      this.starRating_ = paramString;
      return this;
    }
    
    public BusinessData setWebsite(String paramString)
    {
      this.hasWebsite = true;
      this.website_ = paramString;
      return this;
    }
    
    public BusinessData setZagatRated(boolean paramBoolean)
    {
      this.hasZagatRated = true;
      this.zagatRated_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasCid()) {
        paramCodedOutputStreamMicro.writeUInt64(1, getCid());
      }
      if (hasOpenHours()) {
        paramCodedOutputStreamMicro.writeString(2, getOpenHours());
      }
      if (hasStarRating()) {
        paramCodedOutputStreamMicro.writeString(3, getStarRating());
      }
      Iterator localIterator = getKnownForTermList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeString(4, (String)localIterator.next());
      }
      if (hasFeatureId()) {
        paramCodedOutputStreamMicro.writeMessage(5, getFeatureId());
      }
      if (hasOpenHoursToday()) {
        paramCodedOutputStreamMicro.writeString(6, getOpenHoursToday());
      }
      if (hasCoverPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(7, getCoverPhoto());
      }
      if (hasPhoneNumber()) {
        paramCodedOutputStreamMicro.writeString(8, getPhoneNumber());
      }
      if (hasZagatRated()) {
        paramCodedOutputStreamMicro.writeBool(9, getZagatRated());
      }
      if (hasNumReviews()) {
        paramCodedOutputStreamMicro.writeInt32(10, getNumReviews());
      }
      if (hasReviewScore()) {
        paramCodedOutputStreamMicro.writeInt32(11, getReviewScore());
      }
      if (hasPriceLevel()) {
        paramCodedOutputStreamMicro.writeString(12, getPriceLevel());
      }
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(13, getName());
      }
      if (hasWebsite()) {
        paramCodedOutputStreamMicro.writeString(14, getWebsite());
      }
      if (hasOpenUntil()) {
        paramCodedOutputStreamMicro.writeString(15, getOpenUntil());
      }
      if (hasNumRatingStarsE3()) {
        paramCodedOutputStreamMicro.writeInt32(17, getNumRatingStarsE3());
      }
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(18, getLocation());
      }
      if (hasBusinessTime()) {
        paramCodedOutputStreamMicro.writeMessage(19, getBusinessTime());
      }
    }
    
    public static final class BusinessTimeSeconds
      extends MessageMicro
    {
      private int cachedSize = -1;
      private long closingTimeSeconds_ = 0L;
      private boolean hasClosingTimeSeconds;
      private boolean hasOpeningTimeSeconds;
      private long openingTimeSeconds_ = 0L;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public long getClosingTimeSeconds()
      {
        return this.closingTimeSeconds_;
      }
      
      public long getOpeningTimeSeconds()
      {
        return this.openingTimeSeconds_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasOpeningTimeSeconds();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getOpeningTimeSeconds());
        }
        if (hasClosingTimeSeconds()) {
          i += CodedOutputStreamMicro.computeInt64Size(2, getClosingTimeSeconds());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasClosingTimeSeconds()
      {
        return this.hasClosingTimeSeconds;
      }
      
      public boolean hasOpeningTimeSeconds()
      {
        return this.hasOpeningTimeSeconds;
      }
      
      public BusinessTimeSeconds mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setOpeningTimeSeconds(paramCodedInputStreamMicro.readInt64());
            break;
          }
          setClosingTimeSeconds(paramCodedInputStreamMicro.readInt64());
        }
      }
      
      public BusinessTimeSeconds setClosingTimeSeconds(long paramLong)
      {
        this.hasClosingTimeSeconds = true;
        this.closingTimeSeconds_ = paramLong;
        return this;
      }
      
      public BusinessTimeSeconds setOpeningTimeSeconds(long paramLong)
      {
        this.hasOpeningTimeSeconds = true;
        this.openingTimeSeconds_ = paramLong;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasOpeningTimeSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(1, getOpeningTimeSeconds());
        }
        if (hasClosingTimeSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(2, getClosingTimeSeconds());
        }
      }
    }
  }
  
  public static final class CalendarEntry
    extends MessageMicro
  {
    private List<String> attendee_ = Collections.emptyList();
    private int cachedSize = -1;
    private long endTimeSeconds_ = 0L;
    private int endTimeZoneOffsetSeconds_ = 0;
    private String endTimeZone_ = "";
    private String eventUrl_ = "";
    private boolean hasEndTimeSeconds;
    private boolean hasEndTimeZone;
    private boolean hasEndTimeZoneOffsetSeconds;
    private boolean hasEventUrl;
    private boolean hasHash;
    private boolean hasLocation;
    private boolean hasParticipationResponse;
    private boolean hasRoute;
    private boolean hasStartTimeSeconds;
    private boolean hasStartTimeZone;
    private boolean hasStartTimeZoneOffsetSeconds;
    private boolean hasTitle;
    private boolean hasTravelTimeSeconds;
    private String hash_ = "";
    private Sidekick.Location location_ = null;
    private int participationResponse_ = 1;
    private Sidekick.CommuteSummary route_ = null;
    private long startTimeSeconds_ = 0L;
    private int startTimeZoneOffsetSeconds_ = 0;
    private String startTimeZone_ = "";
    private String title_ = "";
    private int travelTimeSeconds_ = 0;
    
    public CalendarEntry addAttendee(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.attendee_.isEmpty()) {
        this.attendee_ = new ArrayList();
      }
      this.attendee_.add(paramString);
      return this;
    }
    
    public List<String> getAttendeeList()
    {
      return this.attendee_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getEndTimeSeconds()
    {
      return this.endTimeSeconds_;
    }
    
    public String getEndTimeZone()
    {
      return this.endTimeZone_;
    }
    
    public int getEndTimeZoneOffsetSeconds()
    {
      return this.endTimeZoneOffsetSeconds_;
    }
    
    public String getEventUrl()
    {
      return this.eventUrl_;
    }
    
    public String getHash()
    {
      return this.hash_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public int getParticipationResponse()
    {
      return this.participationResponse_;
    }
    
    public Sidekick.CommuteSummary getRoute()
    {
      return this.route_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasHash();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getHash());
      }
      if (hasLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getLocation());
      }
      if (hasRoute()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getRoute());
      }
      if (hasTravelTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getTravelTimeSeconds());
      }
      if (hasTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getTitle());
      }
      if (hasStartTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(6, getStartTimeSeconds());
      }
      if (hasStartTimeZone()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getStartTimeZone());
      }
      if (hasStartTimeZoneOffsetSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(8, getStartTimeZoneOffsetSeconds());
      }
      if (hasEndTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(9, getEndTimeSeconds());
      }
      if (hasEndTimeZone()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getEndTimeZone());
      }
      if (hasEndTimeZoneOffsetSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(11, getEndTimeZoneOffsetSeconds());
      }
      if (hasEventUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(12, getEventUrl());
      }
      if (hasParticipationResponse()) {
        i += CodedOutputStreamMicro.computeInt32Size(13, getParticipationResponse());
      }
      int j = 0;
      Iterator localIterator = getAttendeeList().iterator();
      while (localIterator.hasNext()) {
        j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator.next());
      }
      int k = i + j + 1 * getAttendeeList().size();
      this.cachedSize = k;
      return k;
    }
    
    public long getStartTimeSeconds()
    {
      return this.startTimeSeconds_;
    }
    
    public String getStartTimeZone()
    {
      return this.startTimeZone_;
    }
    
    public int getStartTimeZoneOffsetSeconds()
    {
      return this.startTimeZoneOffsetSeconds_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public int getTravelTimeSeconds()
    {
      return this.travelTimeSeconds_;
    }
    
    public boolean hasEndTimeSeconds()
    {
      return this.hasEndTimeSeconds;
    }
    
    public boolean hasEndTimeZone()
    {
      return this.hasEndTimeZone;
    }
    
    public boolean hasEndTimeZoneOffsetSeconds()
    {
      return this.hasEndTimeZoneOffsetSeconds;
    }
    
    public boolean hasEventUrl()
    {
      return this.hasEventUrl;
    }
    
    public boolean hasHash()
    {
      return this.hasHash;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasParticipationResponse()
    {
      return this.hasParticipationResponse;
    }
    
    public boolean hasRoute()
    {
      return this.hasRoute;
    }
    
    public boolean hasStartTimeSeconds()
    {
      return this.hasStartTimeSeconds;
    }
    
    public boolean hasStartTimeZone()
    {
      return this.hasStartTimeZone;
    }
    
    public boolean hasStartTimeZoneOffsetSeconds()
    {
      return this.hasStartTimeZoneOffsetSeconds;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasTravelTimeSeconds()
    {
      return this.hasTravelTimeSeconds;
    }
    
    public CalendarEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setHash(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 26: 
          Sidekick.CommuteSummary localCommuteSummary = new Sidekick.CommuteSummary();
          paramCodedInputStreamMicro.readMessage(localCommuteSummary);
          setRoute(localCommuteSummary);
          break;
        case 32: 
          setTravelTimeSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 42: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 48: 
          setStartTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 58: 
          setStartTimeZone(paramCodedInputStreamMicro.readString());
          break;
        case 64: 
          setStartTimeZoneOffsetSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 72: 
          setEndTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 82: 
          setEndTimeZone(paramCodedInputStreamMicro.readString());
          break;
        case 88: 
          setEndTimeZoneOffsetSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 98: 
          setEventUrl(paramCodedInputStreamMicro.readString());
          break;
        case 104: 
          setParticipationResponse(paramCodedInputStreamMicro.readInt32());
          break;
        }
        addAttendee(paramCodedInputStreamMicro.readString());
      }
    }
    
    public CalendarEntry setEndTimeSeconds(long paramLong)
    {
      this.hasEndTimeSeconds = true;
      this.endTimeSeconds_ = paramLong;
      return this;
    }
    
    public CalendarEntry setEndTimeZone(String paramString)
    {
      this.hasEndTimeZone = true;
      this.endTimeZone_ = paramString;
      return this;
    }
    
    public CalendarEntry setEndTimeZoneOffsetSeconds(int paramInt)
    {
      this.hasEndTimeZoneOffsetSeconds = true;
      this.endTimeZoneOffsetSeconds_ = paramInt;
      return this;
    }
    
    public CalendarEntry setEventUrl(String paramString)
    {
      this.hasEventUrl = true;
      this.eventUrl_ = paramString;
      return this;
    }
    
    public CalendarEntry setHash(String paramString)
    {
      this.hasHash = true;
      this.hash_ = paramString;
      return this;
    }
    
    public CalendarEntry setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public CalendarEntry setParticipationResponse(int paramInt)
    {
      this.hasParticipationResponse = true;
      this.participationResponse_ = paramInt;
      return this;
    }
    
    public CalendarEntry setRoute(Sidekick.CommuteSummary paramCommuteSummary)
    {
      if (paramCommuteSummary == null) {
        throw new NullPointerException();
      }
      this.hasRoute = true;
      this.route_ = paramCommuteSummary;
      return this;
    }
    
    public CalendarEntry setStartTimeSeconds(long paramLong)
    {
      this.hasStartTimeSeconds = true;
      this.startTimeSeconds_ = paramLong;
      return this;
    }
    
    public CalendarEntry setStartTimeZone(String paramString)
    {
      this.hasStartTimeZone = true;
      this.startTimeZone_ = paramString;
      return this;
    }
    
    public CalendarEntry setStartTimeZoneOffsetSeconds(int paramInt)
    {
      this.hasStartTimeZoneOffsetSeconds = true;
      this.startTimeZoneOffsetSeconds_ = paramInt;
      return this;
    }
    
    public CalendarEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public CalendarEntry setTravelTimeSeconds(int paramInt)
    {
      this.hasTravelTimeSeconds = true;
      this.travelTimeSeconds_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasHash()) {
        paramCodedOutputStreamMicro.writeString(1, getHash());
      }
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(2, getLocation());
      }
      if (hasRoute()) {
        paramCodedOutputStreamMicro.writeMessage(3, getRoute());
      }
      if (hasTravelTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(4, getTravelTimeSeconds());
      }
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(5, getTitle());
      }
      if (hasStartTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(6, getStartTimeSeconds());
      }
      if (hasStartTimeZone()) {
        paramCodedOutputStreamMicro.writeString(7, getStartTimeZone());
      }
      if (hasStartTimeZoneOffsetSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(8, getStartTimeZoneOffsetSeconds());
      }
      if (hasEndTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(9, getEndTimeSeconds());
      }
      if (hasEndTimeZone()) {
        paramCodedOutputStreamMicro.writeString(10, getEndTimeZone());
      }
      if (hasEndTimeZoneOffsetSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(11, getEndTimeZoneOffsetSeconds());
      }
      if (hasEventUrl()) {
        paramCodedOutputStreamMicro.writeString(12, getEventUrl());
      }
      if (hasParticipationResponse()) {
        paramCodedOutputStreamMicro.writeInt32(13, getParticipationResponse());
      }
      Iterator localIterator = getAttendeeList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeString(14, (String)localIterator.next());
      }
    }
  }
  
  public static final class CarRentalEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String confirmationNumber_ = "";
    private long departureTimeMs_ = 0L;
    private Sidekick.GmailReference gmailReference_ = null;
    private boolean hasConfirmationNumber;
    private boolean hasDepartureTimeMs;
    private boolean hasGmailReference;
    private boolean hasManageReservationUrl;
    private boolean hasPickupLocation;
    private boolean hasPickupPhone;
    private boolean hasPickupTime;
    private boolean hasProviderName;
    private boolean hasRenterName;
    private boolean hasReturnLocation;
    private boolean hasReturnPhone;
    private boolean hasReturnTime;
    private boolean hasRoute;
    private boolean hasSubtitle;
    private boolean hasTitle;
    private boolean hasType;
    private String manageReservationUrl_ = "";
    private Sidekick.Location pickupLocation_ = null;
    private String pickupPhone_ = "";
    private Sidekick.TimeWithZone pickupTime_ = null;
    private String providerName_ = "";
    private String renterName_ = "";
    private Sidekick.Location returnLocation_ = null;
    private String returnPhone_ = "";
    private Sidekick.TimeWithZone returnTime_ = null;
    private Sidekick.CommuteSummary route_ = null;
    private String subtitle_ = "";
    private String title_ = "";
    private int type_ = 1;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getConfirmationNumber()
    {
      return this.confirmationNumber_;
    }
    
    public long getDepartureTimeMs()
    {
      return this.departureTimeMs_;
    }
    
    public Sidekick.GmailReference getGmailReference()
    {
      return this.gmailReference_;
    }
    
    public String getManageReservationUrl()
    {
      return this.manageReservationUrl_;
    }
    
    public Sidekick.Location getPickupLocation()
    {
      return this.pickupLocation_;
    }
    
    public String getPickupPhone()
    {
      return this.pickupPhone_;
    }
    
    public Sidekick.TimeWithZone getPickupTime()
    {
      return this.pickupTime_;
    }
    
    public String getProviderName()
    {
      return this.providerName_;
    }
    
    public String getRenterName()
    {
      return this.renterName_;
    }
    
    public Sidekick.Location getReturnLocation()
    {
      return this.returnLocation_;
    }
    
    public String getReturnPhone()
    {
      return this.returnPhone_;
    }
    
    public Sidekick.TimeWithZone getReturnTime()
    {
      return this.returnTime_;
    }
    
    public Sidekick.CommuteSummary getRoute()
    {
      return this.route_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasSubtitle()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSubtitle());
      }
      if (hasRenterName()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getRenterName());
      }
      if (hasConfirmationNumber()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getConfirmationNumber());
      }
      if (hasPickupTime()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getPickupTime());
      }
      if (hasPickupLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, getPickupLocation());
      }
      if (hasPickupPhone()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getPickupPhone());
      }
      if (hasReturnTime()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getReturnTime());
      }
      if (hasReturnLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getReturnLocation());
      }
      if (hasReturnPhone()) {
        i += CodedOutputStreamMicro.computeStringSize(12, getReturnPhone());
      }
      if (hasGmailReference()) {
        i += CodedOutputStreamMicro.computeMessageSize(13, getGmailReference());
      }
      if (hasDepartureTimeMs()) {
        i += CodedOutputStreamMicro.computeInt64Size(14, getDepartureTimeMs());
      }
      if (hasRoute()) {
        i += CodedOutputStreamMicro.computeMessageSize(15, getRoute());
      }
      if (hasType()) {
        i += CodedOutputStreamMicro.computeInt32Size(16, getType());
      }
      if (hasManageReservationUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(17, getManageReservationUrl());
      }
      if (hasProviderName()) {
        i += CodedOutputStreamMicro.computeStringSize(18, getProviderName());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSubtitle()
    {
      return this.subtitle_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public boolean hasConfirmationNumber()
    {
      return this.hasConfirmationNumber;
    }
    
    public boolean hasDepartureTimeMs()
    {
      return this.hasDepartureTimeMs;
    }
    
    public boolean hasGmailReference()
    {
      return this.hasGmailReference;
    }
    
    public boolean hasManageReservationUrl()
    {
      return this.hasManageReservationUrl;
    }
    
    public boolean hasPickupLocation()
    {
      return this.hasPickupLocation;
    }
    
    public boolean hasPickupPhone()
    {
      return this.hasPickupPhone;
    }
    
    public boolean hasPickupTime()
    {
      return this.hasPickupTime;
    }
    
    public boolean hasProviderName()
    {
      return this.hasProviderName;
    }
    
    public boolean hasRenterName()
    {
      return this.hasRenterName;
    }
    
    public boolean hasReturnLocation()
    {
      return this.hasReturnLocation;
    }
    
    public boolean hasReturnPhone()
    {
      return this.hasReturnPhone;
    }
    
    public boolean hasReturnTime()
    {
      return this.hasReturnTime;
    }
    
    public boolean hasRoute()
    {
      return this.hasRoute;
    }
    
    public boolean hasSubtitle()
    {
      return this.hasSubtitle;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public CarRentalEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSubtitle(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setRenterName(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setConfirmationNumber(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          Sidekick.TimeWithZone localTimeWithZone2 = new Sidekick.TimeWithZone();
          paramCodedInputStreamMicro.readMessage(localTimeWithZone2);
          setPickupTime(localTimeWithZone2);
          break;
        case 50: 
          Sidekick.Location localLocation2 = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation2);
          setPickupLocation(localLocation2);
          break;
        case 66: 
          setPickupPhone(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          Sidekick.TimeWithZone localTimeWithZone1 = new Sidekick.TimeWithZone();
          paramCodedInputStreamMicro.readMessage(localTimeWithZone1);
          setReturnTime(localTimeWithZone1);
          break;
        case 82: 
          Sidekick.Location localLocation1 = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation1);
          setReturnLocation(localLocation1);
          break;
        case 98: 
          setReturnPhone(paramCodedInputStreamMicro.readString());
          break;
        case 106: 
          Sidekick.GmailReference localGmailReference = new Sidekick.GmailReference();
          paramCodedInputStreamMicro.readMessage(localGmailReference);
          setGmailReference(localGmailReference);
          break;
        case 112: 
          setDepartureTimeMs(paramCodedInputStreamMicro.readInt64());
          break;
        case 122: 
          Sidekick.CommuteSummary localCommuteSummary = new Sidekick.CommuteSummary();
          paramCodedInputStreamMicro.readMessage(localCommuteSummary);
          setRoute(localCommuteSummary);
          break;
        case 128: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        case 138: 
          setManageReservationUrl(paramCodedInputStreamMicro.readString());
          break;
        }
        setProviderName(paramCodedInputStreamMicro.readString());
      }
    }
    
    public CarRentalEntry setConfirmationNumber(String paramString)
    {
      this.hasConfirmationNumber = true;
      this.confirmationNumber_ = paramString;
      return this;
    }
    
    public CarRentalEntry setDepartureTimeMs(long paramLong)
    {
      this.hasDepartureTimeMs = true;
      this.departureTimeMs_ = paramLong;
      return this;
    }
    
    public CarRentalEntry setGmailReference(Sidekick.GmailReference paramGmailReference)
    {
      if (paramGmailReference == null) {
        throw new NullPointerException();
      }
      this.hasGmailReference = true;
      this.gmailReference_ = paramGmailReference;
      return this;
    }
    
    public CarRentalEntry setManageReservationUrl(String paramString)
    {
      this.hasManageReservationUrl = true;
      this.manageReservationUrl_ = paramString;
      return this;
    }
    
    public CarRentalEntry setPickupLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasPickupLocation = true;
      this.pickupLocation_ = paramLocation;
      return this;
    }
    
    public CarRentalEntry setPickupPhone(String paramString)
    {
      this.hasPickupPhone = true;
      this.pickupPhone_ = paramString;
      return this;
    }
    
    public CarRentalEntry setPickupTime(Sidekick.TimeWithZone paramTimeWithZone)
    {
      if (paramTimeWithZone == null) {
        throw new NullPointerException();
      }
      this.hasPickupTime = true;
      this.pickupTime_ = paramTimeWithZone;
      return this;
    }
    
    public CarRentalEntry setProviderName(String paramString)
    {
      this.hasProviderName = true;
      this.providerName_ = paramString;
      return this;
    }
    
    public CarRentalEntry setRenterName(String paramString)
    {
      this.hasRenterName = true;
      this.renterName_ = paramString;
      return this;
    }
    
    public CarRentalEntry setReturnLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasReturnLocation = true;
      this.returnLocation_ = paramLocation;
      return this;
    }
    
    public CarRentalEntry setReturnPhone(String paramString)
    {
      this.hasReturnPhone = true;
      this.returnPhone_ = paramString;
      return this;
    }
    
    public CarRentalEntry setReturnTime(Sidekick.TimeWithZone paramTimeWithZone)
    {
      if (paramTimeWithZone == null) {
        throw new NullPointerException();
      }
      this.hasReturnTime = true;
      this.returnTime_ = paramTimeWithZone;
      return this;
    }
    
    public CarRentalEntry setRoute(Sidekick.CommuteSummary paramCommuteSummary)
    {
      if (paramCommuteSummary == null) {
        throw new NullPointerException();
      }
      this.hasRoute = true;
      this.route_ = paramCommuteSummary;
      return this;
    }
    
    public CarRentalEntry setSubtitle(String paramString)
    {
      this.hasSubtitle = true;
      this.subtitle_ = paramString;
      return this;
    }
    
    public CarRentalEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public CarRentalEntry setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasSubtitle()) {
        paramCodedOutputStreamMicro.writeString(2, getSubtitle());
      }
      if (hasRenterName()) {
        paramCodedOutputStreamMicro.writeString(3, getRenterName());
      }
      if (hasConfirmationNumber()) {
        paramCodedOutputStreamMicro.writeString(4, getConfirmationNumber());
      }
      if (hasPickupTime()) {
        paramCodedOutputStreamMicro.writeMessage(5, getPickupTime());
      }
      if (hasPickupLocation()) {
        paramCodedOutputStreamMicro.writeMessage(6, getPickupLocation());
      }
      if (hasPickupPhone()) {
        paramCodedOutputStreamMicro.writeString(8, getPickupPhone());
      }
      if (hasReturnTime()) {
        paramCodedOutputStreamMicro.writeMessage(9, getReturnTime());
      }
      if (hasReturnLocation()) {
        paramCodedOutputStreamMicro.writeMessage(10, getReturnLocation());
      }
      if (hasReturnPhone()) {
        paramCodedOutputStreamMicro.writeString(12, getReturnPhone());
      }
      if (hasGmailReference()) {
        paramCodedOutputStreamMicro.writeMessage(13, getGmailReference());
      }
      if (hasDepartureTimeMs()) {
        paramCodedOutputStreamMicro.writeInt64(14, getDepartureTimeMs());
      }
      if (hasRoute()) {
        paramCodedOutputStreamMicro.writeMessage(15, getRoute());
      }
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(16, getType());
      }
      if (hasManageReservationUrl()) {
        paramCodedOutputStreamMicro.writeString(17, getManageReservationUrl());
      }
      if (hasProviderName()) {
        paramCodedOutputStreamMicro.writeString(18, getProviderName());
      }
    }
  }
  
  public static final class CastMember
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String character_ = "";
    private Sidekick.ClickAction clickAction_ = null;
    private boolean hasCharacter;
    private boolean hasClickAction;
    private boolean hasName;
    private boolean hasPhoto;
    private boolean hasPhotoDestination;
    private String name_ = "";
    private Sidekick.Destination photoDestination_ = null;
    private Sidekick.Photo photo_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getCharacter()
    {
      return this.character_;
    }
    
    public Sidekick.ClickAction getClickAction()
    {
      return this.clickAction_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public Sidekick.Photo getPhoto()
    {
      return this.photo_;
    }
    
    public Sidekick.Destination getPhotoDestination()
    {
      return this.photoDestination_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
      }
      if (hasCharacter()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getCharacter());
      }
      if (hasPhoto()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getPhoto());
      }
      if (hasPhotoDestination()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getPhotoDestination());
      }
      if (hasClickAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, getClickAction());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasCharacter()
    {
      return this.hasCharacter;
    }
    
    public boolean hasClickAction()
    {
      return this.hasClickAction;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasPhoto()
    {
      return this.hasPhoto;
    }
    
    public boolean hasPhotoDestination()
    {
      return this.hasPhotoDestination;
    }
    
    public CastMember mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setCharacter(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setPhoto(localPhoto);
          break;
        case 42: 
          Sidekick.Destination localDestination = new Sidekick.Destination();
          paramCodedInputStreamMicro.readMessage(localDestination);
          setPhotoDestination(localDestination);
          break;
        }
        Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
        paramCodedInputStreamMicro.readMessage(localClickAction);
        setClickAction(localClickAction);
      }
    }
    
    public CastMember setCharacter(String paramString)
    {
      this.hasCharacter = true;
      this.character_ = paramString;
      return this;
    }
    
    public CastMember setClickAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasClickAction = true;
      this.clickAction_ = paramClickAction;
      return this;
    }
    
    public CastMember setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public CastMember setPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasPhoto = true;
      this.photo_ = paramPhoto;
      return this;
    }
    
    public CastMember setPhotoDestination(Sidekick.Destination paramDestination)
    {
      if (paramDestination == null) {
        throw new NullPointerException();
      }
      this.hasPhotoDestination = true;
      this.photoDestination_ = paramDestination;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(1, getName());
      }
      if (hasCharacter()) {
        paramCodedOutputStreamMicro.writeString(3, getCharacter());
      }
      if (hasPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(4, getPhoto());
      }
      if (hasPhotoDestination()) {
        paramCodedOutputStreamMicro.writeMessage(5, getPhotoDestination());
      }
      if (hasClickAction()) {
        paramCodedOutputStreamMicro.writeMessage(6, getClickAction());
      }
    }
  }
  
  public static final class Chain
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.ChainId chainId_ = null;
    private String displayName_ = "";
    private boolean hasChainId;
    private boolean hasDisplayName;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ChainId getChainId()
    {
      return this.chainId_;
    }
    
    public String getDisplayName()
    {
      return this.displayName_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasChainId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getChainId());
      }
      if (hasDisplayName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getDisplayName());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasChainId()
    {
      return this.hasChainId;
    }
    
    public boolean hasDisplayName()
    {
      return this.hasDisplayName;
    }
    
    public Chain mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.ChainId localChainId = new Sidekick.ChainId();
          paramCodedInputStreamMicro.readMessage(localChainId);
          setChainId(localChainId);
          break;
        }
        setDisplayName(paramCodedInputStreamMicro.readString());
      }
    }
    
    public Chain setChainId(Sidekick.ChainId paramChainId)
    {
      if (paramChainId == null) {
        throw new NullPointerException();
      }
      this.hasChainId = true;
      this.chainId_ = paramChainId;
      return this;
    }
    
    public Chain setDisplayName(String paramString)
    {
      this.hasDisplayName = true;
      this.displayName_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasChainId()) {
        paramCodedOutputStreamMicro.writeMessage(1, getChainId());
      }
      if (hasDisplayName()) {
        paramCodedOutputStreamMicro.writeString(2, getDisplayName());
      }
    }
  }
  
  public static final class ChainId
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.GeostoreFeatureId featureId_ = null;
    private boolean hasFeatureId;
    private boolean hasProminentEntityId;
    private boolean hasSitechunk;
    private String prominentEntityId_ = "";
    private String sitechunk_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.GeostoreFeatureId getFeatureId()
    {
      return this.featureId_;
    }
    
    public String getProminentEntityId()
    {
      return this.prominentEntityId_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasProminentEntityId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getProminentEntityId());
      }
      if (hasSitechunk()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSitechunk());
      }
      if (hasFeatureId()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getFeatureId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSitechunk()
    {
      return this.sitechunk_;
    }
    
    public boolean hasFeatureId()
    {
      return this.hasFeatureId;
    }
    
    public boolean hasProminentEntityId()
    {
      return this.hasProminentEntityId;
    }
    
    public boolean hasSitechunk()
    {
      return this.hasSitechunk;
    }
    
    public ChainId mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setProminentEntityId(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSitechunk(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.GeostoreFeatureId localGeostoreFeatureId = new Sidekick.GeostoreFeatureId();
        paramCodedInputStreamMicro.readMessage(localGeostoreFeatureId);
        setFeatureId(localGeostoreFeatureId);
      }
    }
    
    public ChainId setFeatureId(Sidekick.GeostoreFeatureId paramGeostoreFeatureId)
    {
      if (paramGeostoreFeatureId == null) {
        throw new NullPointerException();
      }
      this.hasFeatureId = true;
      this.featureId_ = paramGeostoreFeatureId;
      return this;
    }
    
    public ChainId setProminentEntityId(String paramString)
    {
      this.hasProminentEntityId = true;
      this.prominentEntityId_ = paramString;
      return this;
    }
    
    public ChainId setSitechunk(String paramString)
    {
      this.hasSitechunk = true;
      this.sitechunk_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasProminentEntityId()) {
        paramCodedOutputStreamMicro.writeString(1, getProminentEntityId());
      }
      if (hasSitechunk()) {
        paramCodedOutputStreamMicro.writeString(2, getSitechunk());
      }
      if (hasFeatureId()) {
        paramCodedOutputStreamMicro.writeMessage(3, getFeatureId());
      }
    }
  }
  
  public static final class ClickAction
    extends MessageMicro
  {
    private String action_ = "";
    private int cachedSize = -1;
    private ByteStringMicro encodedServerPayload_ = ByteStringMicro.EMPTY;
    private List<Extra> extra_ = Collections.emptyList();
    private boolean hasAction;
    private boolean hasEncodedServerPayload;
    private boolean hasIconType;
    private boolean hasLabel;
    private boolean hasLatitudeOptInAction;
    private boolean hasPreferredApp;
    private boolean hasSearchQuery;
    private boolean hasUri;
    private int iconType_ = 1;
    private String label_ = "";
    private boolean latitudeOptInAction_ = false;
    private String preferredApp_ = "";
    private String searchQuery_ = "";
    private String uri_ = "";
    
    public ClickAction addExtra(Extra paramExtra)
    {
      if (paramExtra == null) {
        throw new NullPointerException();
      }
      if (this.extra_.isEmpty()) {
        this.extra_ = new ArrayList();
      }
      this.extra_.add(paramExtra);
      return this;
    }
    
    public String getAction()
    {
      return this.action_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public ByteStringMicro getEncodedServerPayload()
    {
      return this.encodedServerPayload_;
    }
    
    public int getExtraCount()
    {
      return this.extra_.size();
    }
    
    public List<Extra> getExtraList()
    {
      return this.extra_;
    }
    
    public int getIconType()
    {
      return this.iconType_;
    }
    
    public String getLabel()
    {
      return this.label_;
    }
    
    public boolean getLatitudeOptInAction()
    {
      return this.latitudeOptInAction_;
    }
    
    public String getPreferredApp()
    {
      return this.preferredApp_;
    }
    
    public String getSearchQuery()
    {
      return this.searchQuery_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLabel();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getLabel());
      }
      if (hasUri()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getUri());
      }
      Iterator localIterator = getExtraList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Extra)localIterator.next());
      }
      if (hasAction()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getAction());
      }
      if (hasLatitudeOptInAction()) {
        i += CodedOutputStreamMicro.computeBoolSize(6, getLatitudeOptInAction());
      }
      if (hasIconType()) {
        i += CodedOutputStreamMicro.computeInt32Size(7, getIconType());
      }
      if (hasEncodedServerPayload()) {
        i += CodedOutputStreamMicro.computeBytesSize(8, getEncodedServerPayload());
      }
      if (hasSearchQuery()) {
        i += CodedOutputStreamMicro.computeStringSize(9, getSearchQuery());
      }
      if (hasPreferredApp()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getPreferredApp());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getUri()
    {
      return this.uri_;
    }
    
    public boolean hasAction()
    {
      return this.hasAction;
    }
    
    public boolean hasEncodedServerPayload()
    {
      return this.hasEncodedServerPayload;
    }
    
    public boolean hasIconType()
    {
      return this.hasIconType;
    }
    
    public boolean hasLabel()
    {
      return this.hasLabel;
    }
    
    public boolean hasLatitudeOptInAction()
    {
      return this.hasLatitudeOptInAction;
    }
    
    public boolean hasPreferredApp()
    {
      return this.hasPreferredApp;
    }
    
    public boolean hasSearchQuery()
    {
      return this.hasSearchQuery;
    }
    
    public boolean hasUri()
    {
      return this.hasUri;
    }
    
    public ClickAction mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setLabel(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setUri(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Extra localExtra = new Extra();
          paramCodedInputStreamMicro.readMessage(localExtra);
          addExtra(localExtra);
          break;
        case 42: 
          setAction(paramCodedInputStreamMicro.readString());
          break;
        case 48: 
          setLatitudeOptInAction(paramCodedInputStreamMicro.readBool());
          break;
        case 56: 
          setIconType(paramCodedInputStreamMicro.readInt32());
          break;
        case 66: 
          setEncodedServerPayload(paramCodedInputStreamMicro.readBytes());
          break;
        case 74: 
          setSearchQuery(paramCodedInputStreamMicro.readString());
          break;
        }
        setPreferredApp(paramCodedInputStreamMicro.readString());
      }
    }
    
    public ClickAction setAction(String paramString)
    {
      this.hasAction = true;
      this.action_ = paramString;
      return this;
    }
    
    public ClickAction setEncodedServerPayload(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedServerPayload = true;
      this.encodedServerPayload_ = paramByteStringMicro;
      return this;
    }
    
    public ClickAction setIconType(int paramInt)
    {
      this.hasIconType = true;
      this.iconType_ = paramInt;
      return this;
    }
    
    public ClickAction setLabel(String paramString)
    {
      this.hasLabel = true;
      this.label_ = paramString;
      return this;
    }
    
    public ClickAction setLatitudeOptInAction(boolean paramBoolean)
    {
      this.hasLatitudeOptInAction = true;
      this.latitudeOptInAction_ = paramBoolean;
      return this;
    }
    
    public ClickAction setPreferredApp(String paramString)
    {
      this.hasPreferredApp = true;
      this.preferredApp_ = paramString;
      return this;
    }
    
    public ClickAction setSearchQuery(String paramString)
    {
      this.hasSearchQuery = true;
      this.searchQuery_ = paramString;
      return this;
    }
    
    public ClickAction setUri(String paramString)
    {
      this.hasUri = true;
      this.uri_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLabel()) {
        paramCodedOutputStreamMicro.writeString(1, getLabel());
      }
      if (hasUri()) {
        paramCodedOutputStreamMicro.writeString(2, getUri());
      }
      Iterator localIterator = getExtraList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Extra)localIterator.next());
      }
      if (hasAction()) {
        paramCodedOutputStreamMicro.writeString(5, getAction());
      }
      if (hasLatitudeOptInAction()) {
        paramCodedOutputStreamMicro.writeBool(6, getLatitudeOptInAction());
      }
      if (hasIconType()) {
        paramCodedOutputStreamMicro.writeInt32(7, getIconType());
      }
      if (hasEncodedServerPayload()) {
        paramCodedOutputStreamMicro.writeBytes(8, getEncodedServerPayload());
      }
      if (hasSearchQuery()) {
        paramCodedOutputStreamMicro.writeString(9, getSearchQuery());
      }
      if (hasPreferredApp()) {
        paramCodedOutputStreamMicro.writeString(10, getPreferredApp());
      }
    }
    
    public static final class Extra
      extends MessageMicro
    {
      private boolean boolValue_ = false;
      private int cachedSize = -1;
      private Sidekick.GmailReference gmailReference_ = null;
      private boolean hasBoolValue;
      private boolean hasGmailReference;
      private boolean hasKey;
      private boolean hasLongValue;
      private boolean hasStringValue;
      private String key_ = "";
      private long longValue_ = 0L;
      private String stringValue_ = "";
      
      public boolean getBoolValue()
      {
        return this.boolValue_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.GmailReference getGmailReference()
      {
        return this.gmailReference_;
      }
      
      public String getKey()
      {
        return this.key_;
      }
      
      public long getLongValue()
      {
        return this.longValue_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasKey();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getKey());
        }
        if (hasStringValue()) {
          i += CodedOutputStreamMicro.computeStringSize(2, getStringValue());
        }
        if (hasLongValue()) {
          i += CodedOutputStreamMicro.computeInt64Size(3, getLongValue());
        }
        if (hasBoolValue()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getBoolValue());
        }
        if (hasGmailReference()) {
          i += CodedOutputStreamMicro.computeMessageSize(5, getGmailReference());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getStringValue()
      {
        return this.stringValue_;
      }
      
      public boolean hasBoolValue()
      {
        return this.hasBoolValue;
      }
      
      public boolean hasGmailReference()
      {
        return this.hasGmailReference;
      }
      
      public boolean hasKey()
      {
        return this.hasKey;
      }
      
      public boolean hasLongValue()
      {
        return this.hasLongValue;
      }
      
      public boolean hasStringValue()
      {
        return this.hasStringValue;
      }
      
      public Extra mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setKey(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            setStringValue(paramCodedInputStreamMicro.readString());
            break;
          case 24: 
            setLongValue(paramCodedInputStreamMicro.readInt64());
            break;
          case 32: 
            setBoolValue(paramCodedInputStreamMicro.readBool());
            break;
          }
          Sidekick.GmailReference localGmailReference = new Sidekick.GmailReference();
          paramCodedInputStreamMicro.readMessage(localGmailReference);
          setGmailReference(localGmailReference);
        }
      }
      
      public Extra setBoolValue(boolean paramBoolean)
      {
        this.hasBoolValue = true;
        this.boolValue_ = paramBoolean;
        return this;
      }
      
      public Extra setGmailReference(Sidekick.GmailReference paramGmailReference)
      {
        if (paramGmailReference == null) {
          throw new NullPointerException();
        }
        this.hasGmailReference = true;
        this.gmailReference_ = paramGmailReference;
        return this;
      }
      
      public Extra setKey(String paramString)
      {
        this.hasKey = true;
        this.key_ = paramString;
        return this;
      }
      
      public Extra setLongValue(long paramLong)
      {
        this.hasLongValue = true;
        this.longValue_ = paramLong;
        return this;
      }
      
      public Extra setStringValue(String paramString)
      {
        this.hasStringValue = true;
        this.stringValue_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasKey()) {
          paramCodedOutputStreamMicro.writeString(1, getKey());
        }
        if (hasStringValue()) {
          paramCodedOutputStreamMicro.writeString(2, getStringValue());
        }
        if (hasLongValue()) {
          paramCodedOutputStreamMicro.writeInt64(3, getLongValue());
        }
        if (hasBoolValue()) {
          paramCodedOutputStreamMicro.writeBool(4, getBoolValue());
        }
        if (hasGmailReference()) {
          paramCodedOutputStreamMicro.writeMessage(5, getGmailReference());
        }
      }
    }
  }
  
  public static final class ClientDescription
    extends MessageMicro
  {
    private Sidekick.AndroidClientDescription androidClientDescription_ = null;
    private int cachedSize = -1;
    private Sidekick.Device device_ = null;
    private boolean hasAndroidClientDescription;
    private boolean hasDevice;
    private boolean hasNetworkConnectionType;
    private boolean hasOsType;
    private boolean hasOsVersion;
    private boolean hasSessionId;
    private boolean hasSessionIdExpirationSeconds;
    private boolean hasSidekickAppVersion;
    private boolean hasUserClientId;
    private int networkConnectionType_ = 0;
    private int osType_ = 0;
    private String osVersion_ = "";
    private long sessionIdExpirationSeconds_ = 0L;
    private String sessionId_ = "";
    private String sidekickAppVersion_ = "";
    private long userClientId_ = 0L;
    
    public Sidekick.AndroidClientDescription getAndroidClientDescription()
    {
      return this.androidClientDescription_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Device getDevice()
    {
      return this.device_;
    }
    
    public int getNetworkConnectionType()
    {
      return this.networkConnectionType_;
    }
    
    public int getOsType()
    {
      return this.osType_;
    }
    
    public String getOsVersion()
    {
      return this.osVersion_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasOsType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getOsType());
      }
      if (hasOsVersion()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getOsVersion());
      }
      if (hasSidekickAppVersion()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getSidekickAppVersion());
      }
      if (hasSessionId()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getSessionId());
      }
      if (hasSessionIdExpirationSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(5, getSessionIdExpirationSeconds());
      }
      if (hasAndroidClientDescription()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, getAndroidClientDescription());
      }
      if (hasUserClientId()) {
        i += CodedOutputStreamMicro.computeInt64Size(7, getUserClientId());
      }
      if (hasNetworkConnectionType()) {
        i += CodedOutputStreamMicro.computeInt32Size(8, getNetworkConnectionType());
      }
      if (hasDevice()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getDevice());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSessionId()
    {
      return this.sessionId_;
    }
    
    public long getSessionIdExpirationSeconds()
    {
      return this.sessionIdExpirationSeconds_;
    }
    
    public String getSidekickAppVersion()
    {
      return this.sidekickAppVersion_;
    }
    
    public long getUserClientId()
    {
      return this.userClientId_;
    }
    
    public boolean hasAndroidClientDescription()
    {
      return this.hasAndroidClientDescription;
    }
    
    public boolean hasDevice()
    {
      return this.hasDevice;
    }
    
    public boolean hasNetworkConnectionType()
    {
      return this.hasNetworkConnectionType;
    }
    
    public boolean hasOsType()
    {
      return this.hasOsType;
    }
    
    public boolean hasOsVersion()
    {
      return this.hasOsVersion;
    }
    
    public boolean hasSessionId()
    {
      return this.hasSessionId;
    }
    
    public boolean hasSessionIdExpirationSeconds()
    {
      return this.hasSessionIdExpirationSeconds;
    }
    
    public boolean hasSidekickAppVersion()
    {
      return this.hasSidekickAppVersion;
    }
    
    public boolean hasUserClientId()
    {
      return this.hasUserClientId;
    }
    
    public ClientDescription mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setOsType(paramCodedInputStreamMicro.readInt32());
          break;
        case 18: 
          setOsVersion(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setSidekickAppVersion(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setSessionId(paramCodedInputStreamMicro.readString());
          break;
        case 40: 
          setSessionIdExpirationSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 50: 
          Sidekick.AndroidClientDescription localAndroidClientDescription = new Sidekick.AndroidClientDescription();
          paramCodedInputStreamMicro.readMessage(localAndroidClientDescription);
          setAndroidClientDescription(localAndroidClientDescription);
          break;
        case 56: 
          setUserClientId(paramCodedInputStreamMicro.readInt64());
          break;
        case 64: 
          setNetworkConnectionType(paramCodedInputStreamMicro.readInt32());
          break;
        }
        Sidekick.Device localDevice = new Sidekick.Device();
        paramCodedInputStreamMicro.readMessage(localDevice);
        setDevice(localDevice);
      }
    }
    
    public ClientDescription setAndroidClientDescription(Sidekick.AndroidClientDescription paramAndroidClientDescription)
    {
      if (paramAndroidClientDescription == null) {
        throw new NullPointerException();
      }
      this.hasAndroidClientDescription = true;
      this.androidClientDescription_ = paramAndroidClientDescription;
      return this;
    }
    
    public ClientDescription setDevice(Sidekick.Device paramDevice)
    {
      if (paramDevice == null) {
        throw new NullPointerException();
      }
      this.hasDevice = true;
      this.device_ = paramDevice;
      return this;
    }
    
    public ClientDescription setNetworkConnectionType(int paramInt)
    {
      this.hasNetworkConnectionType = true;
      this.networkConnectionType_ = paramInt;
      return this;
    }
    
    public ClientDescription setOsType(int paramInt)
    {
      this.hasOsType = true;
      this.osType_ = paramInt;
      return this;
    }
    
    public ClientDescription setOsVersion(String paramString)
    {
      this.hasOsVersion = true;
      this.osVersion_ = paramString;
      return this;
    }
    
    public ClientDescription setSessionId(String paramString)
    {
      this.hasSessionId = true;
      this.sessionId_ = paramString;
      return this;
    }
    
    public ClientDescription setSessionIdExpirationSeconds(long paramLong)
    {
      this.hasSessionIdExpirationSeconds = true;
      this.sessionIdExpirationSeconds_ = paramLong;
      return this;
    }
    
    public ClientDescription setSidekickAppVersion(String paramString)
    {
      this.hasSidekickAppVersion = true;
      this.sidekickAppVersion_ = paramString;
      return this;
    }
    
    public ClientDescription setUserClientId(long paramLong)
    {
      this.hasUserClientId = true;
      this.userClientId_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasOsType()) {
        paramCodedOutputStreamMicro.writeInt32(1, getOsType());
      }
      if (hasOsVersion()) {
        paramCodedOutputStreamMicro.writeString(2, getOsVersion());
      }
      if (hasSidekickAppVersion()) {
        paramCodedOutputStreamMicro.writeString(3, getSidekickAppVersion());
      }
      if (hasSessionId()) {
        paramCodedOutputStreamMicro.writeString(4, getSessionId());
      }
      if (hasSessionIdExpirationSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(5, getSessionIdExpirationSeconds());
      }
      if (hasAndroidClientDescription()) {
        paramCodedOutputStreamMicro.writeMessage(6, getAndroidClientDescription());
      }
      if (hasUserClientId()) {
        paramCodedOutputStreamMicro.writeInt64(7, getUserClientId());
      }
      if (hasNetworkConnectionType()) {
        paramCodedOutputStreamMicro.writeInt32(8, getNetworkConnectionType());
      }
      if (hasDevice()) {
        paramCodedOutputStreamMicro.writeMessage(9, getDevice());
      }
    }
  }
  
  public static final class ClientLatency
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int deserializationLatencyMs_ = 0;
    private ByteStringMicro encodedEventId_ = ByteStringMicro.EMPTY;
    private boolean hasDeserializationLatencyMs;
    private boolean hasEncodedEventId;
    private boolean hasTotalNetworkLatencyMs;
    private int totalNetworkLatencyMs_ = 0;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getDeserializationLatencyMs()
    {
      return this.deserializationLatencyMs_;
    }
    
    public ByteStringMicro getEncodedEventId()
    {
      return this.encodedEventId_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasEncodedEventId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeBytesSize(1, getEncodedEventId());
      }
      if (hasTotalNetworkLatencyMs()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getTotalNetworkLatencyMs());
      }
      if (hasDeserializationLatencyMs()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getDeserializationLatencyMs());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getTotalNetworkLatencyMs()
    {
      return this.totalNetworkLatencyMs_;
    }
    
    public boolean hasDeserializationLatencyMs()
    {
      return this.hasDeserializationLatencyMs;
    }
    
    public boolean hasEncodedEventId()
    {
      return this.hasEncodedEventId;
    }
    
    public boolean hasTotalNetworkLatencyMs()
    {
      return this.hasTotalNetworkLatencyMs;
    }
    
    public ClientLatency mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setEncodedEventId(paramCodedInputStreamMicro.readBytes());
          break;
        case 16: 
          setTotalNetworkLatencyMs(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setDeserializationLatencyMs(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public ClientLatency setDeserializationLatencyMs(int paramInt)
    {
      this.hasDeserializationLatencyMs = true;
      this.deserializationLatencyMs_ = paramInt;
      return this;
    }
    
    public ClientLatency setEncodedEventId(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedEventId = true;
      this.encodedEventId_ = paramByteStringMicro;
      return this;
    }
    
    public ClientLatency setTotalNetworkLatencyMs(int paramInt)
    {
      this.hasTotalNetworkLatencyMs = true;
      this.totalNetworkLatencyMs_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasEncodedEventId()) {
        paramCodedOutputStreamMicro.writeBytes(1, getEncodedEventId());
      }
      if (hasTotalNetworkLatencyMs()) {
        paramCodedOutputStreamMicro.writeInt32(2, getTotalNetworkLatencyMs());
      }
      if (hasDeserializationLatencyMs()) {
        paramCodedOutputStreamMicro.writeInt32(3, getDeserializationLatencyMs());
      }
    }
  }
  
  public static final class ClientUserData
    extends MessageMicro
  {
    private int backgroundPollingIntervalSeconds_ = 0;
    private int cachedSize = -1;
    private List<Sidekick.UploadCalendarData> calendarData_ = Collections.emptyList();
    private List<Sidekick.DetectedDevice> detectedDevice_ = Collections.emptyList();
    private boolean gettingCalendarEventsFailed_ = false;
    private boolean hasBackgroundPollingIntervalSeconds;
    private boolean hasGettingCalendarEventsFailed;
    private boolean hasLowUsageUser;
    private boolean hasSidekickConfigurationHashId;
    private boolean lowUsageUser_ = false;
    private List<Sidekick.MinimumDataVersion> minimumDataVersion_ = Collections.emptyList();
    private String sidekickConfigurationHashId_ = "";
    
    public ClientUserData addCalendarData(Sidekick.UploadCalendarData paramUploadCalendarData)
    {
      if (paramUploadCalendarData == null) {
        throw new NullPointerException();
      }
      if (this.calendarData_.isEmpty()) {
        this.calendarData_ = new ArrayList();
      }
      this.calendarData_.add(paramUploadCalendarData);
      return this;
    }
    
    public ClientUserData addDetectedDevice(Sidekick.DetectedDevice paramDetectedDevice)
    {
      if (paramDetectedDevice == null) {
        throw new NullPointerException();
      }
      if (this.detectedDevice_.isEmpty()) {
        this.detectedDevice_ = new ArrayList();
      }
      this.detectedDevice_.add(paramDetectedDevice);
      return this;
    }
    
    public ClientUserData addMinimumDataVersion(Sidekick.MinimumDataVersion paramMinimumDataVersion)
    {
      if (paramMinimumDataVersion == null) {
        throw new NullPointerException();
      }
      if (this.minimumDataVersion_.isEmpty()) {
        this.minimumDataVersion_ = new ArrayList();
      }
      this.minimumDataVersion_.add(paramMinimumDataVersion);
      return this;
    }
    
    public int getBackgroundPollingIntervalSeconds()
    {
      return this.backgroundPollingIntervalSeconds_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public List<Sidekick.UploadCalendarData> getCalendarDataList()
    {
      return this.calendarData_;
    }
    
    public List<Sidekick.DetectedDevice> getDetectedDeviceList()
    {
      return this.detectedDevice_;
    }
    
    public boolean getGettingCalendarEventsFailed()
    {
      return this.gettingCalendarEventsFailed_;
    }
    
    public boolean getLowUsageUser()
    {
      return this.lowUsageUser_;
    }
    
    public List<Sidekick.MinimumDataVersion> getMinimumDataVersionList()
    {
      return this.minimumDataVersion_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator1 = getCalendarDataList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.UploadCalendarData)localIterator1.next());
      }
      if (hasSidekickConfigurationHashId()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSidekickConfigurationHashId());
      }
      Iterator localIterator2 = getMinimumDataVersionList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.MinimumDataVersion)localIterator2.next());
      }
      Iterator localIterator3 = getDetectedDeviceList().iterator();
      while (localIterator3.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, (Sidekick.DetectedDevice)localIterator3.next());
      }
      if (hasLowUsageUser()) {
        i += CodedOutputStreamMicro.computeBoolSize(5, getLowUsageUser());
      }
      if (hasBackgroundPollingIntervalSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(6, getBackgroundPollingIntervalSeconds());
      }
      if (hasGettingCalendarEventsFailed()) {
        i += CodedOutputStreamMicro.computeBoolSize(7, getGettingCalendarEventsFailed());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSidekickConfigurationHashId()
    {
      return this.sidekickConfigurationHashId_;
    }
    
    public boolean hasBackgroundPollingIntervalSeconds()
    {
      return this.hasBackgroundPollingIntervalSeconds;
    }
    
    public boolean hasGettingCalendarEventsFailed()
    {
      return this.hasGettingCalendarEventsFailed;
    }
    
    public boolean hasLowUsageUser()
    {
      return this.hasLowUsageUser;
    }
    
    public boolean hasSidekickConfigurationHashId()
    {
      return this.hasSidekickConfigurationHashId;
    }
    
    public ClientUserData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.UploadCalendarData localUploadCalendarData = new Sidekick.UploadCalendarData();
          paramCodedInputStreamMicro.readMessage(localUploadCalendarData);
          addCalendarData(localUploadCalendarData);
          break;
        case 18: 
          setSidekickConfigurationHashId(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.MinimumDataVersion localMinimumDataVersion = new Sidekick.MinimumDataVersion();
          paramCodedInputStreamMicro.readMessage(localMinimumDataVersion);
          addMinimumDataVersion(localMinimumDataVersion);
          break;
        case 34: 
          Sidekick.DetectedDevice localDetectedDevice = new Sidekick.DetectedDevice();
          paramCodedInputStreamMicro.readMessage(localDetectedDevice);
          addDetectedDevice(localDetectedDevice);
          break;
        case 40: 
          setLowUsageUser(paramCodedInputStreamMicro.readBool());
          break;
        case 48: 
          setBackgroundPollingIntervalSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setGettingCalendarEventsFailed(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public ClientUserData setBackgroundPollingIntervalSeconds(int paramInt)
    {
      this.hasBackgroundPollingIntervalSeconds = true;
      this.backgroundPollingIntervalSeconds_ = paramInt;
      return this;
    }
    
    public ClientUserData setGettingCalendarEventsFailed(boolean paramBoolean)
    {
      this.hasGettingCalendarEventsFailed = true;
      this.gettingCalendarEventsFailed_ = paramBoolean;
      return this;
    }
    
    public ClientUserData setLowUsageUser(boolean paramBoolean)
    {
      this.hasLowUsageUser = true;
      this.lowUsageUser_ = paramBoolean;
      return this;
    }
    
    public ClientUserData setSidekickConfigurationHashId(String paramString)
    {
      this.hasSidekickConfigurationHashId = true;
      this.sidekickConfigurationHashId_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator1 = getCalendarDataList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.UploadCalendarData)localIterator1.next());
      }
      if (hasSidekickConfigurationHashId()) {
        paramCodedOutputStreamMicro.writeString(2, getSidekickConfigurationHashId());
      }
      Iterator localIterator2 = getMinimumDataVersionList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.MinimumDataVersion)localIterator2.next());
      }
      Iterator localIterator3 = getDetectedDeviceList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(4, (Sidekick.DetectedDevice)localIterator3.next());
      }
      if (hasLowUsageUser()) {
        paramCodedOutputStreamMicro.writeBool(5, getLowUsageUser());
      }
      if (hasBackgroundPollingIntervalSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(6, getBackgroundPollingIntervalSeconds());
      }
      if (hasGettingCalendarEventsFailed()) {
        paramCodedOutputStreamMicro.writeBool(7, getGettingCalendarEventsFailed());
      }
    }
  }
  
  public static final class ClockEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasTitle;
    private List<TimeZone> timeZone_ = Collections.emptyList();
    private String title_ = "";
    
    public ClockEntry addTimeZone(TimeZone paramTimeZone)
    {
      if (paramTimeZone == null) {
        throw new NullPointerException();
      }
      if (this.timeZone_.isEmpty()) {
        this.timeZone_ = new ArrayList();
      }
      this.timeZone_.add(paramTimeZone);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      Iterator localIterator = getTimeZoneList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (TimeZone)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public TimeZone getTimeZone(int paramInt)
    {
      return (TimeZone)this.timeZone_.get(paramInt);
    }
    
    public int getTimeZoneCount()
    {
      return this.timeZone_.size();
    }
    
    public List<TimeZone> getTimeZoneList()
    {
      return this.timeZone_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public ClockEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        }
        TimeZone localTimeZone = new TimeZone();
        paramCodedInputStreamMicro.readMessage(localTimeZone);
        addTimeZone(localTimeZone);
      }
    }
    
    public ClockEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      Iterator localIterator = getTimeZoneList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (TimeZone)localIterator.next());
      }
    }
    
    public static final class TimeZone
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasOffsetSeconds;
      private boolean hasZoneName;
      private int offsetSeconds_ = 0;
      private String zoneName_ = "";
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getOffsetSeconds()
      {
        return this.offsetSeconds_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasZoneName();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getZoneName());
        }
        if (hasOffsetSeconds()) {
          i += CodedOutputStreamMicro.computeSInt32Size(2, getOffsetSeconds());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getZoneName()
      {
        return this.zoneName_;
      }
      
      public boolean hasOffsetSeconds()
      {
        return this.hasOffsetSeconds;
      }
      
      public boolean hasZoneName()
      {
        return this.hasZoneName;
      }
      
      public TimeZone mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setZoneName(paramCodedInputStreamMicro.readString());
            break;
          }
          setOffsetSeconds(paramCodedInputStreamMicro.readSInt32());
        }
      }
      
      public TimeZone setOffsetSeconds(int paramInt)
      {
        this.hasOffsetSeconds = true;
        this.offsetSeconds_ = paramInt;
        return this;
      }
      
      public TimeZone setZoneName(String paramString)
      {
        this.hasZoneName = true;
        this.zoneName_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasZoneName()) {
          paramCodedOutputStreamMicro.writeString(1, getZoneName());
        }
        if (hasOffsetSeconds()) {
          paramCodedOutputStreamMicro.writeSInt32(2, getOffsetSeconds());
        }
      }
    }
  }
  
  public static final class CommuteSummary
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int distanceInMeters_ = 0;
    private boolean hasDistanceInMeters;
    private boolean hasHistoricalTrafficDelayInMinutes;
    private boolean hasMultipleTrafficIncidents;
    private boolean hasRouteSummary;
    private boolean hasShowNavigation;
    private boolean hasTrafficDelayInMinutes;
    private boolean hasTrafficStatus;
    private boolean hasTransitDetails;
    private boolean hasTravelMode;
    private boolean hasTravelModeSetting;
    private boolean hasTravelTimeWithoutDelayInMinutes;
    private int historicalTrafficDelayInMinutes_ = 0;
    private String multipleTrafficIncidents_ = "";
    private List<Sidekick.Location> pathfinderWaypoint_ = Collections.emptyList();
    private String routeSummary_ = "";
    private boolean showNavigation_ = true;
    private int trafficDelayInMinutes_ = 0;
    private List<Sidekick.TrafficIncident> trafficIncident_ = Collections.emptyList();
    private int trafficStatus_ = 4;
    private TransitDetails transitDetails_ = null;
    private int travelModeSetting_ = 1;
    private int travelMode_ = 0;
    private int travelTimeWithoutDelayInMinutes_ = 0;
    private List<Sidekick.Location> waypoints_ = Collections.emptyList();
    
    public CommuteSummary addPathfinderWaypoint(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      if (this.pathfinderWaypoint_.isEmpty()) {
        this.pathfinderWaypoint_ = new ArrayList();
      }
      this.pathfinderWaypoint_.add(paramLocation);
      return this;
    }
    
    public CommuteSummary addTrafficIncident(Sidekick.TrafficIncident paramTrafficIncident)
    {
      if (paramTrafficIncident == null) {
        throw new NullPointerException();
      }
      if (this.trafficIncident_.isEmpty()) {
        this.trafficIncident_ = new ArrayList();
      }
      this.trafficIncident_.add(paramTrafficIncident);
      return this;
    }
    
    public CommuteSummary addWaypoints(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      if (this.waypoints_.isEmpty()) {
        this.waypoints_ = new ArrayList();
      }
      this.waypoints_.add(paramLocation);
      return this;
    }
    
    public CommuteSummary clearWaypoints()
    {
      this.waypoints_ = Collections.emptyList();
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getDistanceInMeters()
    {
      return this.distanceInMeters_;
    }
    
    public int getHistoricalTrafficDelayInMinutes()
    {
      return this.historicalTrafficDelayInMinutes_;
    }
    
    public String getMultipleTrafficIncidents()
    {
      return this.multipleTrafficIncidents_;
    }
    
    public int getPathfinderWaypointCount()
    {
      return this.pathfinderWaypoint_.size();
    }
    
    public List<Sidekick.Location> getPathfinderWaypointList()
    {
      return this.pathfinderWaypoint_;
    }
    
    public String getRouteSummary()
    {
      return this.routeSummary_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasRouteSummary();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getRouteSummary());
      }
      if (hasTrafficDelayInMinutes()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getTrafficDelayInMinutes());
      }
      if (hasTravelTimeWithoutDelayInMinutes()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getTravelTimeWithoutDelayInMinutes());
      }
      if (hasDistanceInMeters()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getDistanceInMeters());
      }
      if (hasTrafficStatus()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getTrafficStatus());
      }
      Iterator localIterator1 = getWaypointsList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, (Sidekick.Location)localIterator1.next());
      }
      if (hasTravelMode()) {
        i += CodedOutputStreamMicro.computeInt32Size(7, getTravelMode());
      }
      if (hasTransitDetails()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, getTransitDetails());
      }
      Iterator localIterator2 = getPathfinderWaypointList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, (Sidekick.Location)localIterator2.next());
      }
      if (hasShowNavigation()) {
        i += CodedOutputStreamMicro.computeBoolSize(10, getShowNavigation());
      }
      if (hasHistoricalTrafficDelayInMinutes()) {
        i += CodedOutputStreamMicro.computeInt32Size(11, getHistoricalTrafficDelayInMinutes());
      }
      if (hasTravelModeSetting()) {
        i += CodedOutputStreamMicro.computeInt32Size(12, getTravelModeSetting());
      }
      Iterator localIterator3 = getTrafficIncidentList().iterator();
      while (localIterator3.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(13, (Sidekick.TrafficIncident)localIterator3.next());
      }
      if (hasMultipleTrafficIncidents()) {
        i += CodedOutputStreamMicro.computeStringSize(14, getMultipleTrafficIncidents());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean getShowNavigation()
    {
      return this.showNavigation_;
    }
    
    public int getTrafficDelayInMinutes()
    {
      return this.trafficDelayInMinutes_;
    }
    
    public Sidekick.TrafficIncident getTrafficIncident(int paramInt)
    {
      return (Sidekick.TrafficIncident)this.trafficIncident_.get(paramInt);
    }
    
    public int getTrafficIncidentCount()
    {
      return this.trafficIncident_.size();
    }
    
    public List<Sidekick.TrafficIncident> getTrafficIncidentList()
    {
      return this.trafficIncident_;
    }
    
    public int getTrafficStatus()
    {
      return this.trafficStatus_;
    }
    
    public TransitDetails getTransitDetails()
    {
      return this.transitDetails_;
    }
    
    public int getTravelMode()
    {
      return this.travelMode_;
    }
    
    public int getTravelModeSetting()
    {
      return this.travelModeSetting_;
    }
    
    public int getTravelTimeWithoutDelayInMinutes()
    {
      return this.travelTimeWithoutDelayInMinutes_;
    }
    
    public int getWaypointsCount()
    {
      return this.waypoints_.size();
    }
    
    public List<Sidekick.Location> getWaypointsList()
    {
      return this.waypoints_;
    }
    
    public boolean hasDistanceInMeters()
    {
      return this.hasDistanceInMeters;
    }
    
    public boolean hasHistoricalTrafficDelayInMinutes()
    {
      return this.hasHistoricalTrafficDelayInMinutes;
    }
    
    public boolean hasMultipleTrafficIncidents()
    {
      return this.hasMultipleTrafficIncidents;
    }
    
    public boolean hasRouteSummary()
    {
      return this.hasRouteSummary;
    }
    
    public boolean hasShowNavigation()
    {
      return this.hasShowNavigation;
    }
    
    public boolean hasTrafficDelayInMinutes()
    {
      return this.hasTrafficDelayInMinutes;
    }
    
    public boolean hasTrafficStatus()
    {
      return this.hasTrafficStatus;
    }
    
    public boolean hasTransitDetails()
    {
      return this.hasTransitDetails;
    }
    
    public boolean hasTravelMode()
    {
      return this.hasTravelMode;
    }
    
    public boolean hasTravelModeSetting()
    {
      return this.hasTravelModeSetting;
    }
    
    public boolean hasTravelTimeWithoutDelayInMinutes()
    {
      return this.hasTravelTimeWithoutDelayInMinutes;
    }
    
    public CommuteSummary mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setRouteSummary(paramCodedInputStreamMicro.readString());
          break;
        case 16: 
          setTrafficDelayInMinutes(paramCodedInputStreamMicro.readInt32());
          break;
        case 24: 
          setTravelTimeWithoutDelayInMinutes(paramCodedInputStreamMicro.readInt32());
          break;
        case 32: 
          setDistanceInMeters(paramCodedInputStreamMicro.readInt32());
          break;
        case 40: 
          setTrafficStatus(paramCodedInputStreamMicro.readInt32());
          break;
        case 50: 
          Sidekick.Location localLocation2 = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation2);
          addWaypoints(localLocation2);
          break;
        case 56: 
          setTravelMode(paramCodedInputStreamMicro.readInt32());
          break;
        case 66: 
          TransitDetails localTransitDetails = new TransitDetails();
          paramCodedInputStreamMicro.readMessage(localTransitDetails);
          setTransitDetails(localTransitDetails);
          break;
        case 74: 
          Sidekick.Location localLocation1 = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation1);
          addPathfinderWaypoint(localLocation1);
          break;
        case 80: 
          setShowNavigation(paramCodedInputStreamMicro.readBool());
          break;
        case 88: 
          setHistoricalTrafficDelayInMinutes(paramCodedInputStreamMicro.readInt32());
          break;
        case 96: 
          setTravelModeSetting(paramCodedInputStreamMicro.readInt32());
          break;
        case 106: 
          Sidekick.TrafficIncident localTrafficIncident = new Sidekick.TrafficIncident();
          paramCodedInputStreamMicro.readMessage(localTrafficIncident);
          addTrafficIncident(localTrafficIncident);
          break;
        }
        setMultipleTrafficIncidents(paramCodedInputStreamMicro.readString());
      }
    }
    
    public CommuteSummary setDistanceInMeters(int paramInt)
    {
      this.hasDistanceInMeters = true;
      this.distanceInMeters_ = paramInt;
      return this;
    }
    
    public CommuteSummary setHistoricalTrafficDelayInMinutes(int paramInt)
    {
      this.hasHistoricalTrafficDelayInMinutes = true;
      this.historicalTrafficDelayInMinutes_ = paramInt;
      return this;
    }
    
    public CommuteSummary setMultipleTrafficIncidents(String paramString)
    {
      this.hasMultipleTrafficIncidents = true;
      this.multipleTrafficIncidents_ = paramString;
      return this;
    }
    
    public CommuteSummary setRouteSummary(String paramString)
    {
      this.hasRouteSummary = true;
      this.routeSummary_ = paramString;
      return this;
    }
    
    public CommuteSummary setShowNavigation(boolean paramBoolean)
    {
      this.hasShowNavigation = true;
      this.showNavigation_ = paramBoolean;
      return this;
    }
    
    public CommuteSummary setTrafficDelayInMinutes(int paramInt)
    {
      this.hasTrafficDelayInMinutes = true;
      this.trafficDelayInMinutes_ = paramInt;
      return this;
    }
    
    public CommuteSummary setTrafficStatus(int paramInt)
    {
      this.hasTrafficStatus = true;
      this.trafficStatus_ = paramInt;
      return this;
    }
    
    public CommuteSummary setTransitDetails(TransitDetails paramTransitDetails)
    {
      if (paramTransitDetails == null) {
        throw new NullPointerException();
      }
      this.hasTransitDetails = true;
      this.transitDetails_ = paramTransitDetails;
      return this;
    }
    
    public CommuteSummary setTravelMode(int paramInt)
    {
      this.hasTravelMode = true;
      this.travelMode_ = paramInt;
      return this;
    }
    
    public CommuteSummary setTravelModeSetting(int paramInt)
    {
      this.hasTravelModeSetting = true;
      this.travelModeSetting_ = paramInt;
      return this;
    }
    
    public CommuteSummary setTravelTimeWithoutDelayInMinutes(int paramInt)
    {
      this.hasTravelTimeWithoutDelayInMinutes = true;
      this.travelTimeWithoutDelayInMinutes_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasRouteSummary()) {
        paramCodedOutputStreamMicro.writeString(1, getRouteSummary());
      }
      if (hasTrafficDelayInMinutes()) {
        paramCodedOutputStreamMicro.writeInt32(2, getTrafficDelayInMinutes());
      }
      if (hasTravelTimeWithoutDelayInMinutes()) {
        paramCodedOutputStreamMicro.writeInt32(3, getTravelTimeWithoutDelayInMinutes());
      }
      if (hasDistanceInMeters()) {
        paramCodedOutputStreamMicro.writeInt32(4, getDistanceInMeters());
      }
      if (hasTrafficStatus()) {
        paramCodedOutputStreamMicro.writeInt32(5, getTrafficStatus());
      }
      Iterator localIterator1 = getWaypointsList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(6, (Sidekick.Location)localIterator1.next());
      }
      if (hasTravelMode()) {
        paramCodedOutputStreamMicro.writeInt32(7, getTravelMode());
      }
      if (hasTransitDetails()) {
        paramCodedOutputStreamMicro.writeMessage(8, getTransitDetails());
      }
      Iterator localIterator2 = getPathfinderWaypointList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(9, (Sidekick.Location)localIterator2.next());
      }
      if (hasShowNavigation()) {
        paramCodedOutputStreamMicro.writeBool(10, getShowNavigation());
      }
      if (hasHistoricalTrafficDelayInMinutes()) {
        paramCodedOutputStreamMicro.writeInt32(11, getHistoricalTrafficDelayInMinutes());
      }
      if (hasTravelModeSetting()) {
        paramCodedOutputStreamMicro.writeInt32(12, getTravelModeSetting());
      }
      Iterator localIterator3 = getTrafficIncidentList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(13, (Sidekick.TrafficIncident)localIterator3.next());
      }
      if (hasMultipleTrafficIncidents()) {
        paramCodedOutputStreamMicro.writeString(14, getMultipleTrafficIncidents());
      }
    }
    
    public static final class TransitDetails
      extends MessageMicro
    {
      private List<Alert> alert_ = Collections.emptyList();
      private long arrivalTimeSeconds_ = 0L;
      private int cachedSize = -1;
      private long departureTimeSeconds_ = 0L;
      private List<String> fare_ = Collections.emptyList();
      private boolean hasArrivalTimeSeconds;
      private boolean hasDepartureTimeSeconds;
      private boolean hasPeriodicitySeconds;
      private boolean hasPersonalizedRouteToken;
      private boolean hasStationLocation;
      private boolean hasTransitLineBackgroundColor;
      private boolean hasTransitLineForegroundColor;
      private boolean hasTransitLineIconUrl;
      private boolean hasTransitLineName;
      private boolean hasTransitMethodIconUrl;
      private boolean hasVehicleType;
      private boolean hasWalkingTimeMinutes;
      private boolean hasWalkingTimeToDestMinutes;
      private int periodicitySeconds_ = 0;
      private String personalizedRouteToken_ = "";
      private Sidekick.Location stationLocation_ = null;
      private List<Step> step_ = Collections.emptyList();
      private int transitLineBackgroundColor_ = 0;
      private int transitLineForegroundColor_ = 0;
      private String transitLineIconUrl_ = "";
      private String transitLineName_ = "";
      private String transitMethodIconUrl_ = "";
      private int vehicleType_ = 0;
      private List<Sidekick.Location> walkingPath_ = Collections.emptyList();
      private int walkingTimeMinutes_ = 0;
      private int walkingTimeToDestMinutes_ = 0;
      
      public TransitDetails addAlert(Alert paramAlert)
      {
        if (paramAlert == null) {
          throw new NullPointerException();
        }
        if (this.alert_.isEmpty()) {
          this.alert_ = new ArrayList();
        }
        this.alert_.add(paramAlert);
        return this;
      }
      
      public TransitDetails addFare(String paramString)
      {
        if (paramString == null) {
          throw new NullPointerException();
        }
        if (this.fare_.isEmpty()) {
          this.fare_ = new ArrayList();
        }
        this.fare_.add(paramString);
        return this;
      }
      
      public TransitDetails addStep(Step paramStep)
      {
        if (paramStep == null) {
          throw new NullPointerException();
        }
        if (this.step_.isEmpty()) {
          this.step_ = new ArrayList();
        }
        this.step_.add(paramStep);
        return this;
      }
      
      public TransitDetails addWalkingPath(Sidekick.Location paramLocation)
      {
        if (paramLocation == null) {
          throw new NullPointerException();
        }
        if (this.walkingPath_.isEmpty()) {
          this.walkingPath_ = new ArrayList();
        }
        this.walkingPath_.add(paramLocation);
        return this;
      }
      
      public int getAlertCount()
      {
        return this.alert_.size();
      }
      
      public List<Alert> getAlertList()
      {
        return this.alert_;
      }
      
      public long getArrivalTimeSeconds()
      {
        return this.arrivalTimeSeconds_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public long getDepartureTimeSeconds()
      {
        return this.departureTimeSeconds_;
      }
      
      public String getFare(int paramInt)
      {
        return (String)this.fare_.get(paramInt);
      }
      
      public int getFareCount()
      {
        return this.fare_.size();
      }
      
      public List<String> getFareList()
      {
        return this.fare_;
      }
      
      public int getPeriodicitySeconds()
      {
        return this.periodicitySeconds_;
      }
      
      public String getPersonalizedRouteToken()
      {
        return this.personalizedRouteToken_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasStationLocation();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getStationLocation());
        }
        if (hasWalkingTimeMinutes()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getWalkingTimeMinutes());
        }
        if (hasDepartureTimeSeconds()) {
          i += CodedOutputStreamMicro.computeInt64Size(3, getDepartureTimeSeconds());
        }
        if (hasTransitLineName()) {
          i += CodedOutputStreamMicro.computeStringSize(4, getTransitLineName());
        }
        if (hasTransitLineForegroundColor()) {
          i += CodedOutputStreamMicro.computeFixed32Size(5, getTransitLineForegroundColor());
        }
        if (hasTransitLineBackgroundColor()) {
          i += CodedOutputStreamMicro.computeFixed32Size(6, getTransitLineBackgroundColor());
        }
        if (hasTransitMethodIconUrl()) {
          i += CodedOutputStreamMicro.computeStringSize(7, getTransitMethodIconUrl());
        }
        if (hasTransitLineIconUrl()) {
          i += CodedOutputStreamMicro.computeStringSize(8, getTransitLineIconUrl());
        }
        Iterator localIterator1 = getWalkingPathList().iterator();
        while (localIterator1.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(9, (Sidekick.Location)localIterator1.next());
        }
        Iterator localIterator2 = getAlertList().iterator();
        while (localIterator2.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(10, (Alert)localIterator2.next());
        }
        if (hasArrivalTimeSeconds()) {
          i += CodedOutputStreamMicro.computeInt64Size(11, getArrivalTimeSeconds());
        }
        if (hasPeriodicitySeconds()) {
          i += CodedOutputStreamMicro.computeInt32Size(12, getPeriodicitySeconds());
        }
        int j = 0;
        Iterator localIterator3 = getFareList().iterator();
        while (localIterator3.hasNext()) {
          j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator3.next());
        }
        int k = i + j + 1 * getFareList().size();
        Iterator localIterator4 = getStepList().iterator();
        while (localIterator4.hasNext()) {
          k += CodedOutputStreamMicro.computeMessageSize(14, (Step)localIterator4.next());
        }
        if (hasWalkingTimeToDestMinutes()) {
          k += CodedOutputStreamMicro.computeInt32Size(15, getWalkingTimeToDestMinutes());
        }
        if (hasPersonalizedRouteToken()) {
          k += CodedOutputStreamMicro.computeStringSize(16, getPersonalizedRouteToken());
        }
        if (hasVehicleType()) {
          k += CodedOutputStreamMicro.computeInt32Size(17, getVehicleType());
        }
        this.cachedSize = k;
        return k;
      }
      
      public Sidekick.Location getStationLocation()
      {
        return this.stationLocation_;
      }
      
      public Step getStep(int paramInt)
      {
        return (Step)this.step_.get(paramInt);
      }
      
      public int getStepCount()
      {
        return this.step_.size();
      }
      
      public List<Step> getStepList()
      {
        return this.step_;
      }
      
      public int getTransitLineBackgroundColor()
      {
        return this.transitLineBackgroundColor_;
      }
      
      public int getTransitLineForegroundColor()
      {
        return this.transitLineForegroundColor_;
      }
      
      public String getTransitLineIconUrl()
      {
        return this.transitLineIconUrl_;
      }
      
      public String getTransitLineName()
      {
        return this.transitLineName_;
      }
      
      public String getTransitMethodIconUrl()
      {
        return this.transitMethodIconUrl_;
      }
      
      public int getVehicleType()
      {
        return this.vehicleType_;
      }
      
      public int getWalkingPathCount()
      {
        return this.walkingPath_.size();
      }
      
      public List<Sidekick.Location> getWalkingPathList()
      {
        return this.walkingPath_;
      }
      
      public int getWalkingTimeMinutes()
      {
        return this.walkingTimeMinutes_;
      }
      
      public int getWalkingTimeToDestMinutes()
      {
        return this.walkingTimeToDestMinutes_;
      }
      
      public boolean hasArrivalTimeSeconds()
      {
        return this.hasArrivalTimeSeconds;
      }
      
      public boolean hasDepartureTimeSeconds()
      {
        return this.hasDepartureTimeSeconds;
      }
      
      public boolean hasPeriodicitySeconds()
      {
        return this.hasPeriodicitySeconds;
      }
      
      public boolean hasPersonalizedRouteToken()
      {
        return this.hasPersonalizedRouteToken;
      }
      
      public boolean hasStationLocation()
      {
        return this.hasStationLocation;
      }
      
      public boolean hasTransitLineBackgroundColor()
      {
        return this.hasTransitLineBackgroundColor;
      }
      
      public boolean hasTransitLineForegroundColor()
      {
        return this.hasTransitLineForegroundColor;
      }
      
      public boolean hasTransitLineIconUrl()
      {
        return this.hasTransitLineIconUrl;
      }
      
      public boolean hasTransitLineName()
      {
        return this.hasTransitLineName;
      }
      
      public boolean hasTransitMethodIconUrl()
      {
        return this.hasTransitMethodIconUrl;
      }
      
      public boolean hasVehicleType()
      {
        return this.hasVehicleType;
      }
      
      public boolean hasWalkingTimeMinutes()
      {
        return this.hasWalkingTimeMinutes;
      }
      
      public boolean hasWalkingTimeToDestMinutes()
      {
        return this.hasWalkingTimeToDestMinutes;
      }
      
      public TransitDetails mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.Location localLocation2 = new Sidekick.Location();
            paramCodedInputStreamMicro.readMessage(localLocation2);
            setStationLocation(localLocation2);
            break;
          case 16: 
            setWalkingTimeMinutes(paramCodedInputStreamMicro.readInt32());
            break;
          case 24: 
            setDepartureTimeSeconds(paramCodedInputStreamMicro.readInt64());
            break;
          case 34: 
            setTransitLineName(paramCodedInputStreamMicro.readString());
            break;
          case 45: 
            setTransitLineForegroundColor(paramCodedInputStreamMicro.readFixed32());
            break;
          case 53: 
            setTransitLineBackgroundColor(paramCodedInputStreamMicro.readFixed32());
            break;
          case 58: 
            setTransitMethodIconUrl(paramCodedInputStreamMicro.readString());
            break;
          case 66: 
            setTransitLineIconUrl(paramCodedInputStreamMicro.readString());
            break;
          case 74: 
            Sidekick.Location localLocation1 = new Sidekick.Location();
            paramCodedInputStreamMicro.readMessage(localLocation1);
            addWalkingPath(localLocation1);
            break;
          case 82: 
            Alert localAlert = new Alert();
            paramCodedInputStreamMicro.readMessage(localAlert);
            addAlert(localAlert);
            break;
          case 88: 
            setArrivalTimeSeconds(paramCodedInputStreamMicro.readInt64());
            break;
          case 96: 
            setPeriodicitySeconds(paramCodedInputStreamMicro.readInt32());
            break;
          case 106: 
            addFare(paramCodedInputStreamMicro.readString());
            break;
          case 114: 
            Step localStep = new Step();
            paramCodedInputStreamMicro.readMessage(localStep);
            addStep(localStep);
            break;
          case 120: 
            setWalkingTimeToDestMinutes(paramCodedInputStreamMicro.readInt32());
            break;
          case 130: 
            setPersonalizedRouteToken(paramCodedInputStreamMicro.readString());
            break;
          }
          setVehicleType(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public TransitDetails setArrivalTimeSeconds(long paramLong)
      {
        this.hasArrivalTimeSeconds = true;
        this.arrivalTimeSeconds_ = paramLong;
        return this;
      }
      
      public TransitDetails setDepartureTimeSeconds(long paramLong)
      {
        this.hasDepartureTimeSeconds = true;
        this.departureTimeSeconds_ = paramLong;
        return this;
      }
      
      public TransitDetails setPeriodicitySeconds(int paramInt)
      {
        this.hasPeriodicitySeconds = true;
        this.periodicitySeconds_ = paramInt;
        return this;
      }
      
      public TransitDetails setPersonalizedRouteToken(String paramString)
      {
        this.hasPersonalizedRouteToken = true;
        this.personalizedRouteToken_ = paramString;
        return this;
      }
      
      public TransitDetails setStationLocation(Sidekick.Location paramLocation)
      {
        if (paramLocation == null) {
          throw new NullPointerException();
        }
        this.hasStationLocation = true;
        this.stationLocation_ = paramLocation;
        return this;
      }
      
      public TransitDetails setTransitLineBackgroundColor(int paramInt)
      {
        this.hasTransitLineBackgroundColor = true;
        this.transitLineBackgroundColor_ = paramInt;
        return this;
      }
      
      public TransitDetails setTransitLineForegroundColor(int paramInt)
      {
        this.hasTransitLineForegroundColor = true;
        this.transitLineForegroundColor_ = paramInt;
        return this;
      }
      
      public TransitDetails setTransitLineIconUrl(String paramString)
      {
        this.hasTransitLineIconUrl = true;
        this.transitLineIconUrl_ = paramString;
        return this;
      }
      
      public TransitDetails setTransitLineName(String paramString)
      {
        this.hasTransitLineName = true;
        this.transitLineName_ = paramString;
        return this;
      }
      
      public TransitDetails setTransitMethodIconUrl(String paramString)
      {
        this.hasTransitMethodIconUrl = true;
        this.transitMethodIconUrl_ = paramString;
        return this;
      }
      
      public TransitDetails setVehicleType(int paramInt)
      {
        this.hasVehicleType = true;
        this.vehicleType_ = paramInt;
        return this;
      }
      
      public TransitDetails setWalkingTimeMinutes(int paramInt)
      {
        this.hasWalkingTimeMinutes = true;
        this.walkingTimeMinutes_ = paramInt;
        return this;
      }
      
      public TransitDetails setWalkingTimeToDestMinutes(int paramInt)
      {
        this.hasWalkingTimeToDestMinutes = true;
        this.walkingTimeToDestMinutes_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasStationLocation()) {
          paramCodedOutputStreamMicro.writeMessage(1, getStationLocation());
        }
        if (hasWalkingTimeMinutes()) {
          paramCodedOutputStreamMicro.writeInt32(2, getWalkingTimeMinutes());
        }
        if (hasDepartureTimeSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(3, getDepartureTimeSeconds());
        }
        if (hasTransitLineName()) {
          paramCodedOutputStreamMicro.writeString(4, getTransitLineName());
        }
        if (hasTransitLineForegroundColor()) {
          paramCodedOutputStreamMicro.writeFixed32(5, getTransitLineForegroundColor());
        }
        if (hasTransitLineBackgroundColor()) {
          paramCodedOutputStreamMicro.writeFixed32(6, getTransitLineBackgroundColor());
        }
        if (hasTransitMethodIconUrl()) {
          paramCodedOutputStreamMicro.writeString(7, getTransitMethodIconUrl());
        }
        if (hasTransitLineIconUrl()) {
          paramCodedOutputStreamMicro.writeString(8, getTransitLineIconUrl());
        }
        Iterator localIterator1 = getWalkingPathList().iterator();
        while (localIterator1.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(9, (Sidekick.Location)localIterator1.next());
        }
        Iterator localIterator2 = getAlertList().iterator();
        while (localIterator2.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(10, (Alert)localIterator2.next());
        }
        if (hasArrivalTimeSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(11, getArrivalTimeSeconds());
        }
        if (hasPeriodicitySeconds()) {
          paramCodedOutputStreamMicro.writeInt32(12, getPeriodicitySeconds());
        }
        Iterator localIterator3 = getFareList().iterator();
        while (localIterator3.hasNext()) {
          paramCodedOutputStreamMicro.writeString(13, (String)localIterator3.next());
        }
        Iterator localIterator4 = getStepList().iterator();
        while (localIterator4.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(14, (Step)localIterator4.next());
        }
        if (hasWalkingTimeToDestMinutes()) {
          paramCodedOutputStreamMicro.writeInt32(15, getWalkingTimeToDestMinutes());
        }
        if (hasPersonalizedRouteToken()) {
          paramCodedOutputStreamMicro.writeString(16, getPersonalizedRouteToken());
        }
        if (hasVehicleType()) {
          paramCodedOutputStreamMicro.writeInt32(17, getVehicleType());
        }
      }
      
      public static final class Alert
        extends MessageMicro
      {
        private int cachedSize = -1;
        private long endTimeSeconds_ = 0L;
        private boolean hasEndTimeSeconds;
        private boolean hasLineName;
        private boolean hasStartTimeSeconds;
        private boolean hasStationLocation;
        private boolean hasTransitLineBackgroundColor;
        private boolean hasType;
        private String lineName_ = "";
        private long startTimeSeconds_ = 0L;
        private Sidekick.Location stationLocation_ = null;
        private int transitLineBackgroundColor_ = 0;
        private int type_ = 1;
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public long getEndTimeSeconds()
        {
          return this.endTimeSeconds_;
        }
        
        public String getLineName()
        {
          return this.lineName_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasType();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getType());
          }
          if (hasLineName()) {
            i += CodedOutputStreamMicro.computeStringSize(2, getLineName());
          }
          if (hasTransitLineBackgroundColor()) {
            i += CodedOutputStreamMicro.computeFixed32Size(3, getTransitLineBackgroundColor());
          }
          if (hasStationLocation()) {
            i += CodedOutputStreamMicro.computeMessageSize(4, getStationLocation());
          }
          if (hasStartTimeSeconds()) {
            i += CodedOutputStreamMicro.computeInt64Size(5, getStartTimeSeconds());
          }
          if (hasEndTimeSeconds()) {
            i += CodedOutputStreamMicro.computeInt64Size(6, getEndTimeSeconds());
          }
          this.cachedSize = i;
          return i;
        }
        
        public long getStartTimeSeconds()
        {
          return this.startTimeSeconds_;
        }
        
        public Sidekick.Location getStationLocation()
        {
          return this.stationLocation_;
        }
        
        public int getTransitLineBackgroundColor()
        {
          return this.transitLineBackgroundColor_;
        }
        
        public int getType()
        {
          return this.type_;
        }
        
        public boolean hasEndTimeSeconds()
        {
          return this.hasEndTimeSeconds;
        }
        
        public boolean hasLineName()
        {
          return this.hasLineName;
        }
        
        public boolean hasStartTimeSeconds()
        {
          return this.hasStartTimeSeconds;
        }
        
        public boolean hasStationLocation()
        {
          return this.hasStationLocation;
        }
        
        public boolean hasTransitLineBackgroundColor()
        {
          return this.hasTransitLineBackgroundColor;
        }
        
        public boolean hasType()
        {
          return this.hasType;
        }
        
        public Alert mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 8: 
              setType(paramCodedInputStreamMicro.readInt32());
              break;
            case 18: 
              setLineName(paramCodedInputStreamMicro.readString());
              break;
            case 29: 
              setTransitLineBackgroundColor(paramCodedInputStreamMicro.readFixed32());
              break;
            case 34: 
              Sidekick.Location localLocation = new Sidekick.Location();
              paramCodedInputStreamMicro.readMessage(localLocation);
              setStationLocation(localLocation);
              break;
            case 40: 
              setStartTimeSeconds(paramCodedInputStreamMicro.readInt64());
              break;
            }
            setEndTimeSeconds(paramCodedInputStreamMicro.readInt64());
          }
        }
        
        public Alert setEndTimeSeconds(long paramLong)
        {
          this.hasEndTimeSeconds = true;
          this.endTimeSeconds_ = paramLong;
          return this;
        }
        
        public Alert setLineName(String paramString)
        {
          this.hasLineName = true;
          this.lineName_ = paramString;
          return this;
        }
        
        public Alert setStartTimeSeconds(long paramLong)
        {
          this.hasStartTimeSeconds = true;
          this.startTimeSeconds_ = paramLong;
          return this;
        }
        
        public Alert setStationLocation(Sidekick.Location paramLocation)
        {
          if (paramLocation == null) {
            throw new NullPointerException();
          }
          this.hasStationLocation = true;
          this.stationLocation_ = paramLocation;
          return this;
        }
        
        public Alert setTransitLineBackgroundColor(int paramInt)
        {
          this.hasTransitLineBackgroundColor = true;
          this.transitLineBackgroundColor_ = paramInt;
          return this;
        }
        
        public Alert setType(int paramInt)
        {
          this.hasType = true;
          this.type_ = paramInt;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasType()) {
            paramCodedOutputStreamMicro.writeInt32(1, getType());
          }
          if (hasLineName()) {
            paramCodedOutputStreamMicro.writeString(2, getLineName());
          }
          if (hasTransitLineBackgroundColor()) {
            paramCodedOutputStreamMicro.writeFixed32(3, getTransitLineBackgroundColor());
          }
          if (hasStationLocation()) {
            paramCodedOutputStreamMicro.writeMessage(4, getStationLocation());
          }
          if (hasStartTimeSeconds()) {
            paramCodedOutputStreamMicro.writeInt64(5, getStartTimeSeconds());
          }
          if (hasEndTimeSeconds()) {
            paramCodedOutputStreamMicro.writeInt64(6, getEndTimeSeconds());
          }
        }
      }
      
      public static final class Line
        extends MessageMicro
      {
        private int backgroundColor_ = 0;
        private int cachedSize = -1;
        private int foregroundColor_ = 0;
        private boolean hasBackgroundColor;
        private boolean hasForegroundColor;
        private boolean hasLineIconUrl;
        private boolean hasMethodIconUrl;
        private boolean hasName;
        private boolean hasShowName;
        private String lineIconUrl_ = "";
        private String methodIconUrl_ = "";
        private String name_ = "";
        private boolean showName_ = false;
        
        public int getBackgroundColor()
        {
          return this.backgroundColor_;
        }
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public int getForegroundColor()
        {
          return this.foregroundColor_;
        }
        
        public String getLineIconUrl()
        {
          return this.lineIconUrl_;
        }
        
        public String getMethodIconUrl()
        {
          return this.methodIconUrl_;
        }
        
        public String getName()
        {
          return this.name_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasName();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
          }
          if (hasForegroundColor()) {
            i += CodedOutputStreamMicro.computeFixed32Size(2, getForegroundColor());
          }
          if (hasBackgroundColor()) {
            i += CodedOutputStreamMicro.computeFixed32Size(3, getBackgroundColor());
          }
          if (hasLineIconUrl()) {
            i += CodedOutputStreamMicro.computeStringSize(4, getLineIconUrl());
          }
          if (hasMethodIconUrl()) {
            i += CodedOutputStreamMicro.computeStringSize(5, getMethodIconUrl());
          }
          if (hasShowName()) {
            i += CodedOutputStreamMicro.computeBoolSize(6, getShowName());
          }
          this.cachedSize = i;
          return i;
        }
        
        public boolean getShowName()
        {
          return this.showName_;
        }
        
        public boolean hasBackgroundColor()
        {
          return this.hasBackgroundColor;
        }
        
        public boolean hasForegroundColor()
        {
          return this.hasForegroundColor;
        }
        
        public boolean hasLineIconUrl()
        {
          return this.hasLineIconUrl;
        }
        
        public boolean hasMethodIconUrl()
        {
          return this.hasMethodIconUrl;
        }
        
        public boolean hasName()
        {
          return this.hasName;
        }
        
        public boolean hasShowName()
        {
          return this.hasShowName;
        }
        
        public Line mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 10: 
              setName(paramCodedInputStreamMicro.readString());
              break;
            case 21: 
              setForegroundColor(paramCodedInputStreamMicro.readFixed32());
              break;
            case 29: 
              setBackgroundColor(paramCodedInputStreamMicro.readFixed32());
              break;
            case 34: 
              setLineIconUrl(paramCodedInputStreamMicro.readString());
              break;
            case 42: 
              setMethodIconUrl(paramCodedInputStreamMicro.readString());
              break;
            }
            setShowName(paramCodedInputStreamMicro.readBool());
          }
        }
        
        public Line setBackgroundColor(int paramInt)
        {
          this.hasBackgroundColor = true;
          this.backgroundColor_ = paramInt;
          return this;
        }
        
        public Line setForegroundColor(int paramInt)
        {
          this.hasForegroundColor = true;
          this.foregroundColor_ = paramInt;
          return this;
        }
        
        public Line setLineIconUrl(String paramString)
        {
          this.hasLineIconUrl = true;
          this.lineIconUrl_ = paramString;
          return this;
        }
        
        public Line setMethodIconUrl(String paramString)
        {
          this.hasMethodIconUrl = true;
          this.methodIconUrl_ = paramString;
          return this;
        }
        
        public Line setName(String paramString)
        {
          this.hasName = true;
          this.name_ = paramString;
          return this;
        }
        
        public Line setShowName(boolean paramBoolean)
        {
          this.hasShowName = true;
          this.showName_ = paramBoolean;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasName()) {
            paramCodedOutputStreamMicro.writeString(1, getName());
          }
          if (hasForegroundColor()) {
            paramCodedOutputStreamMicro.writeFixed32(2, getForegroundColor());
          }
          if (hasBackgroundColor()) {
            paramCodedOutputStreamMicro.writeFixed32(3, getBackgroundColor());
          }
          if (hasLineIconUrl()) {
            paramCodedOutputStreamMicro.writeString(4, getLineIconUrl());
          }
          if (hasMethodIconUrl()) {
            paramCodedOutputStreamMicro.writeString(5, getMethodIconUrl());
          }
          if (hasShowName()) {
            paramCodedOutputStreamMicro.writeBool(6, getShowName());
          }
        }
      }
      
      public static final class Step
        extends MessageMicro
      {
        private int cachedSize = -1;
        private List<Sidekick.CommuteSummary.TransitDetails.Line> line_ = Collections.emptyList();
        
        public Step addLine(Sidekick.CommuteSummary.TransitDetails.Line paramLine)
        {
          if (paramLine == null) {
            throw new NullPointerException();
          }
          if (this.line_.isEmpty()) {
            this.line_ = new ArrayList();
          }
          this.line_.add(paramLine);
          return this;
        }
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public Sidekick.CommuteSummary.TransitDetails.Line getLine(int paramInt)
        {
          return (Sidekick.CommuteSummary.TransitDetails.Line)this.line_.get(paramInt);
        }
        
        public int getLineCount()
        {
          return this.line_.size();
        }
        
        public List<Sidekick.CommuteSummary.TransitDetails.Line> getLineList()
        {
          return this.line_;
        }
        
        public int getSerializedSize()
        {
          int i = 0;
          Iterator localIterator = getLineList().iterator();
          while (localIterator.hasNext()) {
            i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.CommuteSummary.TransitDetails.Line)localIterator.next());
          }
          this.cachedSize = i;
          return i;
        }
        
        public Step mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            }
            Sidekick.CommuteSummary.TransitDetails.Line localLine = new Sidekick.CommuteSummary.TransitDetails.Line();
            paramCodedInputStreamMicro.readMessage(localLine);
            addLine(localLine);
          }
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          Iterator localIterator = getLineList().iterator();
          while (localIterator.hasNext()) {
            paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.CommuteSummary.TransitDetails.Line)localIterator.next());
          }
        }
      }
    }
  }
  
  public static final class Configuration
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean completelyOptOutOfSidekick_ = false;
    private Sidekick.DasherConfiguration dasherConfiguration_ = null;
    private Sidekick.DisplayConfiguration displayConfiguration_ = null;
    private boolean hasCompletelyOptOutOfSidekick;
    private boolean hasDasherConfiguration;
    private boolean hasDisplayConfiguration;
    private boolean hasLocaleConfiguration;
    private boolean hasLocationReportingConfiguration;
    private boolean hasOptInToSidekick;
    private boolean hasPlacevaultConfiguration;
    private boolean hasShowCardsOnBrowserEndpoints;
    private boolean hasSidekickConfiguration;
    private boolean hasWebsearchConfiguration;
    private Sidekick.LocaleConfiguration localeConfiguration_ = null;
    private Sidekick.LocationReportingConfiguration locationReportingConfiguration_ = null;
    private boolean optInToSidekick_ = false;
    private Sidekick.PlacevaultConfiguration placevaultConfiguration_ = null;
    private boolean showCardsOnBrowserEndpoints_ = false;
    private Sidekick.SidekickConfiguration sidekickConfiguration_ = null;
    private Sidekick.WebsearchConfiguration websearchConfiguration_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getCompletelyOptOutOfSidekick()
    {
      return this.completelyOptOutOfSidekick_;
    }
    
    public Sidekick.DasherConfiguration getDasherConfiguration()
    {
      return this.dasherConfiguration_;
    }
    
    public Sidekick.DisplayConfiguration getDisplayConfiguration()
    {
      return this.displayConfiguration_;
    }
    
    public Sidekick.LocaleConfiguration getLocaleConfiguration()
    {
      return this.localeConfiguration_;
    }
    
    public Sidekick.LocationReportingConfiguration getLocationReportingConfiguration()
    {
      return this.locationReportingConfiguration_;
    }
    
    public boolean getOptInToSidekick()
    {
      return this.optInToSidekick_;
    }
    
    public Sidekick.PlacevaultConfiguration getPlacevaultConfiguration()
    {
      return this.placevaultConfiguration_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSidekickConfiguration();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getSidekickConfiguration());
      }
      if (hasPlacevaultConfiguration()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getPlacevaultConfiguration());
      }
      if (hasWebsearchConfiguration()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getWebsearchConfiguration());
      }
      if (hasDasherConfiguration()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getDasherConfiguration());
      }
      if (hasLocaleConfiguration()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getLocaleConfiguration());
      }
      if (hasCompletelyOptOutOfSidekick()) {
        i += CodedOutputStreamMicro.computeBoolSize(6, getCompletelyOptOutOfSidekick());
      }
      if (hasOptInToSidekick()) {
        i += CodedOutputStreamMicro.computeBoolSize(7, getOptInToSidekick());
      }
      if (hasShowCardsOnBrowserEndpoints()) {
        i += CodedOutputStreamMicro.computeBoolSize(8, getShowCardsOnBrowserEndpoints());
      }
      if (hasDisplayConfiguration()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getDisplayConfiguration());
      }
      if (hasLocationReportingConfiguration()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getLocationReportingConfiguration());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean getShowCardsOnBrowserEndpoints()
    {
      return this.showCardsOnBrowserEndpoints_;
    }
    
    public Sidekick.SidekickConfiguration getSidekickConfiguration()
    {
      return this.sidekickConfiguration_;
    }
    
    public Sidekick.WebsearchConfiguration getWebsearchConfiguration()
    {
      return this.websearchConfiguration_;
    }
    
    public boolean hasCompletelyOptOutOfSidekick()
    {
      return this.hasCompletelyOptOutOfSidekick;
    }
    
    public boolean hasDasherConfiguration()
    {
      return this.hasDasherConfiguration;
    }
    
    public boolean hasDisplayConfiguration()
    {
      return this.hasDisplayConfiguration;
    }
    
    public boolean hasLocaleConfiguration()
    {
      return this.hasLocaleConfiguration;
    }
    
    public boolean hasLocationReportingConfiguration()
    {
      return this.hasLocationReportingConfiguration;
    }
    
    public boolean hasOptInToSidekick()
    {
      return this.hasOptInToSidekick;
    }
    
    public boolean hasPlacevaultConfiguration()
    {
      return this.hasPlacevaultConfiguration;
    }
    
    public boolean hasShowCardsOnBrowserEndpoints()
    {
      return this.hasShowCardsOnBrowserEndpoints;
    }
    
    public boolean hasSidekickConfiguration()
    {
      return this.hasSidekickConfiguration;
    }
    
    public boolean hasWebsearchConfiguration()
    {
      return this.hasWebsearchConfiguration;
    }
    
    public Configuration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.SidekickConfiguration localSidekickConfiguration = new Sidekick.SidekickConfiguration();
          paramCodedInputStreamMicro.readMessage(localSidekickConfiguration);
          setSidekickConfiguration(localSidekickConfiguration);
          break;
        case 18: 
          Sidekick.PlacevaultConfiguration localPlacevaultConfiguration = new Sidekick.PlacevaultConfiguration();
          paramCodedInputStreamMicro.readMessage(localPlacevaultConfiguration);
          setPlacevaultConfiguration(localPlacevaultConfiguration);
          break;
        case 26: 
          Sidekick.WebsearchConfiguration localWebsearchConfiguration = new Sidekick.WebsearchConfiguration();
          paramCodedInputStreamMicro.readMessage(localWebsearchConfiguration);
          setWebsearchConfiguration(localWebsearchConfiguration);
          break;
        case 34: 
          Sidekick.DasherConfiguration localDasherConfiguration = new Sidekick.DasherConfiguration();
          paramCodedInputStreamMicro.readMessage(localDasherConfiguration);
          setDasherConfiguration(localDasherConfiguration);
          break;
        case 42: 
          Sidekick.LocaleConfiguration localLocaleConfiguration = new Sidekick.LocaleConfiguration();
          paramCodedInputStreamMicro.readMessage(localLocaleConfiguration);
          setLocaleConfiguration(localLocaleConfiguration);
          break;
        case 48: 
          setCompletelyOptOutOfSidekick(paramCodedInputStreamMicro.readBool());
          break;
        case 56: 
          setOptInToSidekick(paramCodedInputStreamMicro.readBool());
          break;
        case 64: 
          setShowCardsOnBrowserEndpoints(paramCodedInputStreamMicro.readBool());
          break;
        case 74: 
          Sidekick.DisplayConfiguration localDisplayConfiguration = new Sidekick.DisplayConfiguration();
          paramCodedInputStreamMicro.readMessage(localDisplayConfiguration);
          setDisplayConfiguration(localDisplayConfiguration);
          break;
        }
        Sidekick.LocationReportingConfiguration localLocationReportingConfiguration = new Sidekick.LocationReportingConfiguration();
        paramCodedInputStreamMicro.readMessage(localLocationReportingConfiguration);
        setLocationReportingConfiguration(localLocationReportingConfiguration);
      }
    }
    
    public Configuration setCompletelyOptOutOfSidekick(boolean paramBoolean)
    {
      this.hasCompletelyOptOutOfSidekick = true;
      this.completelyOptOutOfSidekick_ = paramBoolean;
      return this;
    }
    
    public Configuration setDasherConfiguration(Sidekick.DasherConfiguration paramDasherConfiguration)
    {
      if (paramDasherConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasDasherConfiguration = true;
      this.dasherConfiguration_ = paramDasherConfiguration;
      return this;
    }
    
    public Configuration setDisplayConfiguration(Sidekick.DisplayConfiguration paramDisplayConfiguration)
    {
      if (paramDisplayConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasDisplayConfiguration = true;
      this.displayConfiguration_ = paramDisplayConfiguration;
      return this;
    }
    
    public Configuration setLocaleConfiguration(Sidekick.LocaleConfiguration paramLocaleConfiguration)
    {
      if (paramLocaleConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasLocaleConfiguration = true;
      this.localeConfiguration_ = paramLocaleConfiguration;
      return this;
    }
    
    public Configuration setLocationReportingConfiguration(Sidekick.LocationReportingConfiguration paramLocationReportingConfiguration)
    {
      if (paramLocationReportingConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasLocationReportingConfiguration = true;
      this.locationReportingConfiguration_ = paramLocationReportingConfiguration;
      return this;
    }
    
    public Configuration setOptInToSidekick(boolean paramBoolean)
    {
      this.hasOptInToSidekick = true;
      this.optInToSidekick_ = paramBoolean;
      return this;
    }
    
    public Configuration setPlacevaultConfiguration(Sidekick.PlacevaultConfiguration paramPlacevaultConfiguration)
    {
      if (paramPlacevaultConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasPlacevaultConfiguration = true;
      this.placevaultConfiguration_ = paramPlacevaultConfiguration;
      return this;
    }
    
    public Configuration setShowCardsOnBrowserEndpoints(boolean paramBoolean)
    {
      this.hasShowCardsOnBrowserEndpoints = true;
      this.showCardsOnBrowserEndpoints_ = paramBoolean;
      return this;
    }
    
    public Configuration setSidekickConfiguration(Sidekick.SidekickConfiguration paramSidekickConfiguration)
    {
      if (paramSidekickConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasSidekickConfiguration = true;
      this.sidekickConfiguration_ = paramSidekickConfiguration;
      return this;
    }
    
    public Configuration setWebsearchConfiguration(Sidekick.WebsearchConfiguration paramWebsearchConfiguration)
    {
      if (paramWebsearchConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasWebsearchConfiguration = true;
      this.websearchConfiguration_ = paramWebsearchConfiguration;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSidekickConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(1, getSidekickConfiguration());
      }
      if (hasPlacevaultConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(2, getPlacevaultConfiguration());
      }
      if (hasWebsearchConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(3, getWebsearchConfiguration());
      }
      if (hasDasherConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(4, getDasherConfiguration());
      }
      if (hasLocaleConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(5, getLocaleConfiguration());
      }
      if (hasCompletelyOptOutOfSidekick()) {
        paramCodedOutputStreamMicro.writeBool(6, getCompletelyOptOutOfSidekick());
      }
      if (hasOptInToSidekick()) {
        paramCodedOutputStreamMicro.writeBool(7, getOptInToSidekick());
      }
      if (hasShowCardsOnBrowserEndpoints()) {
        paramCodedOutputStreamMicro.writeBool(8, getShowCardsOnBrowserEndpoints());
      }
      if (hasDisplayConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(9, getDisplayConfiguration());
      }
      if (hasLocationReportingConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(10, getLocationReportingConfiguration());
      }
    }
  }
  
  public static final class ContactData
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String clientEntityId_ = "";
    private long focusId_ = 0L;
    private boolean hasClientEntityId;
    private boolean hasFocusId;
    private boolean hasName;
    private String name_ = "";
    private List<Sidekick.PhoneNumber> phoneNumber_ = Collections.emptyList();
    
    public ContactData addPhoneNumber(Sidekick.PhoneNumber paramPhoneNumber)
    {
      if (paramPhoneNumber == null) {
        throw new NullPointerException();
      }
      if (this.phoneNumber_.isEmpty()) {
        this.phoneNumber_ = new ArrayList();
      }
      this.phoneNumber_.add(paramPhoneNumber);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getClientEntityId()
    {
      return this.clientEntityId_;
    }
    
    public long getFocusId()
    {
      return this.focusId_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public List<Sidekick.PhoneNumber> getPhoneNumberList()
    {
      return this.phoneNumber_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasFocusId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getFocusId());
      }
      if (hasName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getName());
      }
      Iterator localIterator = getPhoneNumberList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.PhoneNumber)localIterator.next());
      }
      if (hasClientEntityId()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getClientEntityId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasClientEntityId()
    {
      return this.hasClientEntityId;
    }
    
    public boolean hasFocusId()
    {
      return this.hasFocusId;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public ContactData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setFocusId(paramCodedInputStreamMicro.readInt64());
          break;
        case 18: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.PhoneNumber localPhoneNumber = new Sidekick.PhoneNumber();
          paramCodedInputStreamMicro.readMessage(localPhoneNumber);
          addPhoneNumber(localPhoneNumber);
          break;
        }
        setClientEntityId(paramCodedInputStreamMicro.readString());
      }
    }
    
    public ContactData setClientEntityId(String paramString)
    {
      this.hasClientEntityId = true;
      this.clientEntityId_ = paramString;
      return this;
    }
    
    public ContactData setFocusId(long paramLong)
    {
      this.hasFocusId = true;
      this.focusId_ = paramLong;
      return this;
    }
    
    public ContactData setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasFocusId()) {
        paramCodedOutputStreamMicro.writeInt64(1, getFocusId());
      }
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(2, getName());
      }
      Iterator localIterator = getPhoneNumberList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.PhoneNumber)localIterator.next());
      }
      if (hasClientEntityId()) {
        paramCodedOutputStreamMicro.writeString(4, getClientEntityId());
      }
    }
  }
  
  public static final class ContactQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String clientEntityId_ = "";
    private List<Integer> contactMethod_ = Collections.emptyList();
    private Sidekick.ContactType contactType_ = null;
    private boolean hasClientEntityId;
    private boolean hasContactType;
    private List<String> name_ = Collections.emptyList();
    private List<Sidekick.RecognizedName> verboseName_ = Collections.emptyList();
    
    public ContactQuery addContactMethod(int paramInt)
    {
      if (this.contactMethod_.isEmpty()) {
        this.contactMethod_ = new ArrayList();
      }
      this.contactMethod_.add(Integer.valueOf(paramInt));
      return this;
    }
    
    public ContactQuery addName(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.name_.isEmpty()) {
        this.name_ = new ArrayList();
      }
      this.name_.add(paramString);
      return this;
    }
    
    public ContactQuery addVerboseName(Sidekick.RecognizedName paramRecognizedName)
    {
      if (paramRecognizedName == null) {
        throw new NullPointerException();
      }
      if (this.verboseName_.isEmpty()) {
        this.verboseName_ = new ArrayList();
      }
      this.verboseName_.add(paramRecognizedName);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getClientEntityId()
    {
      return this.clientEntityId_;
    }
    
    public List<Integer> getContactMethodList()
    {
      return this.contactMethod_;
    }
    
    public Sidekick.ContactType getContactType()
    {
      return this.contactType_;
    }
    
    public List<String> getNameList()
    {
      return this.name_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator1 = getNameList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator1.next());
      }
      int j = 0 + i + 1 * getNameList().size();
      if (hasClientEntityId()) {
        j += CodedOutputStreamMicro.computeStringSize(2, getClientEntityId());
      }
      int k = 0;
      Iterator localIterator2 = getContactMethodList().iterator();
      while (localIterator2.hasNext()) {
        k += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator2.next()).intValue());
      }
      int m = j + k + 1 * getContactMethodList().size();
      if (hasContactType()) {
        m += CodedOutputStreamMicro.computeMessageSize(4, getContactType());
      }
      Iterator localIterator3 = getVerboseNameList().iterator();
      while (localIterator3.hasNext()) {
        m += CodedOutputStreamMicro.computeMessageSize(5, (Sidekick.RecognizedName)localIterator3.next());
      }
      this.cachedSize = m;
      return m;
    }
    
    public List<Sidekick.RecognizedName> getVerboseNameList()
    {
      return this.verboseName_;
    }
    
    public boolean hasClientEntityId()
    {
      return this.hasClientEntityId;
    }
    
    public boolean hasContactType()
    {
      return this.hasContactType;
    }
    
    public ContactQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          addName(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setClientEntityId(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          addContactMethod(paramCodedInputStreamMicro.readInt32());
          break;
        case 34: 
          Sidekick.ContactType localContactType = new Sidekick.ContactType();
          paramCodedInputStreamMicro.readMessage(localContactType);
          setContactType(localContactType);
          break;
        }
        Sidekick.RecognizedName localRecognizedName = new Sidekick.RecognizedName();
        paramCodedInputStreamMicro.readMessage(localRecognizedName);
        addVerboseName(localRecognizedName);
      }
    }
    
    public ContactQuery setClientEntityId(String paramString)
    {
      this.hasClientEntityId = true;
      this.clientEntityId_ = paramString;
      return this;
    }
    
    public ContactQuery setContactType(Sidekick.ContactType paramContactType)
    {
      if (paramContactType == null) {
        throw new NullPointerException();
      }
      this.hasContactType = true;
      this.contactType_ = paramContactType;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator1 = getNameList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeString(1, (String)localIterator1.next());
      }
      if (hasClientEntityId()) {
        paramCodedOutputStreamMicro.writeString(2, getClientEntityId());
      }
      Iterator localIterator2 = getContactMethodList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeInt32(3, ((Integer)localIterator2.next()).intValue());
      }
      if (hasContactType()) {
        paramCodedOutputStreamMicro.writeMessage(4, getContactType());
      }
      Iterator localIterator3 = getVerboseNameList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(5, (Sidekick.RecognizedName)localIterator3.next());
      }
    }
  }
  
  public static final class ContactReference
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Sidekick.ContactData> contactData_ = Collections.emptyList();
    private Sidekick.ContactQuery contactQuery_ = null;
    private boolean hasContactQuery;
    private boolean hasName;
    private boolean hasPlaceholderContact;
    private String name_ = "";
    private boolean placeholderContact_ = false;
    
    public ContactReference addContactData(Sidekick.ContactData paramContactData)
    {
      if (paramContactData == null) {
        throw new NullPointerException();
      }
      if (this.contactData_.isEmpty()) {
        this.contactData_ = new ArrayList();
      }
      this.contactData_.add(paramContactData);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public List<Sidekick.ContactData> getContactDataList()
    {
      return this.contactData_;
    }
    
    public Sidekick.ContactQuery getContactQuery()
    {
      return this.contactQuery_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public boolean getPlaceholderContact()
    {
      return this.placeholderContact_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
      }
      Iterator localIterator = getContactDataList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.ContactData)localIterator.next());
      }
      if (hasContactQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getContactQuery());
      }
      if (hasPlaceholderContact()) {
        i += CodedOutputStreamMicro.computeBoolSize(4, getPlaceholderContact());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasContactQuery()
    {
      return this.hasContactQuery;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasPlaceholderContact()
    {
      return this.hasPlaceholderContact;
    }
    
    public ContactReference mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          Sidekick.ContactData localContactData = new Sidekick.ContactData();
          paramCodedInputStreamMicro.readMessage(localContactData);
          addContactData(localContactData);
          break;
        case 26: 
          Sidekick.ContactQuery localContactQuery = new Sidekick.ContactQuery();
          paramCodedInputStreamMicro.readMessage(localContactQuery);
          setContactQuery(localContactQuery);
          break;
        }
        setPlaceholderContact(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public ContactReference setContactQuery(Sidekick.ContactQuery paramContactQuery)
    {
      if (paramContactQuery == null) {
        throw new NullPointerException();
      }
      this.hasContactQuery = true;
      this.contactQuery_ = paramContactQuery;
      return this;
    }
    
    public ContactReference setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public ContactReference setPlaceholderContact(boolean paramBoolean)
    {
      this.hasPlaceholderContact = true;
      this.placeholderContact_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(1, getName());
      }
      Iterator localIterator = getContactDataList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.ContactData)localIterator.next());
      }
      if (hasContactQuery()) {
        paramCodedOutputStreamMicro.writeMessage(3, getContactQuery());
      }
      if (hasPlaceholderContact()) {
        paramCodedOutputStreamMicro.writeBool(4, getPlaceholderContact());
      }
    }
  }
  
  public static final class ContactType
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String customType_ = "";
    private boolean hasCustomType;
    private boolean hasType;
    private int type_ = 1;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getCustomType()
    {
      return this.customType_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getType());
      }
      if (hasCustomType()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getCustomType());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public boolean hasCustomType()
    {
      return this.hasCustomType;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public ContactType mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setCustomType(paramCodedInputStreamMicro.readString());
      }
    }
    
    public ContactType setCustomType(String paramString)
    {
      this.hasCustomType = true;
      this.customType_ = paramString;
      return this;
    }
    
    public ContactType setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(1, getType());
      }
      if (hasCustomType()) {
        paramCodedOutputStreamMicro.writeString(2, getCustomType());
      }
    }
  }
  
  public static final class CrewMember
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasName;
    private boolean hasNameAction;
    private boolean hasNameDestination;
    private boolean hasRole;
    private Sidekick.ClickAction nameAction_ = null;
    private Sidekick.Destination nameDestination_ = null;
    private String name_ = "";
    private String role_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public Sidekick.ClickAction getNameAction()
    {
      return this.nameAction_;
    }
    
    public Sidekick.Destination getNameDestination()
    {
      return this.nameDestination_;
    }
    
    public String getRole()
    {
      return this.role_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
      }
      if (hasRole()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getRole());
      }
      if (hasNameDestination()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getNameDestination());
      }
      if (hasNameAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getNameAction());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasNameAction()
    {
      return this.hasNameAction;
    }
    
    public boolean hasNameDestination()
    {
      return this.hasNameDestination;
    }
    
    public boolean hasRole()
    {
      return this.hasRole;
    }
    
    public CrewMember mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setRole(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Destination localDestination = new Sidekick.Destination();
          paramCodedInputStreamMicro.readMessage(localDestination);
          setNameDestination(localDestination);
          break;
        }
        Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
        paramCodedInputStreamMicro.readMessage(localClickAction);
        setNameAction(localClickAction);
      }
    }
    
    public CrewMember setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public CrewMember setNameAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasNameAction = true;
      this.nameAction_ = paramClickAction;
      return this;
    }
    
    public CrewMember setNameDestination(Sidekick.Destination paramDestination)
    {
      if (paramDestination == null) {
        throw new NullPointerException();
      }
      this.hasNameDestination = true;
      this.nameDestination_ = paramDestination;
      return this;
    }
    
    public CrewMember setRole(String paramString)
    {
      this.hasRole = true;
      this.role_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(1, getName());
      }
      if (hasRole()) {
        paramCodedOutputStreamMicro.writeString(2, getRole());
      }
      if (hasNameDestination()) {
        paramCodedOutputStreamMicro.writeMessage(3, getNameDestination());
      }
      if (hasNameAction()) {
        paramCodedOutputStreamMicro.writeMessage(4, getNameAction());
      }
    }
  }
  
  public static final class CurrencyExchangeEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int defaultLocalExchangeAmount_ = 1;
    private boolean hasDefaultLocalExchangeAmount;
    private boolean hasHomeCurrency;
    private boolean hasLocalCurrency;
    private boolean hasLocalToHomeRate;
    private boolean hasTitle;
    private String homeCurrency_ = "";
    private String localCurrency_ = "";
    private float localToHomeRate_ = 0.0F;
    private String title_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getDefaultLocalExchangeAmount()
    {
      return this.defaultLocalExchangeAmount_;
    }
    
    public String getHomeCurrency()
    {
      return this.homeCurrency_;
    }
    
    public String getLocalCurrency()
    {
      return this.localCurrency_;
    }
    
    public float getLocalToHomeRate()
    {
      return this.localToHomeRate_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasLocalToHomeRate()) {
        i += CodedOutputStreamMicro.computeFloatSize(2, getLocalToHomeRate());
      }
      if (hasLocalCurrency()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getLocalCurrency());
      }
      if (hasHomeCurrency()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getHomeCurrency());
      }
      if (hasDefaultLocalExchangeAmount()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getDefaultLocalExchangeAmount());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasDefaultLocalExchangeAmount()
    {
      return this.hasDefaultLocalExchangeAmount;
    }
    
    public boolean hasHomeCurrency()
    {
      return this.hasHomeCurrency;
    }
    
    public boolean hasLocalCurrency()
    {
      return this.hasLocalCurrency;
    }
    
    public boolean hasLocalToHomeRate()
    {
      return this.hasLocalToHomeRate;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public CurrencyExchangeEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 21: 
          setLocalToHomeRate(paramCodedInputStreamMicro.readFloat());
          break;
        case 26: 
          setLocalCurrency(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setHomeCurrency(paramCodedInputStreamMicro.readString());
          break;
        }
        setDefaultLocalExchangeAmount(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public CurrencyExchangeEntry setDefaultLocalExchangeAmount(int paramInt)
    {
      this.hasDefaultLocalExchangeAmount = true;
      this.defaultLocalExchangeAmount_ = paramInt;
      return this;
    }
    
    public CurrencyExchangeEntry setHomeCurrency(String paramString)
    {
      this.hasHomeCurrency = true;
      this.homeCurrency_ = paramString;
      return this;
    }
    
    public CurrencyExchangeEntry setLocalCurrency(String paramString)
    {
      this.hasLocalCurrency = true;
      this.localCurrency_ = paramString;
      return this;
    }
    
    public CurrencyExchangeEntry setLocalToHomeRate(float paramFloat)
    {
      this.hasLocalToHomeRate = true;
      this.localToHomeRate_ = paramFloat;
      return this;
    }
    
    public CurrencyExchangeEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasLocalToHomeRate()) {
        paramCodedOutputStreamMicro.writeFloat(2, getLocalToHomeRate());
      }
      if (hasLocalCurrency()) {
        paramCodedOutputStreamMicro.writeString(3, getLocalCurrency());
      }
      if (hasHomeCurrency()) {
        paramCodedOutputStreamMicro.writeString(4, getHomeCurrency());
      }
      if (hasDefaultLocalExchangeAmount()) {
        paramCodedOutputStreamMicro.writeInt32(5, getDefaultLocalExchangeAmount());
      }
    }
  }
  
  public static final class DasherConfiguration
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasPredictiveUiEnabled;
    private boolean predictiveUiEnabled_ = false;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getPredictiveUiEnabled()
    {
      return this.predictiveUiEnabled_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasPredictiveUiEnabled();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getPredictiveUiEnabled());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasPredictiveUiEnabled()
    {
      return this.hasPredictiveUiEnabled;
    }
    
    public DasherConfiguration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setPredictiveUiEnabled(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public DasherConfiguration setPredictiveUiEnabled(boolean paramBoolean)
    {
      this.hasPredictiveUiEnabled = true;
      this.predictiveUiEnabled_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasPredictiveUiEnabled()) {
        paramCodedOutputStreamMicro.writeBool(1, getPredictiveUiEnabled());
      }
    }
  }
  
  public static final class Destination
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasSearchTerm;
    private boolean hasType;
    private boolean hasUrl;
    private String searchTerm_ = "";
    private int type_ = 1;
    private String url_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getSearchTerm()
    {
      return this.searchTerm_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getType());
      }
      if (hasSearchTerm()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSearchTerm());
      }
      if (hasUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getUrl());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public String getUrl()
    {
      return this.url_;
    }
    
    public boolean hasSearchTerm()
    {
      return this.hasSearchTerm;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public boolean hasUrl()
    {
      return this.hasUrl;
    }
    
    public Destination mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        case 18: 
          setSearchTerm(paramCodedInputStreamMicro.readString());
          break;
        }
        setUrl(paramCodedInputStreamMicro.readString());
      }
    }
    
    public Destination setSearchTerm(String paramString)
    {
      this.hasSearchTerm = true;
      this.searchTerm_ = paramString;
      return this;
    }
    
    public Destination setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public Destination setUrl(String paramString)
    {
      this.hasUrl = true;
      this.url_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(1, getType());
      }
      if (hasSearchTerm()) {
        paramCodedOutputStreamMicro.writeString(2, getSearchTerm());
      }
      if (hasUrl()) {
        paramCodedOutputStreamMicro.writeString(3, getUrl());
      }
    }
  }
  
  public static final class DetectedDevice
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int deviceType_ = 0;
    private boolean hasDeviceType;
    private boolean hasModelName;
    private String modelName_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getDeviceType()
    {
      return this.deviceType_;
    }
    
    public String getModelName()
    {
      return this.modelName_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasDeviceType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getDeviceType());
      }
      if (hasModelName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getModelName());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasDeviceType()
    {
      return this.hasDeviceType;
    }
    
    public boolean hasModelName()
    {
      return this.hasModelName;
    }
    
    public DetectedDevice mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setDeviceType(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setModelName(paramCodedInputStreamMicro.readString());
      }
    }
    
    public DetectedDevice setDeviceType(int paramInt)
    {
      this.hasDeviceType = true;
      this.deviceType_ = paramInt;
      return this;
    }
    
    public DetectedDevice setModelName(String paramString)
    {
      this.hasModelName = true;
      this.modelName_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasDeviceType()) {
        paramCodedOutputStreamMicro.writeInt32(1, getDeviceType());
      }
      if (hasModelName()) {
        paramCodedOutputStreamMicro.writeString(2, getModelName());
      }
    }
  }
  
  public static final class Device
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasManufacturer;
    private boolean hasModel;
    private String manufacturer_ = "";
    private String model_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getManufacturer()
    {
      return this.manufacturer_;
    }
    
    public String getModel()
    {
      return this.model_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasManufacturer();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getManufacturer());
      }
      if (hasModel()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getModel());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasManufacturer()
    {
      return this.hasManufacturer;
    }
    
    public boolean hasModel()
    {
      return this.hasModel;
    }
    
    public Device mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setManufacturer(paramCodedInputStreamMicro.readString());
          break;
        }
        setModel(paramCodedInputStreamMicro.readString());
      }
    }
    
    public Device setManufacturer(String paramString)
    {
      this.hasManufacturer = true;
      this.manufacturer_ = paramString;
      return this;
    }
    
    public Device setModel(String paramString)
    {
      this.hasModel = true;
      this.model_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasManufacturer()) {
        paramCodedOutputStreamMicro.writeString(1, getManufacturer());
      }
      if (hasModel()) {
        paramCodedOutputStreamMicro.writeString(2, getModel());
      }
    }
  }
  
  public static final class DeviceModel
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String category_ = "";
    private boolean hasCategory;
    private boolean hasManufacturer;
    private boolean hasManufacturerUrl;
    private boolean hasModelDescription;
    private boolean hasModelId;
    private boolean hasModelName;
    private boolean hasModelNumber;
    private boolean hasModelUrl;
    private String manufacturerUrl_ = "";
    private String manufacturer_ = "";
    private String modelDescription_ = "";
    private String modelId_ = "";
    private String modelName_ = "";
    private String modelNumber_ = "";
    private String modelUrl_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getCategory()
    {
      return this.category_;
    }
    
    public String getManufacturer()
    {
      return this.manufacturer_;
    }
    
    public String getManufacturerUrl()
    {
      return this.manufacturerUrl_;
    }
    
    public String getModelDescription()
    {
      return this.modelDescription_;
    }
    
    public String getModelId()
    {
      return this.modelId_;
    }
    
    public String getModelName()
    {
      return this.modelName_;
    }
    
    public String getModelNumber()
    {
      return this.modelNumber_;
    }
    
    public String getModelUrl()
    {
      return this.modelUrl_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasManufacturer();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getManufacturer());
      }
      if (hasManufacturerUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getManufacturerUrl());
      }
      if (hasModelName()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getModelName());
      }
      if (hasModelId()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getModelId());
      }
      if (hasModelUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getModelUrl());
      }
      if (hasModelDescription()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getModelDescription());
      }
      if (hasModelNumber()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getModelNumber());
      }
      if (hasCategory()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getCategory());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasCategory()
    {
      return this.hasCategory;
    }
    
    public boolean hasManufacturer()
    {
      return this.hasManufacturer;
    }
    
    public boolean hasManufacturerUrl()
    {
      return this.hasManufacturerUrl;
    }
    
    public boolean hasModelDescription()
    {
      return this.hasModelDescription;
    }
    
    public boolean hasModelId()
    {
      return this.hasModelId;
    }
    
    public boolean hasModelName()
    {
      return this.hasModelName;
    }
    
    public boolean hasModelNumber()
    {
      return this.hasModelNumber;
    }
    
    public boolean hasModelUrl()
    {
      return this.hasModelUrl;
    }
    
    public DeviceModel mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setManufacturer(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setManufacturerUrl(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setModelName(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setModelId(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          setModelUrl(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setModelDescription(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          setModelNumber(paramCodedInputStreamMicro.readString());
          break;
        }
        setCategory(paramCodedInputStreamMicro.readString());
      }
    }
    
    public DeviceModel setCategory(String paramString)
    {
      this.hasCategory = true;
      this.category_ = paramString;
      return this;
    }
    
    public DeviceModel setManufacturer(String paramString)
    {
      this.hasManufacturer = true;
      this.manufacturer_ = paramString;
      return this;
    }
    
    public DeviceModel setManufacturerUrl(String paramString)
    {
      this.hasManufacturerUrl = true;
      this.manufacturerUrl_ = paramString;
      return this;
    }
    
    public DeviceModel setModelDescription(String paramString)
    {
      this.hasModelDescription = true;
      this.modelDescription_ = paramString;
      return this;
    }
    
    public DeviceModel setModelId(String paramString)
    {
      this.hasModelId = true;
      this.modelId_ = paramString;
      return this;
    }
    
    public DeviceModel setModelName(String paramString)
    {
      this.hasModelName = true;
      this.modelName_ = paramString;
      return this;
    }
    
    public DeviceModel setModelNumber(String paramString)
    {
      this.hasModelNumber = true;
      this.modelNumber_ = paramString;
      return this;
    }
    
    public DeviceModel setModelUrl(String paramString)
    {
      this.hasModelUrl = true;
      this.modelUrl_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasManufacturer()) {
        paramCodedOutputStreamMicro.writeString(1, getManufacturer());
      }
      if (hasManufacturerUrl()) {
        paramCodedOutputStreamMicro.writeString(2, getManufacturerUrl());
      }
      if (hasModelName()) {
        paramCodedOutputStreamMicro.writeString(3, getModelName());
      }
      if (hasModelId()) {
        paramCodedOutputStreamMicro.writeString(4, getModelId());
      }
      if (hasModelUrl()) {
        paramCodedOutputStreamMicro.writeString(5, getModelUrl());
      }
      if (hasModelDescription()) {
        paramCodedOutputStreamMicro.writeString(6, getModelDescription());
      }
      if (hasModelNumber()) {
        paramCodedOutputStreamMicro.writeString(7, getModelNumber());
      }
      if (hasCategory()) {
        paramCodedOutputStreamMicro.writeString(8, getCategory());
      }
    }
  }
  
  public static final class DiscUnion
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<RadiusGroup> radiusGroups_ = Collections.emptyList();
    
    public DiscUnion addRadiusGroups(RadiusGroup paramRadiusGroup)
    {
      if (paramRadiusGroup == null) {
        throw new NullPointerException();
      }
      if (this.radiusGroups_.isEmpty()) {
        this.radiusGroups_ = new ArrayList();
      }
      this.radiusGroups_.add(paramRadiusGroup);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public RadiusGroup getRadiusGroups(int paramInt)
    {
      return (RadiusGroup)this.radiusGroups_.get(paramInt);
    }
    
    public List<RadiusGroup> getRadiusGroupsList()
    {
      return this.radiusGroups_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getRadiusGroupsList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (RadiusGroup)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public DiscUnion mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        RadiusGroup localRadiusGroup = new RadiusGroup();
        paramCodedInputStreamMicro.readMessage(localRadiusGroup);
        addRadiusGroups(localRadiusGroup);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getRadiusGroupsList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (RadiusGroup)localIterator.next());
      }
    }
    
    public static final class RadiusGroup
      extends MessageMicro
    {
      private int cachedSize = -1;
      private List<Integer> centersLatLngE7_ = Collections.emptyList();
      private boolean hasRadiusMeters;
      private int radiusMeters_ = 0;
      
      public RadiusGroup addCentersLatLngE7(int paramInt)
      {
        if (this.centersLatLngE7_.isEmpty()) {
          this.centersLatLngE7_ = new ArrayList();
        }
        this.centersLatLngE7_.add(Integer.valueOf(paramInt));
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public List<Integer> getCentersLatLngE7List()
      {
        return this.centersLatLngE7_;
      }
      
      public int getRadiusMeters()
      {
        return this.radiusMeters_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasRadiusMeters();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getRadiusMeters());
        }
        int j = i + 4 * getCentersLatLngE7List().size() + 1 * getCentersLatLngE7List().size();
        this.cachedSize = j;
        return j;
      }
      
      public boolean hasRadiusMeters()
      {
        return this.hasRadiusMeters;
      }
      
      public RadiusGroup mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setRadiusMeters(paramCodedInputStreamMicro.readInt32());
            break;
          }
          addCentersLatLngE7(paramCodedInputStreamMicro.readSFixed32());
        }
      }
      
      public RadiusGroup setRadiusMeters(int paramInt)
      {
        this.hasRadiusMeters = true;
        this.radiusMeters_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasRadiusMeters()) {
          paramCodedOutputStreamMicro.writeInt32(1, getRadiusMeters());
        }
        Iterator localIterator = getCentersLatLngE7List().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeSFixed32(2, ((Integer)localIterator.next()).intValue());
        }
      }
    }
  }
  
  public static final class DisplayConfiguration
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasInternalApiClientsConfig;
    private InternalApiClientsConfig internalApiClientsConfig_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public InternalApiClientsConfig getInternalApiClientsConfig()
    {
      return this.internalApiClientsConfig_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasInternalApiClientsConfig();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getInternalApiClientsConfig());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasInternalApiClientsConfig()
    {
      return this.hasInternalApiClientsConfig;
    }
    
    public DisplayConfiguration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        InternalApiClientsConfig localInternalApiClientsConfig = new InternalApiClientsConfig();
        paramCodedInputStreamMicro.readMessage(localInternalApiClientsConfig);
        setInternalApiClientsConfig(localInternalApiClientsConfig);
      }
    }
    
    public DisplayConfiguration setInternalApiClientsConfig(InternalApiClientsConfig paramInternalApiClientsConfig)
    {
      if (paramInternalApiClientsConfig == null) {
        throw new NullPointerException();
      }
      this.hasInternalApiClientsConfig = true;
      this.internalApiClientsConfig_ = paramInternalApiClientsConfig;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasInternalApiClientsConfig()) {
        paramCodedOutputStreamMicro.writeMessage(1, getInternalApiClientsConfig());
      }
    }
    
    public static final class InternalApiClientsConfig
      extends MessageMicro
    {
      private int cachedSize = -1;
      private List<ClientName> clientName_ = Collections.emptyList();
      
      public InternalApiClientsConfig addClientName(ClientName paramClientName)
      {
        if (paramClientName == null) {
          throw new NullPointerException();
        }
        if (this.clientName_.isEmpty()) {
          this.clientName_ = new ArrayList();
        }
        this.clientName_.add(paramClientName);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getClientNameCount()
      {
        return this.clientName_.size();
      }
      
      public List<ClientName> getClientNameList()
      {
        return this.clientName_;
      }
      
      public int getSerializedSize()
      {
        int i = 0;
        Iterator localIterator = getClientNameList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(1, (ClientName)localIterator.next());
        }
        this.cachedSize = i;
        return i;
      }
      
      public InternalApiClientsConfig mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          ClientName localClientName = new ClientName();
          paramCodedInputStreamMicro.readMessage(localClientName);
          addClientName(localClientName);
        }
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        Iterator localIterator = getClientNameList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(1, (ClientName)localIterator.next());
        }
      }
      
      public static final class ClientName
        extends MessageMicro
      {
        private int cachedSize = -1;
        private int clientId_ = 0;
        private boolean hasClientId;
        private boolean hasName;
        private String name_ = "";
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public int getClientId()
        {
          return this.clientId_;
        }
        
        public String getName()
        {
          return this.name_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasClientId();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getClientId());
          }
          if (hasName()) {
            i += CodedOutputStreamMicro.computeStringSize(2, getName());
          }
          this.cachedSize = i;
          return i;
        }
        
        public boolean hasClientId()
        {
          return this.hasClientId;
        }
        
        public boolean hasName()
        {
          return this.hasName;
        }
        
        public ClientName mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 8: 
              setClientId(paramCodedInputStreamMicro.readInt32());
              break;
            }
            setName(paramCodedInputStreamMicro.readString());
          }
        }
        
        public ClientName setClientId(int paramInt)
        {
          this.hasClientId = true;
          this.clientId_ = paramInt;
          return this;
        }
        
        public ClientName setName(String paramString)
        {
          this.hasName = true;
          this.name_ = paramString;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasClientId()) {
            paramCodedOutputStreamMicro.writeInt32(1, getClientId());
          }
          if (hasName()) {
            paramCodedOutputStreamMicro.writeString(2, getName());
          }
        }
      }
    }
  }
  
  public static final class Entry
    extends MessageMicro
  {
    private Sidekick.AlbumEntry albumEntry_ = null;
    private Sidekick.AppSuggestionEntry appSuggestionEntry_ = null;
    private Sidekick.AttractionListEntry attractionListEntry_ = null;
    private Sidekick.BarcodeEntry barcodeEntry_ = null;
    private Sidekick.BirthdayCardEntry birthdayCardEntry_ = null;
    private Sidekick.BookEntry bookEntry_ = null;
    private Sidekick.NewsEntry breakingNewsEntry_ = null;
    private Sidekick.ResearchPageEntry browseModeAuthorStoryEntry_ = null;
    private Sidekick.BrowseModeEntityEntry browseModeEntityEntry_ = null;
    private Sidekick.ResearchTopicEntry browseModeEntityListEntry_ = null;
    private Sidekick.ResearchTopicEntry browseModeLureAuthorEntry_ = null;
    private Sidekick.ResearchPageEntry browseModeLureInterestUpdateEntry_ = null;
    private Sidekick.ImageLureCardEntry browseModeLureTravelEntry_ = null;
    private Sidekick.BrowseModeVideoEntry browseModeVideoEntry_ = null;
    private Sidekick.ResearchTopicEntry browseModeVideoListEntry_ = null;
    private Sidekick.ResearchPageEntry browseModeWebLinkEntry_ = null;
    private int cachedSize = -1;
    private Sidekick.CalendarEntry calendarEntry_ = null;
    private Sidekick.CarRentalEntry carRentalEntry_ = null;
    private Sidekick.ClockEntry clockEntry_ = null;
    private Sidekick.CurrencyExchangeEntry currencyExchangeEntry_ = null;
    private ByteStringMicro encodedEventId_ = ByteStringMicro.EMPTY;
    private ByteStringMicro encodedServerPayload_ = ByteStringMicro.EMPTY;
    private Sidekick.NewsEntry entityNewsEntry_ = null;
    private List<Sidekick.Action> entryAction_ = Collections.emptyList();
    private long entryUpdateId_ = 0L;
    private long entryUpdateTimestampMillis_ = 0L;
    private Sidekick.EventEntry eventEntry_ = null;
    private Sidekick.EventListEntry eventListEntry_ = null;
    private Sidekick.FlightStatusEntry flightStatusEntry_ = null;
    private Sidekick.FrequentPlaceEntry frequentPlaceEntry_ = null;
    private Sidekick.GenericCardEntry genericCardEntry_ = null;
    private Sidekick.GenericTicketCardEntry genericTicketCardEntry_ = null;
    private Sidekick.GenericTvProgramEntry genericTvProgramEntry_ = null;
    private Sidekick.GmailEntry gmailEntry_ = null;
    private boolean hasAlbumEntry;
    private boolean hasAppSuggestionEntry;
    private boolean hasAttractionListEntry;
    private boolean hasBarcodeEntry;
    private boolean hasBirthdayCardEntry;
    private boolean hasBookEntry;
    private boolean hasBreakingNewsEntry;
    private boolean hasBrowseModeAuthorStoryEntry;
    private boolean hasBrowseModeEntityEntry;
    private boolean hasBrowseModeEntityListEntry;
    private boolean hasBrowseModeLureAuthorEntry;
    private boolean hasBrowseModeLureInterestUpdateEntry;
    private boolean hasBrowseModeLureTravelEntry;
    private boolean hasBrowseModeVideoEntry;
    private boolean hasBrowseModeVideoListEntry;
    private boolean hasBrowseModeWebLinkEntry;
    private boolean hasCalendarEntry;
    private boolean hasCarRentalEntry;
    private boolean hasClockEntry;
    private boolean hasCurrencyExchangeEntry;
    private boolean hasEncodedEventId;
    private boolean hasEncodedServerPayload;
    private boolean hasEntityNewsEntry;
    private boolean hasEntryUpdateId;
    private boolean hasEntryUpdateTimestampMillis;
    private boolean hasEventEntry;
    private boolean hasEventListEntry;
    private boolean hasFlightStatusEntry;
    private boolean hasFrequentPlaceEntry;
    private boolean hasGenericCardEntry;
    private boolean hasGenericTicketCardEntry;
    private boolean hasGenericTvProgramEntry;
    private boolean hasGmailEntry;
    private boolean hasHotelPlaceEntry;
    private boolean hasHyperlocalNewsEntry;
    private boolean hasIsExample;
    private boolean hasLastTrainHomeEntry;
    private boolean hasLinkedIcebreakerQuestion;
    private boolean hasLocationHistoryReminderEntry;
    private boolean hasMoonshineEventTicketEntry;
    private boolean hasMovieEntry;
    private boolean hasMovieListEntry;
    private boolean hasMovieTicketEntry;
    private boolean hasNearbyPlaceEntry;
    private boolean hasNearbyPlacesListEntry;
    private boolean hasNewsEntry;
    private boolean hasNotification;
    private boolean hasPackageTrackingEntry;
    private boolean hasPersonalizedNewsEntry;
    private boolean hasPhotoSpotEntry;
    private boolean hasPrototypeEntry;
    private boolean hasPublicAlertEntry;
    private boolean hasRealEstateEntry;
    private boolean hasReason;
    private boolean hasRelevantWebsiteEntry;
    private boolean hasReminderData;
    private boolean hasReminderEntry;
    private boolean hasResearchPageEntry;
    private boolean hasResearchTopicEntry;
    private boolean hasRestaurantPlaceEntry;
    private boolean hasSharedTrafficCardEntry;
    private boolean hasSportScoreEntry;
    private boolean hasStockQuoteListEntry;
    private boolean hasThingsToWatchEntry;
    private boolean hasThingsToWatchLureEntry;
    private boolean hasTimeToLeaveDetails;
    private boolean hasTrainingQuestionEntry;
    private boolean hasTransitStationEntry;
    private boolean hasTranslateEntry;
    private boolean hasTriggerCondition;
    private boolean hasTvEpisodeEntry;
    private boolean hasTvKnowledgeEntry;
    private boolean hasTvMusicEntry;
    private boolean hasTvNewsEntry;
    private boolean hasTvRecognitionEntry;
    private boolean hasType;
    private boolean hasUserPrompt;
    private boolean hasVideoGameEntry;
    private boolean hasVisualSearchEntry;
    private boolean hasVisualSearchListEntry;
    private boolean hasWalletLoyaltyEntry;
    private boolean hasWalletOfferEntry;
    private boolean hasWeatherEntry;
    private boolean hasWebsiteUpdateEntry;
    private boolean hasWebsiteUpdateListEntry;
    private Sidekick.FrequentPlaceEntry hotelPlaceEntry_ = null;
    private Sidekick.NewsEntry hyperlocalNewsEntry_ = null;
    private boolean isExample_ = false;
    private Sidekick.FrequentPlaceEntry lastTrainHomeEntry_ = null;
    private Sidekick.QuestionNode linkedIcebreakerQuestion_ = null;
    private Sidekick.LocationHistoryReminderEntry locationHistoryReminderEntry_ = null;
    private Sidekick.MoonshineEventTicketEntry moonshineEventTicketEntry_ = null;
    private Sidekick.MovieEntry movieEntry_ = null;
    private Sidekick.MovieListEntry movieListEntry_ = null;
    private Sidekick.MovieTicketEntry movieTicketEntry_ = null;
    private Sidekick.FrequentPlaceEntry nearbyPlaceEntry_ = null;
    private Sidekick.NearbyPlacesListEntry nearbyPlacesListEntry_ = null;
    private Sidekick.NewsEntry newsEntry_ = null;
    private Sidekick.Notification notification_ = null;
    private Sidekick.PackageTrackingEntry packageTrackingEntry_ = null;
    private Sidekick.NewsEntry personalizedNewsEntry_ = null;
    private Sidekick.PhotoSpotEntry photoSpotEntry_ = null;
    private List<Sidekick.PrecacheDirective> precacheDirective_ = Collections.emptyList();
    private Sidekick.PrototypeEntry prototypeEntry_ = null;
    private Sidekick.PublicAlertEntry publicAlertEntry_ = null;
    private Sidekick.RealEstateEntry realEstateEntry_ = null;
    private String reason_ = "";
    private Sidekick.RelevantWebsiteEntry relevantWebsiteEntry_ = null;
    private Sidekick.ReminderData reminderData_ = null;
    private Sidekick.ReminderEntry reminderEntry_ = null;
    private Sidekick.ResearchPageEntry researchPageEntry_ = null;
    private Sidekick.ResearchTopicEntry researchTopicEntry_ = null;
    private Sidekick.FrequentPlaceEntry restaurantPlaceEntry_ = null;
    private Sidekick.SharedTrafficCardEntry sharedTrafficCardEntry_ = null;
    private Sidekick.SportScoreEntry sportScoreEntry_ = null;
    private Sidekick.StockQuoteListEntry stockQuoteListEntry_ = null;
    private Sidekick.ThingsToWatchEntry thingsToWatchEntry_ = null;
    private Sidekick.ImageLureCardEntry thingsToWatchLureEntry_ = null;
    private Sidekick.TimeToLeaveDetails timeToLeaveDetails_ = null;
    private Sidekick.QuestionEntry trainingQuestionEntry_ = null;
    private List<Sidekick.QuestionNode> trainingQuestionNode_ = Collections.emptyList();
    private Sidekick.TransitStationEntry transitStationEntry_ = null;
    private Sidekick.TranslateEntry translateEntry_ = null;
    private Sidekick.TriggerCondition triggerCondition_ = null;
    private Sidekick.TvEpisodeEntry tvEpisodeEntry_ = null;
    private Sidekick.TvKnowledgeEntry tvKnowledgeEntry_ = null;
    private Sidekick.TvMusicEntry tvMusicEntry_ = null;
    private Sidekick.TvNewsEntry tvNewsEntry_ = null;
    private Sidekick.TvRecognitionEntry tvRecognitionEntry_ = null;
    private int type_ = 48;
    private String userPrompt_ = "";
    private Sidekick.VideoGameEntry videoGameEntry_ = null;
    private Sidekick.FrequentPlaceEntry visualSearchEntry_ = null;
    private Sidekick.GenericCardEntry visualSearchListEntry_ = null;
    private Sidekick.WalletLoyaltyEntry walletLoyaltyEntry_ = null;
    private Sidekick.WalletOfferEntry walletOfferEntry_ = null;
    private Sidekick.WeatherEntry weatherEntry_ = null;
    private Sidekick.WebsiteUpdateEntry websiteUpdateEntry_ = null;
    private Sidekick.WebsiteUpdateListEntry websiteUpdateListEntry_ = null;
    
    public static Entry parseFrom(byte[] paramArrayOfByte)
      throws InvalidProtocolBufferMicroException
    {
      return (Entry)new Entry().mergeFrom(paramArrayOfByte);
    }
    
    public Entry addEntryAction(Sidekick.Action paramAction)
    {
      if (paramAction == null) {
        throw new NullPointerException();
      }
      if (this.entryAction_.isEmpty()) {
        this.entryAction_ = new ArrayList();
      }
      this.entryAction_.add(paramAction);
      return this;
    }
    
    public Entry addPrecacheDirective(Sidekick.PrecacheDirective paramPrecacheDirective)
    {
      if (paramPrecacheDirective == null) {
        throw new NullPointerException();
      }
      if (this.precacheDirective_.isEmpty()) {
        this.precacheDirective_ = new ArrayList();
      }
      this.precacheDirective_.add(paramPrecacheDirective);
      return this;
    }
    
    public Entry addTrainingQuestionNode(Sidekick.QuestionNode paramQuestionNode)
    {
      if (paramQuestionNode == null) {
        throw new NullPointerException();
      }
      if (this.trainingQuestionNode_.isEmpty()) {
        this.trainingQuestionNode_ = new ArrayList();
      }
      this.trainingQuestionNode_.add(paramQuestionNode);
      return this;
    }
    
    public final Entry clear()
    {
      clearType();
      clearEntryUpdateId();
      clearEntryUpdateTimestampMillis();
      clearTriggerCondition();
      clearLinkedIcebreakerQuestion();
      clearFrequentPlaceEntry();
      clearWeatherEntry();
      clearCalendarEntry();
      clearTransitStationEntry();
      clearGenericCardEntry();
      clearFlightStatusEntry();
      clearSportScoreEntry();
      clearTranslateEntry();
      clearCurrencyExchangeEntry();
      clearClockEntry();
      clearNearbyPlaceEntry();
      clearPublicAlertEntry();
      clearMovieListEntry();
      clearStockQuoteListEntry();
      clearAttractionListEntry();
      clearPackageTrackingEntry();
      clearNewsEntry();
      clearBreakingNewsEntry();
      clearHyperlocalNewsEntry();
      clearEntityNewsEntry();
      clearLocationHistoryReminderEntry();
      clearPhotoSpotEntry();
      clearBirthdayCardEntry();
      clearMovieEntry();
      clearMovieTicketEntry();
      clearEventEntry();
      clearEventListEntry();
      clearResearchTopicEntry();
      clearResearchPageEntry();
      clearBarcodeEntry();
      clearGmailEntry();
      clearVisualSearchListEntry();
      clearVisualSearchEntry();
      clearNearbyPlacesListEntry();
      clearRealEstateEntry();
      clearReminderEntry();
      clearWebsiteUpdateEntry();
      clearWebsiteUpdateListEntry();
      clearGenericTicketCardEntry();
      clearBookEntry();
      clearAlbumEntry();
      clearVideoGameEntry();
      clearTvEpisodeEntry();
      clearSharedTrafficCardEntry();
      clearRelevantWebsiteEntry();
      clearLastTrainHomeEntry();
      clearWalletOfferEntry();
      clearWalletLoyaltyEntry();
      clearHotelPlaceEntry();
      clearRestaurantPlaceEntry();
      clearTvRecognitionEntry();
      clearGenericTvProgramEntry();
      clearTvNewsEntry();
      clearTvMusicEntry();
      clearTvKnowledgeEntry();
      clearCarRentalEntry();
      clearMoonshineEventTicketEntry();
      clearPrototypeEntry();
      clearTrainingQuestionEntry();
      clearBrowseModeLureInterestUpdateEntry();
      clearBrowseModeLureTravelEntry();
      clearBrowseModeLureAuthorEntry();
      clearBrowseModeAuthorStoryEntry();
      clearBrowseModeWebLinkEntry();
      clearBrowseModeEntityListEntry();
      clearBrowseModeEntityEntry();
      clearBrowseModeVideoListEntry();
      clearBrowseModeVideoEntry();
      clearThingsToWatchLureEntry();
      clearThingsToWatchEntry();
      clearAppSuggestionEntry();
      clearPersonalizedNewsEntry();
      clearReason();
      clearEntryAction();
      clearPrecacheDirective();
      clearNotification();
      clearIsExample();
      clearUserPrompt();
      clearReminderData();
      clearTrainingQuestionNode();
      clearEncodedServerPayload();
      clearTimeToLeaveDetails();
      clearEncodedEventId();
      this.cachedSize = -1;
      return this;
    }
    
    public Entry clearAlbumEntry()
    {
      this.hasAlbumEntry = false;
      this.albumEntry_ = null;
      return this;
    }
    
    public Entry clearAppSuggestionEntry()
    {
      this.hasAppSuggestionEntry = false;
      this.appSuggestionEntry_ = null;
      return this;
    }
    
    public Entry clearAttractionListEntry()
    {
      this.hasAttractionListEntry = false;
      this.attractionListEntry_ = null;
      return this;
    }
    
    public Entry clearBarcodeEntry()
    {
      this.hasBarcodeEntry = false;
      this.barcodeEntry_ = null;
      return this;
    }
    
    public Entry clearBirthdayCardEntry()
    {
      this.hasBirthdayCardEntry = false;
      this.birthdayCardEntry_ = null;
      return this;
    }
    
    public Entry clearBookEntry()
    {
      this.hasBookEntry = false;
      this.bookEntry_ = null;
      return this;
    }
    
    public Entry clearBreakingNewsEntry()
    {
      this.hasBreakingNewsEntry = false;
      this.breakingNewsEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeAuthorStoryEntry()
    {
      this.hasBrowseModeAuthorStoryEntry = false;
      this.browseModeAuthorStoryEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeEntityEntry()
    {
      this.hasBrowseModeEntityEntry = false;
      this.browseModeEntityEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeEntityListEntry()
    {
      this.hasBrowseModeEntityListEntry = false;
      this.browseModeEntityListEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeLureAuthorEntry()
    {
      this.hasBrowseModeLureAuthorEntry = false;
      this.browseModeLureAuthorEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeLureInterestUpdateEntry()
    {
      this.hasBrowseModeLureInterestUpdateEntry = false;
      this.browseModeLureInterestUpdateEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeLureTravelEntry()
    {
      this.hasBrowseModeLureTravelEntry = false;
      this.browseModeLureTravelEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeVideoEntry()
    {
      this.hasBrowseModeVideoEntry = false;
      this.browseModeVideoEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeVideoListEntry()
    {
      this.hasBrowseModeVideoListEntry = false;
      this.browseModeVideoListEntry_ = null;
      return this;
    }
    
    public Entry clearBrowseModeWebLinkEntry()
    {
      this.hasBrowseModeWebLinkEntry = false;
      this.browseModeWebLinkEntry_ = null;
      return this;
    }
    
    public Entry clearCalendarEntry()
    {
      this.hasCalendarEntry = false;
      this.calendarEntry_ = null;
      return this;
    }
    
    public Entry clearCarRentalEntry()
    {
      this.hasCarRentalEntry = false;
      this.carRentalEntry_ = null;
      return this;
    }
    
    public Entry clearClockEntry()
    {
      this.hasClockEntry = false;
      this.clockEntry_ = null;
      return this;
    }
    
    public Entry clearCurrencyExchangeEntry()
    {
      this.hasCurrencyExchangeEntry = false;
      this.currencyExchangeEntry_ = null;
      return this;
    }
    
    public Entry clearEncodedEventId()
    {
      this.hasEncodedEventId = false;
      this.encodedEventId_ = ByteStringMicro.EMPTY;
      return this;
    }
    
    public Entry clearEncodedServerPayload()
    {
      this.hasEncodedServerPayload = false;
      this.encodedServerPayload_ = ByteStringMicro.EMPTY;
      return this;
    }
    
    public Entry clearEntityNewsEntry()
    {
      this.hasEntityNewsEntry = false;
      this.entityNewsEntry_ = null;
      return this;
    }
    
    public Entry clearEntryAction()
    {
      this.entryAction_ = Collections.emptyList();
      return this;
    }
    
    public Entry clearEntryUpdateId()
    {
      this.hasEntryUpdateId = false;
      this.entryUpdateId_ = 0L;
      return this;
    }
    
    public Entry clearEntryUpdateTimestampMillis()
    {
      this.hasEntryUpdateTimestampMillis = false;
      this.entryUpdateTimestampMillis_ = 0L;
      return this;
    }
    
    public Entry clearEventEntry()
    {
      this.hasEventEntry = false;
      this.eventEntry_ = null;
      return this;
    }
    
    public Entry clearEventListEntry()
    {
      this.hasEventListEntry = false;
      this.eventListEntry_ = null;
      return this;
    }
    
    public Entry clearFlightStatusEntry()
    {
      this.hasFlightStatusEntry = false;
      this.flightStatusEntry_ = null;
      return this;
    }
    
    public Entry clearFrequentPlaceEntry()
    {
      this.hasFrequentPlaceEntry = false;
      this.frequentPlaceEntry_ = null;
      return this;
    }
    
    public Entry clearGenericCardEntry()
    {
      this.hasGenericCardEntry = false;
      this.genericCardEntry_ = null;
      return this;
    }
    
    public Entry clearGenericTicketCardEntry()
    {
      this.hasGenericTicketCardEntry = false;
      this.genericTicketCardEntry_ = null;
      return this;
    }
    
    public Entry clearGenericTvProgramEntry()
    {
      this.hasGenericTvProgramEntry = false;
      this.genericTvProgramEntry_ = null;
      return this;
    }
    
    public Entry clearGmailEntry()
    {
      this.hasGmailEntry = false;
      this.gmailEntry_ = null;
      return this;
    }
    
    public Entry clearHotelPlaceEntry()
    {
      this.hasHotelPlaceEntry = false;
      this.hotelPlaceEntry_ = null;
      return this;
    }
    
    public Entry clearHyperlocalNewsEntry()
    {
      this.hasHyperlocalNewsEntry = false;
      this.hyperlocalNewsEntry_ = null;
      return this;
    }
    
    public Entry clearIsExample()
    {
      this.hasIsExample = false;
      this.isExample_ = false;
      return this;
    }
    
    public Entry clearLastTrainHomeEntry()
    {
      this.hasLastTrainHomeEntry = false;
      this.lastTrainHomeEntry_ = null;
      return this;
    }
    
    public Entry clearLinkedIcebreakerQuestion()
    {
      this.hasLinkedIcebreakerQuestion = false;
      this.linkedIcebreakerQuestion_ = null;
      return this;
    }
    
    public Entry clearLocationHistoryReminderEntry()
    {
      this.hasLocationHistoryReminderEntry = false;
      this.locationHistoryReminderEntry_ = null;
      return this;
    }
    
    public Entry clearMoonshineEventTicketEntry()
    {
      this.hasMoonshineEventTicketEntry = false;
      this.moonshineEventTicketEntry_ = null;
      return this;
    }
    
    public Entry clearMovieEntry()
    {
      this.hasMovieEntry = false;
      this.movieEntry_ = null;
      return this;
    }
    
    public Entry clearMovieListEntry()
    {
      this.hasMovieListEntry = false;
      this.movieListEntry_ = null;
      return this;
    }
    
    public Entry clearMovieTicketEntry()
    {
      this.hasMovieTicketEntry = false;
      this.movieTicketEntry_ = null;
      return this;
    }
    
    public Entry clearNearbyPlaceEntry()
    {
      this.hasNearbyPlaceEntry = false;
      this.nearbyPlaceEntry_ = null;
      return this;
    }
    
    public Entry clearNearbyPlacesListEntry()
    {
      this.hasNearbyPlacesListEntry = false;
      this.nearbyPlacesListEntry_ = null;
      return this;
    }
    
    public Entry clearNewsEntry()
    {
      this.hasNewsEntry = false;
      this.newsEntry_ = null;
      return this;
    }
    
    public Entry clearNotification()
    {
      this.hasNotification = false;
      this.notification_ = null;
      return this;
    }
    
    public Entry clearPackageTrackingEntry()
    {
      this.hasPackageTrackingEntry = false;
      this.packageTrackingEntry_ = null;
      return this;
    }
    
    public Entry clearPersonalizedNewsEntry()
    {
      this.hasPersonalizedNewsEntry = false;
      this.personalizedNewsEntry_ = null;
      return this;
    }
    
    public Entry clearPhotoSpotEntry()
    {
      this.hasPhotoSpotEntry = false;
      this.photoSpotEntry_ = null;
      return this;
    }
    
    public Entry clearPrecacheDirective()
    {
      this.precacheDirective_ = Collections.emptyList();
      return this;
    }
    
    public Entry clearPrototypeEntry()
    {
      this.hasPrototypeEntry = false;
      this.prototypeEntry_ = null;
      return this;
    }
    
    public Entry clearPublicAlertEntry()
    {
      this.hasPublicAlertEntry = false;
      this.publicAlertEntry_ = null;
      return this;
    }
    
    public Entry clearRealEstateEntry()
    {
      this.hasRealEstateEntry = false;
      this.realEstateEntry_ = null;
      return this;
    }
    
    public Entry clearReason()
    {
      this.hasReason = false;
      this.reason_ = "";
      return this;
    }
    
    public Entry clearRelevantWebsiteEntry()
    {
      this.hasRelevantWebsiteEntry = false;
      this.relevantWebsiteEntry_ = null;
      return this;
    }
    
    public Entry clearReminderData()
    {
      this.hasReminderData = false;
      this.reminderData_ = null;
      return this;
    }
    
    public Entry clearReminderEntry()
    {
      this.hasReminderEntry = false;
      this.reminderEntry_ = null;
      return this;
    }
    
    public Entry clearResearchPageEntry()
    {
      this.hasResearchPageEntry = false;
      this.researchPageEntry_ = null;
      return this;
    }
    
    public Entry clearResearchTopicEntry()
    {
      this.hasResearchTopicEntry = false;
      this.researchTopicEntry_ = null;
      return this;
    }
    
    public Entry clearRestaurantPlaceEntry()
    {
      this.hasRestaurantPlaceEntry = false;
      this.restaurantPlaceEntry_ = null;
      return this;
    }
    
    public Entry clearSharedTrafficCardEntry()
    {
      this.hasSharedTrafficCardEntry = false;
      this.sharedTrafficCardEntry_ = null;
      return this;
    }
    
    public Entry clearSportScoreEntry()
    {
      this.hasSportScoreEntry = false;
      this.sportScoreEntry_ = null;
      return this;
    }
    
    public Entry clearStockQuoteListEntry()
    {
      this.hasStockQuoteListEntry = false;
      this.stockQuoteListEntry_ = null;
      return this;
    }
    
    public Entry clearThingsToWatchEntry()
    {
      this.hasThingsToWatchEntry = false;
      this.thingsToWatchEntry_ = null;
      return this;
    }
    
    public Entry clearThingsToWatchLureEntry()
    {
      this.hasThingsToWatchLureEntry = false;
      this.thingsToWatchLureEntry_ = null;
      return this;
    }
    
    public Entry clearTimeToLeaveDetails()
    {
      this.hasTimeToLeaveDetails = false;
      this.timeToLeaveDetails_ = null;
      return this;
    }
    
    public Entry clearTrainingQuestionEntry()
    {
      this.hasTrainingQuestionEntry = false;
      this.trainingQuestionEntry_ = null;
      return this;
    }
    
    public Entry clearTrainingQuestionNode()
    {
      this.trainingQuestionNode_ = Collections.emptyList();
      return this;
    }
    
    public Entry clearTransitStationEntry()
    {
      this.hasTransitStationEntry = false;
      this.transitStationEntry_ = null;
      return this;
    }
    
    public Entry clearTranslateEntry()
    {
      this.hasTranslateEntry = false;
      this.translateEntry_ = null;
      return this;
    }
    
    public Entry clearTriggerCondition()
    {
      this.hasTriggerCondition = false;
      this.triggerCondition_ = null;
      return this;
    }
    
    public Entry clearTvEpisodeEntry()
    {
      this.hasTvEpisodeEntry = false;
      this.tvEpisodeEntry_ = null;
      return this;
    }
    
    public Entry clearTvKnowledgeEntry()
    {
      this.hasTvKnowledgeEntry = false;
      this.tvKnowledgeEntry_ = null;
      return this;
    }
    
    public Entry clearTvMusicEntry()
    {
      this.hasTvMusicEntry = false;
      this.tvMusicEntry_ = null;
      return this;
    }
    
    public Entry clearTvNewsEntry()
    {
      this.hasTvNewsEntry = false;
      this.tvNewsEntry_ = null;
      return this;
    }
    
    public Entry clearTvRecognitionEntry()
    {
      this.hasTvRecognitionEntry = false;
      this.tvRecognitionEntry_ = null;
      return this;
    }
    
    public Entry clearType()
    {
      this.hasType = false;
      this.type_ = 48;
      return this;
    }
    
    public Entry clearUserPrompt()
    {
      this.hasUserPrompt = false;
      this.userPrompt_ = "";
      return this;
    }
    
    public Entry clearVideoGameEntry()
    {
      this.hasVideoGameEntry = false;
      this.videoGameEntry_ = null;
      return this;
    }
    
    public Entry clearVisualSearchEntry()
    {
      this.hasVisualSearchEntry = false;
      this.visualSearchEntry_ = null;
      return this;
    }
    
    public Entry clearVisualSearchListEntry()
    {
      this.hasVisualSearchListEntry = false;
      this.visualSearchListEntry_ = null;
      return this;
    }
    
    public Entry clearWalletLoyaltyEntry()
    {
      this.hasWalletLoyaltyEntry = false;
      this.walletLoyaltyEntry_ = null;
      return this;
    }
    
    public Entry clearWalletOfferEntry()
    {
      this.hasWalletOfferEntry = false;
      this.walletOfferEntry_ = null;
      return this;
    }
    
    public Entry clearWeatherEntry()
    {
      this.hasWeatherEntry = false;
      this.weatherEntry_ = null;
      return this;
    }
    
    public Entry clearWebsiteUpdateEntry()
    {
      this.hasWebsiteUpdateEntry = false;
      this.websiteUpdateEntry_ = null;
      return this;
    }
    
    public Entry clearWebsiteUpdateListEntry()
    {
      this.hasWebsiteUpdateListEntry = false;
      this.websiteUpdateListEntry_ = null;
      return this;
    }
    
    public Sidekick.AlbumEntry getAlbumEntry()
    {
      return this.albumEntry_;
    }
    
    public Sidekick.AppSuggestionEntry getAppSuggestionEntry()
    {
      return this.appSuggestionEntry_;
    }
    
    public Sidekick.AttractionListEntry getAttractionListEntry()
    {
      return this.attractionListEntry_;
    }
    
    public Sidekick.BarcodeEntry getBarcodeEntry()
    {
      return this.barcodeEntry_;
    }
    
    public Sidekick.BirthdayCardEntry getBirthdayCardEntry()
    {
      return this.birthdayCardEntry_;
    }
    
    public Sidekick.BookEntry getBookEntry()
    {
      return this.bookEntry_;
    }
    
    public Sidekick.NewsEntry getBreakingNewsEntry()
    {
      return this.breakingNewsEntry_;
    }
    
    public Sidekick.ResearchPageEntry getBrowseModeAuthorStoryEntry()
    {
      return this.browseModeAuthorStoryEntry_;
    }
    
    public Sidekick.BrowseModeEntityEntry getBrowseModeEntityEntry()
    {
      return this.browseModeEntityEntry_;
    }
    
    public Sidekick.ResearchTopicEntry getBrowseModeEntityListEntry()
    {
      return this.browseModeEntityListEntry_;
    }
    
    public Sidekick.ResearchTopicEntry getBrowseModeLureAuthorEntry()
    {
      return this.browseModeLureAuthorEntry_;
    }
    
    public Sidekick.ResearchPageEntry getBrowseModeLureInterestUpdateEntry()
    {
      return this.browseModeLureInterestUpdateEntry_;
    }
    
    public Sidekick.ImageLureCardEntry getBrowseModeLureTravelEntry()
    {
      return this.browseModeLureTravelEntry_;
    }
    
    public Sidekick.BrowseModeVideoEntry getBrowseModeVideoEntry()
    {
      return this.browseModeVideoEntry_;
    }
    
    public Sidekick.ResearchTopicEntry getBrowseModeVideoListEntry()
    {
      return this.browseModeVideoListEntry_;
    }
    
    public Sidekick.ResearchPageEntry getBrowseModeWebLinkEntry()
    {
      return this.browseModeWebLinkEntry_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.CalendarEntry getCalendarEntry()
    {
      return this.calendarEntry_;
    }
    
    public Sidekick.CarRentalEntry getCarRentalEntry()
    {
      return this.carRentalEntry_;
    }
    
    public Sidekick.ClockEntry getClockEntry()
    {
      return this.clockEntry_;
    }
    
    public Sidekick.CurrencyExchangeEntry getCurrencyExchangeEntry()
    {
      return this.currencyExchangeEntry_;
    }
    
    public ByteStringMicro getEncodedEventId()
    {
      return this.encodedEventId_;
    }
    
    public ByteStringMicro getEncodedServerPayload()
    {
      return this.encodedServerPayload_;
    }
    
    public Sidekick.NewsEntry getEntityNewsEntry()
    {
      return this.entityNewsEntry_;
    }
    
    public int getEntryActionCount()
    {
      return this.entryAction_.size();
    }
    
    public List<Sidekick.Action> getEntryActionList()
    {
      return this.entryAction_;
    }
    
    public long getEntryUpdateId()
    {
      return this.entryUpdateId_;
    }
    
    public long getEntryUpdateTimestampMillis()
    {
      return this.entryUpdateTimestampMillis_;
    }
    
    public Sidekick.EventEntry getEventEntry()
    {
      return this.eventEntry_;
    }
    
    public Sidekick.EventListEntry getEventListEntry()
    {
      return this.eventListEntry_;
    }
    
    public Sidekick.FlightStatusEntry getFlightStatusEntry()
    {
      return this.flightStatusEntry_;
    }
    
    public Sidekick.FrequentPlaceEntry getFrequentPlaceEntry()
    {
      return this.frequentPlaceEntry_;
    }
    
    public Sidekick.GenericCardEntry getGenericCardEntry()
    {
      return this.genericCardEntry_;
    }
    
    public Sidekick.GenericTicketCardEntry getGenericTicketCardEntry()
    {
      return this.genericTicketCardEntry_;
    }
    
    public Sidekick.GenericTvProgramEntry getGenericTvProgramEntry()
    {
      return this.genericTvProgramEntry_;
    }
    
    public Sidekick.GmailEntry getGmailEntry()
    {
      return this.gmailEntry_;
    }
    
    public Sidekick.FrequentPlaceEntry getHotelPlaceEntry()
    {
      return this.hotelPlaceEntry_;
    }
    
    public Sidekick.NewsEntry getHyperlocalNewsEntry()
    {
      return this.hyperlocalNewsEntry_;
    }
    
    public boolean getIsExample()
    {
      return this.isExample_;
    }
    
    public Sidekick.FrequentPlaceEntry getLastTrainHomeEntry()
    {
      return this.lastTrainHomeEntry_;
    }
    
    public Sidekick.QuestionNode getLinkedIcebreakerQuestion()
    {
      return this.linkedIcebreakerQuestion_;
    }
    
    public Sidekick.LocationHistoryReminderEntry getLocationHistoryReminderEntry()
    {
      return this.locationHistoryReminderEntry_;
    }
    
    public Sidekick.MoonshineEventTicketEntry getMoonshineEventTicketEntry()
    {
      return this.moonshineEventTicketEntry_;
    }
    
    public Sidekick.MovieEntry getMovieEntry()
    {
      return this.movieEntry_;
    }
    
    public Sidekick.MovieListEntry getMovieListEntry()
    {
      return this.movieListEntry_;
    }
    
    public Sidekick.MovieTicketEntry getMovieTicketEntry()
    {
      return this.movieTicketEntry_;
    }
    
    public Sidekick.FrequentPlaceEntry getNearbyPlaceEntry()
    {
      return this.nearbyPlaceEntry_;
    }
    
    public Sidekick.NearbyPlacesListEntry getNearbyPlacesListEntry()
    {
      return this.nearbyPlacesListEntry_;
    }
    
    public Sidekick.NewsEntry getNewsEntry()
    {
      return this.newsEntry_;
    }
    
    public Sidekick.Notification getNotification()
    {
      return this.notification_;
    }
    
    public Sidekick.PackageTrackingEntry getPackageTrackingEntry()
    {
      return this.packageTrackingEntry_;
    }
    
    public Sidekick.NewsEntry getPersonalizedNewsEntry()
    {
      return this.personalizedNewsEntry_;
    }
    
    public Sidekick.PhotoSpotEntry getPhotoSpotEntry()
    {
      return this.photoSpotEntry_;
    }
    
    public List<Sidekick.PrecacheDirective> getPrecacheDirectiveList()
    {
      return this.precacheDirective_;
    }
    
    public Sidekick.PrototypeEntry getPrototypeEntry()
    {
      return this.prototypeEntry_;
    }
    
    public Sidekick.PublicAlertEntry getPublicAlertEntry()
    {
      return this.publicAlertEntry_;
    }
    
    public Sidekick.RealEstateEntry getRealEstateEntry()
    {
      return this.realEstateEntry_;
    }
    
    public String getReason()
    {
      return this.reason_;
    }
    
    public Sidekick.RelevantWebsiteEntry getRelevantWebsiteEntry()
    {
      return this.relevantWebsiteEntry_;
    }
    
    public Sidekick.ReminderData getReminderData()
    {
      return this.reminderData_;
    }
    
    public Sidekick.ReminderEntry getReminderEntry()
    {
      return this.reminderEntry_;
    }
    
    public Sidekick.ResearchPageEntry getResearchPageEntry()
    {
      return this.researchPageEntry_;
    }
    
    public Sidekick.ResearchTopicEntry getResearchTopicEntry()
    {
      return this.researchTopicEntry_;
    }
    
    public Sidekick.FrequentPlaceEntry getRestaurantPlaceEntry()
    {
      return this.restaurantPlaceEntry_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasFrequentPlaceEntry();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getFrequentPlaceEntry());
      }
      if (hasReason()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getReason());
      }
      Iterator localIterator1 = getEntryActionList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, (Sidekick.Action)localIterator1.next());
      }
      if (hasNotification()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, getNotification());
      }
      if (hasType()) {
        i += CodedOutputStreamMicro.computeInt32Size(8, getType());
      }
      if (hasWeatherEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, getWeatherEntry());
      }
      if (hasCalendarEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(12, getCalendarEntry());
      }
      if (hasTransitStationEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(14, getTransitStationEntry());
      }
      if (hasGenericCardEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(16, getGenericCardEntry());
      }
      if (hasFlightStatusEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(17, getFlightStatusEntry());
      }
      if (hasSportScoreEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(18, getSportScoreEntry());
      }
      if (hasTranslateEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(19, getTranslateEntry());
      }
      if (hasClockEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(20, getClockEntry());
      }
      if (hasCurrencyExchangeEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(21, getCurrencyExchangeEntry());
      }
      if (hasIsExample()) {
        i += CodedOutputStreamMicro.computeBoolSize(22, getIsExample());
      }
      if (hasNearbyPlaceEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(23, getNearbyPlaceEntry());
      }
      if (hasEncodedServerPayload()) {
        i += CodedOutputStreamMicro.computeBytesSize(24, getEncodedServerPayload());
      }
      if (hasPublicAlertEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(25, getPublicAlertEntry());
      }
      if (hasMovieListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(26, getMovieListEntry());
      }
      if (hasStockQuoteListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(27, getStockQuoteListEntry());
      }
      if (hasAttractionListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(28, getAttractionListEntry());
      }
      if (hasPackageTrackingEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(29, getPackageTrackingEntry());
      }
      if (hasNewsEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(30, getNewsEntry());
      }
      if (hasLocationHistoryReminderEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(31, getLocationHistoryReminderEntry());
      }
      if (hasPhotoSpotEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(32, getPhotoSpotEntry());
      }
      Iterator localIterator2 = getPrecacheDirectiveList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(33, (Sidekick.PrecacheDirective)localIterator2.next());
      }
      if (hasBirthdayCardEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(34, getBirthdayCardEntry());
      }
      if (hasMovieEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(35, getMovieEntry());
      }
      if (hasEventEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(36, getEventEntry());
      }
      if (hasResearchTopicEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(37, getResearchTopicEntry());
      }
      if (hasResearchPageEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(38, getResearchPageEntry());
      }
      if (hasBarcodeEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(39, getBarcodeEntry());
      }
      if (hasGmailEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(40, getGmailEntry());
      }
      if (hasVisualSearchListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(41, getVisualSearchListEntry());
      }
      if (hasVisualSearchEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(42, getVisualSearchEntry());
      }
      if (hasNearbyPlacesListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(43, getNearbyPlacesListEntry());
      }
      if (hasEventListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(44, getEventListEntry());
      }
      if (hasUserPrompt()) {
        i += CodedOutputStreamMicro.computeStringSize(45, getUserPrompt());
      }
      if (hasMovieTicketEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(46, getMovieTicketEntry());
      }
      if (hasRealEstateEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(47, getRealEstateEntry());
      }
      if (hasReminderEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(48, getReminderEntry());
      }
      if (hasWebsiteUpdateEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(49, getWebsiteUpdateEntry());
      }
      if (hasWebsiteUpdateListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(50, getWebsiteUpdateListEntry());
      }
      if (hasGenericTicketCardEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(51, getGenericTicketCardEntry());
      }
      if (hasBookEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(52, getBookEntry());
      }
      if (hasAlbumEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(53, getAlbumEntry());
      }
      if (hasVideoGameEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(54, getVideoGameEntry());
      }
      if (hasTvEpisodeEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(55, getTvEpisodeEntry());
      }
      if (hasSharedTrafficCardEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(56, getSharedTrafficCardEntry());
      }
      if (hasRelevantWebsiteEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(57, getRelevantWebsiteEntry());
      }
      if (hasLastTrainHomeEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(58, getLastTrainHomeEntry());
      }
      if (hasBreakingNewsEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(59, getBreakingNewsEntry());
      }
      if (hasHyperlocalNewsEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(60, getHyperlocalNewsEntry());
      }
      if (hasWalletOfferEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(61, getWalletOfferEntry());
      }
      if (hasWalletLoyaltyEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(62, getWalletLoyaltyEntry());
      }
      if (hasHotelPlaceEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(63, getHotelPlaceEntry());
      }
      if (hasRestaurantPlaceEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(64, getRestaurantPlaceEntry());
      }
      if (hasCarRentalEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(65, getCarRentalEntry());
      }
      if (hasMoonshineEventTicketEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(66, getMoonshineEventTicketEntry());
      }
      if (hasTvRecognitionEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(67, getTvRecognitionEntry());
      }
      if (hasGenericTvProgramEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(68, getGenericTvProgramEntry());
      }
      if (hasReminderData()) {
        i += CodedOutputStreamMicro.computeMessageSize(69, getReminderData());
      }
      if (hasTrainingQuestionEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(70, getTrainingQuestionEntry());
      }
      Iterator localIterator3 = getTrainingQuestionNodeList().iterator();
      while (localIterator3.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(71, (Sidekick.QuestionNode)localIterator3.next());
      }
      if (hasEntryUpdateId()) {
        i += CodedOutputStreamMicro.computeInt64Size(72, getEntryUpdateId());
      }
      if (hasTvNewsEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(73, getTvNewsEntry());
      }
      if (hasTvMusicEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(74, getTvMusicEntry());
      }
      if (hasTvKnowledgeEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(75, getTvKnowledgeEntry());
      }
      if (hasEntryUpdateTimestampMillis()) {
        i += CodedOutputStreamMicro.computeInt64Size(76, getEntryUpdateTimestampMillis());
      }
      if (hasPrototypeEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(77, getPrototypeEntry());
      }
      if (hasEntityNewsEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(78, getEntityNewsEntry());
      }
      if (hasTriggerCondition()) {
        i += CodedOutputStreamMicro.computeMessageSize(79, getTriggerCondition());
      }
      if (hasBrowseModeLureInterestUpdateEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(80, getBrowseModeLureInterestUpdateEntry());
      }
      if (hasBrowseModeLureTravelEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(81, getBrowseModeLureTravelEntry());
      }
      if (hasBrowseModeLureAuthorEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(82, getBrowseModeLureAuthorEntry());
      }
      if (hasThingsToWatchEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(83, getThingsToWatchEntry());
      }
      if (hasBrowseModeWebLinkEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(84, getBrowseModeWebLinkEntry());
      }
      if (hasTimeToLeaveDetails()) {
        i += CodedOutputStreamMicro.computeMessageSize(85, getTimeToLeaveDetails());
      }
      if (hasBrowseModeEntityListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(86, getBrowseModeEntityListEntry());
      }
      if (hasBrowseModeEntityEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(87, getBrowseModeEntityEntry());
      }
      if (hasBrowseModeVideoListEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(88, getBrowseModeVideoListEntry());
      }
      if (hasBrowseModeVideoEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(89, getBrowseModeVideoEntry());
      }
      if (hasAppSuggestionEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(90, getAppSuggestionEntry());
      }
      if (hasBrowseModeAuthorStoryEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(91, getBrowseModeAuthorStoryEntry());
      }
      if (hasThingsToWatchLureEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(92, getThingsToWatchLureEntry());
      }
      if (hasPersonalizedNewsEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(93, getPersonalizedNewsEntry());
      }
      if (hasLinkedIcebreakerQuestion()) {
        i += CodedOutputStreamMicro.computeMessageSize(94, getLinkedIcebreakerQuestion());
      }
      if (hasEncodedEventId()) {
        i += CodedOutputStreamMicro.computeBytesSize(95, getEncodedEventId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.SharedTrafficCardEntry getSharedTrafficCardEntry()
    {
      return this.sharedTrafficCardEntry_;
    }
    
    public Sidekick.SportScoreEntry getSportScoreEntry()
    {
      return this.sportScoreEntry_;
    }
    
    public Sidekick.StockQuoteListEntry getStockQuoteListEntry()
    {
      return this.stockQuoteListEntry_;
    }
    
    public Sidekick.ThingsToWatchEntry getThingsToWatchEntry()
    {
      return this.thingsToWatchEntry_;
    }
    
    public Sidekick.ImageLureCardEntry getThingsToWatchLureEntry()
    {
      return this.thingsToWatchLureEntry_;
    }
    
    public Sidekick.TimeToLeaveDetails getTimeToLeaveDetails()
    {
      return this.timeToLeaveDetails_;
    }
    
    public Sidekick.QuestionEntry getTrainingQuestionEntry()
    {
      return this.trainingQuestionEntry_;
    }
    
    public int getTrainingQuestionNodeCount()
    {
      return this.trainingQuestionNode_.size();
    }
    
    public List<Sidekick.QuestionNode> getTrainingQuestionNodeList()
    {
      return this.trainingQuestionNode_;
    }
    
    public Sidekick.TransitStationEntry getTransitStationEntry()
    {
      return this.transitStationEntry_;
    }
    
    public Sidekick.TranslateEntry getTranslateEntry()
    {
      return this.translateEntry_;
    }
    
    public Sidekick.TriggerCondition getTriggerCondition()
    {
      return this.triggerCondition_;
    }
    
    public Sidekick.TvEpisodeEntry getTvEpisodeEntry()
    {
      return this.tvEpisodeEntry_;
    }
    
    public Sidekick.TvKnowledgeEntry getTvKnowledgeEntry()
    {
      return this.tvKnowledgeEntry_;
    }
    
    public Sidekick.TvMusicEntry getTvMusicEntry()
    {
      return this.tvMusicEntry_;
    }
    
    public Sidekick.TvNewsEntry getTvNewsEntry()
    {
      return this.tvNewsEntry_;
    }
    
    public Sidekick.TvRecognitionEntry getTvRecognitionEntry()
    {
      return this.tvRecognitionEntry_;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public String getUserPrompt()
    {
      return this.userPrompt_;
    }
    
    public Sidekick.VideoGameEntry getVideoGameEntry()
    {
      return this.videoGameEntry_;
    }
    
    public Sidekick.FrequentPlaceEntry getVisualSearchEntry()
    {
      return this.visualSearchEntry_;
    }
    
    public Sidekick.GenericCardEntry getVisualSearchListEntry()
    {
      return this.visualSearchListEntry_;
    }
    
    public Sidekick.WalletLoyaltyEntry getWalletLoyaltyEntry()
    {
      return this.walletLoyaltyEntry_;
    }
    
    public Sidekick.WalletOfferEntry getWalletOfferEntry()
    {
      return this.walletOfferEntry_;
    }
    
    public Sidekick.WeatherEntry getWeatherEntry()
    {
      return this.weatherEntry_;
    }
    
    public Sidekick.WebsiteUpdateEntry getWebsiteUpdateEntry()
    {
      return this.websiteUpdateEntry_;
    }
    
    public Sidekick.WebsiteUpdateListEntry getWebsiteUpdateListEntry()
    {
      return this.websiteUpdateListEntry_;
    }
    
    public boolean hasAlbumEntry()
    {
      return this.hasAlbumEntry;
    }
    
    public boolean hasAppSuggestionEntry()
    {
      return this.hasAppSuggestionEntry;
    }
    
    public boolean hasAttractionListEntry()
    {
      return this.hasAttractionListEntry;
    }
    
    public boolean hasBarcodeEntry()
    {
      return this.hasBarcodeEntry;
    }
    
    public boolean hasBirthdayCardEntry()
    {
      return this.hasBirthdayCardEntry;
    }
    
    public boolean hasBookEntry()
    {
      return this.hasBookEntry;
    }
    
    public boolean hasBreakingNewsEntry()
    {
      return this.hasBreakingNewsEntry;
    }
    
    public boolean hasBrowseModeAuthorStoryEntry()
    {
      return this.hasBrowseModeAuthorStoryEntry;
    }
    
    public boolean hasBrowseModeEntityEntry()
    {
      return this.hasBrowseModeEntityEntry;
    }
    
    public boolean hasBrowseModeEntityListEntry()
    {
      return this.hasBrowseModeEntityListEntry;
    }
    
    public boolean hasBrowseModeLureAuthorEntry()
    {
      return this.hasBrowseModeLureAuthorEntry;
    }
    
    public boolean hasBrowseModeLureInterestUpdateEntry()
    {
      return this.hasBrowseModeLureInterestUpdateEntry;
    }
    
    public boolean hasBrowseModeLureTravelEntry()
    {
      return this.hasBrowseModeLureTravelEntry;
    }
    
    public boolean hasBrowseModeVideoEntry()
    {
      return this.hasBrowseModeVideoEntry;
    }
    
    public boolean hasBrowseModeVideoListEntry()
    {
      return this.hasBrowseModeVideoListEntry;
    }
    
    public boolean hasBrowseModeWebLinkEntry()
    {
      return this.hasBrowseModeWebLinkEntry;
    }
    
    public boolean hasCalendarEntry()
    {
      return this.hasCalendarEntry;
    }
    
    public boolean hasCarRentalEntry()
    {
      return this.hasCarRentalEntry;
    }
    
    public boolean hasClockEntry()
    {
      return this.hasClockEntry;
    }
    
    public boolean hasCurrencyExchangeEntry()
    {
      return this.hasCurrencyExchangeEntry;
    }
    
    public boolean hasEncodedEventId()
    {
      return this.hasEncodedEventId;
    }
    
    public boolean hasEncodedServerPayload()
    {
      return this.hasEncodedServerPayload;
    }
    
    public boolean hasEntityNewsEntry()
    {
      return this.hasEntityNewsEntry;
    }
    
    public boolean hasEntryUpdateId()
    {
      return this.hasEntryUpdateId;
    }
    
    public boolean hasEntryUpdateTimestampMillis()
    {
      return this.hasEntryUpdateTimestampMillis;
    }
    
    public boolean hasEventEntry()
    {
      return this.hasEventEntry;
    }
    
    public boolean hasEventListEntry()
    {
      return this.hasEventListEntry;
    }
    
    public boolean hasFlightStatusEntry()
    {
      return this.hasFlightStatusEntry;
    }
    
    public boolean hasFrequentPlaceEntry()
    {
      return this.hasFrequentPlaceEntry;
    }
    
    public boolean hasGenericCardEntry()
    {
      return this.hasGenericCardEntry;
    }
    
    public boolean hasGenericTicketCardEntry()
    {
      return this.hasGenericTicketCardEntry;
    }
    
    public boolean hasGenericTvProgramEntry()
    {
      return this.hasGenericTvProgramEntry;
    }
    
    public boolean hasGmailEntry()
    {
      return this.hasGmailEntry;
    }
    
    public boolean hasHotelPlaceEntry()
    {
      return this.hasHotelPlaceEntry;
    }
    
    public boolean hasHyperlocalNewsEntry()
    {
      return this.hasHyperlocalNewsEntry;
    }
    
    public boolean hasIsExample()
    {
      return this.hasIsExample;
    }
    
    public boolean hasLastTrainHomeEntry()
    {
      return this.hasLastTrainHomeEntry;
    }
    
    public boolean hasLinkedIcebreakerQuestion()
    {
      return this.hasLinkedIcebreakerQuestion;
    }
    
    public boolean hasLocationHistoryReminderEntry()
    {
      return this.hasLocationHistoryReminderEntry;
    }
    
    public boolean hasMoonshineEventTicketEntry()
    {
      return this.hasMoonshineEventTicketEntry;
    }
    
    public boolean hasMovieEntry()
    {
      return this.hasMovieEntry;
    }
    
    public boolean hasMovieListEntry()
    {
      return this.hasMovieListEntry;
    }
    
    public boolean hasMovieTicketEntry()
    {
      return this.hasMovieTicketEntry;
    }
    
    public boolean hasNearbyPlaceEntry()
    {
      return this.hasNearbyPlaceEntry;
    }
    
    public boolean hasNearbyPlacesListEntry()
    {
      return this.hasNearbyPlacesListEntry;
    }
    
    public boolean hasNewsEntry()
    {
      return this.hasNewsEntry;
    }
    
    public boolean hasNotification()
    {
      return this.hasNotification;
    }
    
    public boolean hasPackageTrackingEntry()
    {
      return this.hasPackageTrackingEntry;
    }
    
    public boolean hasPersonalizedNewsEntry()
    {
      return this.hasPersonalizedNewsEntry;
    }
    
    public boolean hasPhotoSpotEntry()
    {
      return this.hasPhotoSpotEntry;
    }
    
    public boolean hasPrototypeEntry()
    {
      return this.hasPrototypeEntry;
    }
    
    public boolean hasPublicAlertEntry()
    {
      return this.hasPublicAlertEntry;
    }
    
    public boolean hasRealEstateEntry()
    {
      return this.hasRealEstateEntry;
    }
    
    public boolean hasReason()
    {
      return this.hasReason;
    }
    
    public boolean hasRelevantWebsiteEntry()
    {
      return this.hasRelevantWebsiteEntry;
    }
    
    public boolean hasReminderData()
    {
      return this.hasReminderData;
    }
    
    public boolean hasReminderEntry()
    {
      return this.hasReminderEntry;
    }
    
    public boolean hasResearchPageEntry()
    {
      return this.hasResearchPageEntry;
    }
    
    public boolean hasResearchTopicEntry()
    {
      return this.hasResearchTopicEntry;
    }
    
    public boolean hasRestaurantPlaceEntry()
    {
      return this.hasRestaurantPlaceEntry;
    }
    
    public boolean hasSharedTrafficCardEntry()
    {
      return this.hasSharedTrafficCardEntry;
    }
    
    public boolean hasSportScoreEntry()
    {
      return this.hasSportScoreEntry;
    }
    
    public boolean hasStockQuoteListEntry()
    {
      return this.hasStockQuoteListEntry;
    }
    
    public boolean hasThingsToWatchEntry()
    {
      return this.hasThingsToWatchEntry;
    }
    
    public boolean hasThingsToWatchLureEntry()
    {
      return this.hasThingsToWatchLureEntry;
    }
    
    public boolean hasTimeToLeaveDetails()
    {
      return this.hasTimeToLeaveDetails;
    }
    
    public boolean hasTrainingQuestionEntry()
    {
      return this.hasTrainingQuestionEntry;
    }
    
    public boolean hasTransitStationEntry()
    {
      return this.hasTransitStationEntry;
    }
    
    public boolean hasTranslateEntry()
    {
      return this.hasTranslateEntry;
    }
    
    public boolean hasTriggerCondition()
    {
      return this.hasTriggerCondition;
    }
    
    public boolean hasTvEpisodeEntry()
    {
      return this.hasTvEpisodeEntry;
    }
    
    public boolean hasTvKnowledgeEntry()
    {
      return this.hasTvKnowledgeEntry;
    }
    
    public boolean hasTvMusicEntry()
    {
      return this.hasTvMusicEntry;
    }
    
    public boolean hasTvNewsEntry()
    {
      return this.hasTvNewsEntry;
    }
    
    public boolean hasTvRecognitionEntry()
    {
      return this.hasTvRecognitionEntry;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public boolean hasUserPrompt()
    {
      return this.hasUserPrompt;
    }
    
    public boolean hasVideoGameEntry()
    {
      return this.hasVideoGameEntry;
    }
    
    public boolean hasVisualSearchEntry()
    {
      return this.hasVisualSearchEntry;
    }
    
    public boolean hasVisualSearchListEntry()
    {
      return this.hasVisualSearchListEntry;
    }
    
    public boolean hasWalletLoyaltyEntry()
    {
      return this.hasWalletLoyaltyEntry;
    }
    
    public boolean hasWalletOfferEntry()
    {
      return this.hasWalletOfferEntry;
    }
    
    public boolean hasWeatherEntry()
    {
      return this.hasWeatherEntry;
    }
    
    public boolean hasWebsiteUpdateEntry()
    {
      return this.hasWebsiteUpdateEntry;
    }
    
    public boolean hasWebsiteUpdateListEntry()
    {
      return this.hasWebsiteUpdateListEntry;
    }
    
    public Entry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.FrequentPlaceEntry localFrequentPlaceEntry6 = new Sidekick.FrequentPlaceEntry();
          paramCodedInputStreamMicro.readMessage(localFrequentPlaceEntry6);
          setFrequentPlaceEntry(localFrequentPlaceEntry6);
          break;
        case 42: 
          setReason(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          Sidekick.Action localAction = new Sidekick.Action();
          paramCodedInputStreamMicro.readMessage(localAction);
          addEntryAction(localAction);
          break;
        case 58: 
          Sidekick.Notification localNotification = new Sidekick.Notification();
          paramCodedInputStreamMicro.readMessage(localNotification);
          setNotification(localNotification);
          break;
        case 64: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        case 90: 
          Sidekick.WeatherEntry localWeatherEntry = new Sidekick.WeatherEntry();
          paramCodedInputStreamMicro.readMessage(localWeatherEntry);
          setWeatherEntry(localWeatherEntry);
          break;
        case 98: 
          Sidekick.CalendarEntry localCalendarEntry = new Sidekick.CalendarEntry();
          paramCodedInputStreamMicro.readMessage(localCalendarEntry);
          setCalendarEntry(localCalendarEntry);
          break;
        case 114: 
          Sidekick.TransitStationEntry localTransitStationEntry = new Sidekick.TransitStationEntry();
          paramCodedInputStreamMicro.readMessage(localTransitStationEntry);
          setTransitStationEntry(localTransitStationEntry);
          break;
        case 130: 
          Sidekick.GenericCardEntry localGenericCardEntry2 = new Sidekick.GenericCardEntry();
          paramCodedInputStreamMicro.readMessage(localGenericCardEntry2);
          setGenericCardEntry(localGenericCardEntry2);
          break;
        case 138: 
          Sidekick.FlightStatusEntry localFlightStatusEntry = new Sidekick.FlightStatusEntry();
          paramCodedInputStreamMicro.readMessage(localFlightStatusEntry);
          setFlightStatusEntry(localFlightStatusEntry);
          break;
        case 146: 
          Sidekick.SportScoreEntry localSportScoreEntry = new Sidekick.SportScoreEntry();
          paramCodedInputStreamMicro.readMessage(localSportScoreEntry);
          setSportScoreEntry(localSportScoreEntry);
          break;
        case 154: 
          Sidekick.TranslateEntry localTranslateEntry = new Sidekick.TranslateEntry();
          paramCodedInputStreamMicro.readMessage(localTranslateEntry);
          setTranslateEntry(localTranslateEntry);
          break;
        case 162: 
          Sidekick.ClockEntry localClockEntry = new Sidekick.ClockEntry();
          paramCodedInputStreamMicro.readMessage(localClockEntry);
          setClockEntry(localClockEntry);
          break;
        case 170: 
          Sidekick.CurrencyExchangeEntry localCurrencyExchangeEntry = new Sidekick.CurrencyExchangeEntry();
          paramCodedInputStreamMicro.readMessage(localCurrencyExchangeEntry);
          setCurrencyExchangeEntry(localCurrencyExchangeEntry);
          break;
        case 176: 
          setIsExample(paramCodedInputStreamMicro.readBool());
          break;
        case 186: 
          Sidekick.FrequentPlaceEntry localFrequentPlaceEntry5 = new Sidekick.FrequentPlaceEntry();
          paramCodedInputStreamMicro.readMessage(localFrequentPlaceEntry5);
          setNearbyPlaceEntry(localFrequentPlaceEntry5);
          break;
        case 194: 
          setEncodedServerPayload(paramCodedInputStreamMicro.readBytes());
          break;
        case 202: 
          Sidekick.PublicAlertEntry localPublicAlertEntry = new Sidekick.PublicAlertEntry();
          paramCodedInputStreamMicro.readMessage(localPublicAlertEntry);
          setPublicAlertEntry(localPublicAlertEntry);
          break;
        case 210: 
          Sidekick.MovieListEntry localMovieListEntry = new Sidekick.MovieListEntry();
          paramCodedInputStreamMicro.readMessage(localMovieListEntry);
          setMovieListEntry(localMovieListEntry);
          break;
        case 218: 
          Sidekick.StockQuoteListEntry localStockQuoteListEntry = new Sidekick.StockQuoteListEntry();
          paramCodedInputStreamMicro.readMessage(localStockQuoteListEntry);
          setStockQuoteListEntry(localStockQuoteListEntry);
          break;
        case 226: 
          Sidekick.AttractionListEntry localAttractionListEntry = new Sidekick.AttractionListEntry();
          paramCodedInputStreamMicro.readMessage(localAttractionListEntry);
          setAttractionListEntry(localAttractionListEntry);
          break;
        case 234: 
          Sidekick.PackageTrackingEntry localPackageTrackingEntry = new Sidekick.PackageTrackingEntry();
          paramCodedInputStreamMicro.readMessage(localPackageTrackingEntry);
          setPackageTrackingEntry(localPackageTrackingEntry);
          break;
        case 242: 
          Sidekick.NewsEntry localNewsEntry5 = new Sidekick.NewsEntry();
          paramCodedInputStreamMicro.readMessage(localNewsEntry5);
          setNewsEntry(localNewsEntry5);
          break;
        case 250: 
          Sidekick.LocationHistoryReminderEntry localLocationHistoryReminderEntry = new Sidekick.LocationHistoryReminderEntry();
          paramCodedInputStreamMicro.readMessage(localLocationHistoryReminderEntry);
          setLocationHistoryReminderEntry(localLocationHistoryReminderEntry);
          break;
        case 258: 
          Sidekick.PhotoSpotEntry localPhotoSpotEntry = new Sidekick.PhotoSpotEntry();
          paramCodedInputStreamMicro.readMessage(localPhotoSpotEntry);
          setPhotoSpotEntry(localPhotoSpotEntry);
          break;
        case 266: 
          Sidekick.PrecacheDirective localPrecacheDirective = new Sidekick.PrecacheDirective();
          paramCodedInputStreamMicro.readMessage(localPrecacheDirective);
          addPrecacheDirective(localPrecacheDirective);
          break;
        case 274: 
          Sidekick.BirthdayCardEntry localBirthdayCardEntry = new Sidekick.BirthdayCardEntry();
          paramCodedInputStreamMicro.readMessage(localBirthdayCardEntry);
          setBirthdayCardEntry(localBirthdayCardEntry);
          break;
        case 282: 
          Sidekick.MovieEntry localMovieEntry = new Sidekick.MovieEntry();
          paramCodedInputStreamMicro.readMessage(localMovieEntry);
          setMovieEntry(localMovieEntry);
          break;
        case 290: 
          Sidekick.EventEntry localEventEntry = new Sidekick.EventEntry();
          paramCodedInputStreamMicro.readMessage(localEventEntry);
          setEventEntry(localEventEntry);
          break;
        case 298: 
          Sidekick.ResearchTopicEntry localResearchTopicEntry4 = new Sidekick.ResearchTopicEntry();
          paramCodedInputStreamMicro.readMessage(localResearchTopicEntry4);
          setResearchTopicEntry(localResearchTopicEntry4);
          break;
        case 306: 
          Sidekick.ResearchPageEntry localResearchPageEntry4 = new Sidekick.ResearchPageEntry();
          paramCodedInputStreamMicro.readMessage(localResearchPageEntry4);
          setResearchPageEntry(localResearchPageEntry4);
          break;
        case 314: 
          Sidekick.BarcodeEntry localBarcodeEntry = new Sidekick.BarcodeEntry();
          paramCodedInputStreamMicro.readMessage(localBarcodeEntry);
          setBarcodeEntry(localBarcodeEntry);
          break;
        case 322: 
          Sidekick.GmailEntry localGmailEntry = new Sidekick.GmailEntry();
          paramCodedInputStreamMicro.readMessage(localGmailEntry);
          setGmailEntry(localGmailEntry);
          break;
        case 330: 
          Sidekick.GenericCardEntry localGenericCardEntry1 = new Sidekick.GenericCardEntry();
          paramCodedInputStreamMicro.readMessage(localGenericCardEntry1);
          setVisualSearchListEntry(localGenericCardEntry1);
          break;
        case 338: 
          Sidekick.FrequentPlaceEntry localFrequentPlaceEntry4 = new Sidekick.FrequentPlaceEntry();
          paramCodedInputStreamMicro.readMessage(localFrequentPlaceEntry4);
          setVisualSearchEntry(localFrequentPlaceEntry4);
          break;
        case 346: 
          Sidekick.NearbyPlacesListEntry localNearbyPlacesListEntry = new Sidekick.NearbyPlacesListEntry();
          paramCodedInputStreamMicro.readMessage(localNearbyPlacesListEntry);
          setNearbyPlacesListEntry(localNearbyPlacesListEntry);
          break;
        case 354: 
          Sidekick.EventListEntry localEventListEntry = new Sidekick.EventListEntry();
          paramCodedInputStreamMicro.readMessage(localEventListEntry);
          setEventListEntry(localEventListEntry);
          break;
        case 362: 
          setUserPrompt(paramCodedInputStreamMicro.readString());
          break;
        case 370: 
          Sidekick.MovieTicketEntry localMovieTicketEntry = new Sidekick.MovieTicketEntry();
          paramCodedInputStreamMicro.readMessage(localMovieTicketEntry);
          setMovieTicketEntry(localMovieTicketEntry);
          break;
        case 378: 
          Sidekick.RealEstateEntry localRealEstateEntry = new Sidekick.RealEstateEntry();
          paramCodedInputStreamMicro.readMessage(localRealEstateEntry);
          setRealEstateEntry(localRealEstateEntry);
          break;
        case 386: 
          Sidekick.ReminderEntry localReminderEntry = new Sidekick.ReminderEntry();
          paramCodedInputStreamMicro.readMessage(localReminderEntry);
          setReminderEntry(localReminderEntry);
          break;
        case 394: 
          Sidekick.WebsiteUpdateEntry localWebsiteUpdateEntry = new Sidekick.WebsiteUpdateEntry();
          paramCodedInputStreamMicro.readMessage(localWebsiteUpdateEntry);
          setWebsiteUpdateEntry(localWebsiteUpdateEntry);
          break;
        case 402: 
          Sidekick.WebsiteUpdateListEntry localWebsiteUpdateListEntry = new Sidekick.WebsiteUpdateListEntry();
          paramCodedInputStreamMicro.readMessage(localWebsiteUpdateListEntry);
          setWebsiteUpdateListEntry(localWebsiteUpdateListEntry);
          break;
        case 410: 
          Sidekick.GenericTicketCardEntry localGenericTicketCardEntry = new Sidekick.GenericTicketCardEntry();
          paramCodedInputStreamMicro.readMessage(localGenericTicketCardEntry);
          setGenericTicketCardEntry(localGenericTicketCardEntry);
          break;
        case 418: 
          Sidekick.BookEntry localBookEntry = new Sidekick.BookEntry();
          paramCodedInputStreamMicro.readMessage(localBookEntry);
          setBookEntry(localBookEntry);
          break;
        case 426: 
          Sidekick.AlbumEntry localAlbumEntry = new Sidekick.AlbumEntry();
          paramCodedInputStreamMicro.readMessage(localAlbumEntry);
          setAlbumEntry(localAlbumEntry);
          break;
        case 434: 
          Sidekick.VideoGameEntry localVideoGameEntry = new Sidekick.VideoGameEntry();
          paramCodedInputStreamMicro.readMessage(localVideoGameEntry);
          setVideoGameEntry(localVideoGameEntry);
          break;
        case 442: 
          Sidekick.TvEpisodeEntry localTvEpisodeEntry = new Sidekick.TvEpisodeEntry();
          paramCodedInputStreamMicro.readMessage(localTvEpisodeEntry);
          setTvEpisodeEntry(localTvEpisodeEntry);
          break;
        case 450: 
          Sidekick.SharedTrafficCardEntry localSharedTrafficCardEntry = new Sidekick.SharedTrafficCardEntry();
          paramCodedInputStreamMicro.readMessage(localSharedTrafficCardEntry);
          setSharedTrafficCardEntry(localSharedTrafficCardEntry);
          break;
        case 458: 
          Sidekick.RelevantWebsiteEntry localRelevantWebsiteEntry = new Sidekick.RelevantWebsiteEntry();
          paramCodedInputStreamMicro.readMessage(localRelevantWebsiteEntry);
          setRelevantWebsiteEntry(localRelevantWebsiteEntry);
          break;
        case 466: 
          Sidekick.FrequentPlaceEntry localFrequentPlaceEntry3 = new Sidekick.FrequentPlaceEntry();
          paramCodedInputStreamMicro.readMessage(localFrequentPlaceEntry3);
          setLastTrainHomeEntry(localFrequentPlaceEntry3);
          break;
        case 474: 
          Sidekick.NewsEntry localNewsEntry4 = new Sidekick.NewsEntry();
          paramCodedInputStreamMicro.readMessage(localNewsEntry4);
          setBreakingNewsEntry(localNewsEntry4);
          break;
        case 482: 
          Sidekick.NewsEntry localNewsEntry3 = new Sidekick.NewsEntry();
          paramCodedInputStreamMicro.readMessage(localNewsEntry3);
          setHyperlocalNewsEntry(localNewsEntry3);
          break;
        case 490: 
          Sidekick.WalletOfferEntry localWalletOfferEntry = new Sidekick.WalletOfferEntry();
          paramCodedInputStreamMicro.readMessage(localWalletOfferEntry);
          setWalletOfferEntry(localWalletOfferEntry);
          break;
        case 498: 
          Sidekick.WalletLoyaltyEntry localWalletLoyaltyEntry = new Sidekick.WalletLoyaltyEntry();
          paramCodedInputStreamMicro.readMessage(localWalletLoyaltyEntry);
          setWalletLoyaltyEntry(localWalletLoyaltyEntry);
          break;
        case 506: 
          Sidekick.FrequentPlaceEntry localFrequentPlaceEntry2 = new Sidekick.FrequentPlaceEntry();
          paramCodedInputStreamMicro.readMessage(localFrequentPlaceEntry2);
          setHotelPlaceEntry(localFrequentPlaceEntry2);
          break;
        case 514: 
          Sidekick.FrequentPlaceEntry localFrequentPlaceEntry1 = new Sidekick.FrequentPlaceEntry();
          paramCodedInputStreamMicro.readMessage(localFrequentPlaceEntry1);
          setRestaurantPlaceEntry(localFrequentPlaceEntry1);
          break;
        case 522: 
          Sidekick.CarRentalEntry localCarRentalEntry = new Sidekick.CarRentalEntry();
          paramCodedInputStreamMicro.readMessage(localCarRentalEntry);
          setCarRentalEntry(localCarRentalEntry);
          break;
        case 530: 
          Sidekick.MoonshineEventTicketEntry localMoonshineEventTicketEntry = new Sidekick.MoonshineEventTicketEntry();
          paramCodedInputStreamMicro.readMessage(localMoonshineEventTicketEntry);
          setMoonshineEventTicketEntry(localMoonshineEventTicketEntry);
          break;
        case 538: 
          Sidekick.TvRecognitionEntry localTvRecognitionEntry = new Sidekick.TvRecognitionEntry();
          paramCodedInputStreamMicro.readMessage(localTvRecognitionEntry);
          setTvRecognitionEntry(localTvRecognitionEntry);
          break;
        case 546: 
          Sidekick.GenericTvProgramEntry localGenericTvProgramEntry = new Sidekick.GenericTvProgramEntry();
          paramCodedInputStreamMicro.readMessage(localGenericTvProgramEntry);
          setGenericTvProgramEntry(localGenericTvProgramEntry);
          break;
        case 554: 
          Sidekick.ReminderData localReminderData = new Sidekick.ReminderData();
          paramCodedInputStreamMicro.readMessage(localReminderData);
          setReminderData(localReminderData);
          break;
        case 562: 
          Sidekick.QuestionEntry localQuestionEntry = new Sidekick.QuestionEntry();
          paramCodedInputStreamMicro.readMessage(localQuestionEntry);
          setTrainingQuestionEntry(localQuestionEntry);
          break;
        case 570: 
          Sidekick.QuestionNode localQuestionNode2 = new Sidekick.QuestionNode();
          paramCodedInputStreamMicro.readMessage(localQuestionNode2);
          addTrainingQuestionNode(localQuestionNode2);
          break;
        case 576: 
          setEntryUpdateId(paramCodedInputStreamMicro.readInt64());
          break;
        case 586: 
          Sidekick.TvNewsEntry localTvNewsEntry = new Sidekick.TvNewsEntry();
          paramCodedInputStreamMicro.readMessage(localTvNewsEntry);
          setTvNewsEntry(localTvNewsEntry);
          break;
        case 594: 
          Sidekick.TvMusicEntry localTvMusicEntry = new Sidekick.TvMusicEntry();
          paramCodedInputStreamMicro.readMessage(localTvMusicEntry);
          setTvMusicEntry(localTvMusicEntry);
          break;
        case 602: 
          Sidekick.TvKnowledgeEntry localTvKnowledgeEntry = new Sidekick.TvKnowledgeEntry();
          paramCodedInputStreamMicro.readMessage(localTvKnowledgeEntry);
          setTvKnowledgeEntry(localTvKnowledgeEntry);
          break;
        case 608: 
          setEntryUpdateTimestampMillis(paramCodedInputStreamMicro.readInt64());
          break;
        case 618: 
          Sidekick.PrototypeEntry localPrototypeEntry = new Sidekick.PrototypeEntry();
          paramCodedInputStreamMicro.readMessage(localPrototypeEntry);
          setPrototypeEntry(localPrototypeEntry);
          break;
        case 626: 
          Sidekick.NewsEntry localNewsEntry2 = new Sidekick.NewsEntry();
          paramCodedInputStreamMicro.readMessage(localNewsEntry2);
          setEntityNewsEntry(localNewsEntry2);
          break;
        case 634: 
          Sidekick.TriggerCondition localTriggerCondition = new Sidekick.TriggerCondition();
          paramCodedInputStreamMicro.readMessage(localTriggerCondition);
          setTriggerCondition(localTriggerCondition);
          break;
        case 642: 
          Sidekick.ResearchPageEntry localResearchPageEntry3 = new Sidekick.ResearchPageEntry();
          paramCodedInputStreamMicro.readMessage(localResearchPageEntry3);
          setBrowseModeLureInterestUpdateEntry(localResearchPageEntry3);
          break;
        case 650: 
          Sidekick.ImageLureCardEntry localImageLureCardEntry2 = new Sidekick.ImageLureCardEntry();
          paramCodedInputStreamMicro.readMessage(localImageLureCardEntry2);
          setBrowseModeLureTravelEntry(localImageLureCardEntry2);
          break;
        case 658: 
          Sidekick.ResearchTopicEntry localResearchTopicEntry3 = new Sidekick.ResearchTopicEntry();
          paramCodedInputStreamMicro.readMessage(localResearchTopicEntry3);
          setBrowseModeLureAuthorEntry(localResearchTopicEntry3);
          break;
        case 666: 
          Sidekick.ThingsToWatchEntry localThingsToWatchEntry = new Sidekick.ThingsToWatchEntry();
          paramCodedInputStreamMicro.readMessage(localThingsToWatchEntry);
          setThingsToWatchEntry(localThingsToWatchEntry);
          break;
        case 674: 
          Sidekick.ResearchPageEntry localResearchPageEntry2 = new Sidekick.ResearchPageEntry();
          paramCodedInputStreamMicro.readMessage(localResearchPageEntry2);
          setBrowseModeWebLinkEntry(localResearchPageEntry2);
          break;
        case 682: 
          Sidekick.TimeToLeaveDetails localTimeToLeaveDetails = new Sidekick.TimeToLeaveDetails();
          paramCodedInputStreamMicro.readMessage(localTimeToLeaveDetails);
          setTimeToLeaveDetails(localTimeToLeaveDetails);
          break;
        case 690: 
          Sidekick.ResearchTopicEntry localResearchTopicEntry2 = new Sidekick.ResearchTopicEntry();
          paramCodedInputStreamMicro.readMessage(localResearchTopicEntry2);
          setBrowseModeEntityListEntry(localResearchTopicEntry2);
          break;
        case 698: 
          Sidekick.BrowseModeEntityEntry localBrowseModeEntityEntry = new Sidekick.BrowseModeEntityEntry();
          paramCodedInputStreamMicro.readMessage(localBrowseModeEntityEntry);
          setBrowseModeEntityEntry(localBrowseModeEntityEntry);
          break;
        case 706: 
          Sidekick.ResearchTopicEntry localResearchTopicEntry1 = new Sidekick.ResearchTopicEntry();
          paramCodedInputStreamMicro.readMessage(localResearchTopicEntry1);
          setBrowseModeVideoListEntry(localResearchTopicEntry1);
          break;
        case 714: 
          Sidekick.BrowseModeVideoEntry localBrowseModeVideoEntry = new Sidekick.BrowseModeVideoEntry();
          paramCodedInputStreamMicro.readMessage(localBrowseModeVideoEntry);
          setBrowseModeVideoEntry(localBrowseModeVideoEntry);
          break;
        case 722: 
          Sidekick.AppSuggestionEntry localAppSuggestionEntry = new Sidekick.AppSuggestionEntry();
          paramCodedInputStreamMicro.readMessage(localAppSuggestionEntry);
          setAppSuggestionEntry(localAppSuggestionEntry);
          break;
        case 730: 
          Sidekick.ResearchPageEntry localResearchPageEntry1 = new Sidekick.ResearchPageEntry();
          paramCodedInputStreamMicro.readMessage(localResearchPageEntry1);
          setBrowseModeAuthorStoryEntry(localResearchPageEntry1);
          break;
        case 738: 
          Sidekick.ImageLureCardEntry localImageLureCardEntry1 = new Sidekick.ImageLureCardEntry();
          paramCodedInputStreamMicro.readMessage(localImageLureCardEntry1);
          setThingsToWatchLureEntry(localImageLureCardEntry1);
          break;
        case 746: 
          Sidekick.NewsEntry localNewsEntry1 = new Sidekick.NewsEntry();
          paramCodedInputStreamMicro.readMessage(localNewsEntry1);
          setPersonalizedNewsEntry(localNewsEntry1);
          break;
        case 754: 
          Sidekick.QuestionNode localQuestionNode1 = new Sidekick.QuestionNode();
          paramCodedInputStreamMicro.readMessage(localQuestionNode1);
          setLinkedIcebreakerQuestion(localQuestionNode1);
          break;
        }
        setEncodedEventId(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public Entry setAlbumEntry(Sidekick.AlbumEntry paramAlbumEntry)
    {
      if (paramAlbumEntry == null) {
        throw new NullPointerException();
      }
      this.hasAlbumEntry = true;
      this.albumEntry_ = paramAlbumEntry;
      return this;
    }
    
    public Entry setAppSuggestionEntry(Sidekick.AppSuggestionEntry paramAppSuggestionEntry)
    {
      if (paramAppSuggestionEntry == null) {
        throw new NullPointerException();
      }
      this.hasAppSuggestionEntry = true;
      this.appSuggestionEntry_ = paramAppSuggestionEntry;
      return this;
    }
    
    public Entry setAttractionListEntry(Sidekick.AttractionListEntry paramAttractionListEntry)
    {
      if (paramAttractionListEntry == null) {
        throw new NullPointerException();
      }
      this.hasAttractionListEntry = true;
      this.attractionListEntry_ = paramAttractionListEntry;
      return this;
    }
    
    public Entry setBarcodeEntry(Sidekick.BarcodeEntry paramBarcodeEntry)
    {
      if (paramBarcodeEntry == null) {
        throw new NullPointerException();
      }
      this.hasBarcodeEntry = true;
      this.barcodeEntry_ = paramBarcodeEntry;
      return this;
    }
    
    public Entry setBirthdayCardEntry(Sidekick.BirthdayCardEntry paramBirthdayCardEntry)
    {
      if (paramBirthdayCardEntry == null) {
        throw new NullPointerException();
      }
      this.hasBirthdayCardEntry = true;
      this.birthdayCardEntry_ = paramBirthdayCardEntry;
      return this;
    }
    
    public Entry setBookEntry(Sidekick.BookEntry paramBookEntry)
    {
      if (paramBookEntry == null) {
        throw new NullPointerException();
      }
      this.hasBookEntry = true;
      this.bookEntry_ = paramBookEntry;
      return this;
    }
    
    public Entry setBreakingNewsEntry(Sidekick.NewsEntry paramNewsEntry)
    {
      if (paramNewsEntry == null) {
        throw new NullPointerException();
      }
      this.hasBreakingNewsEntry = true;
      this.breakingNewsEntry_ = paramNewsEntry;
      return this;
    }
    
    public Entry setBrowseModeAuthorStoryEntry(Sidekick.ResearchPageEntry paramResearchPageEntry)
    {
      if (paramResearchPageEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeAuthorStoryEntry = true;
      this.browseModeAuthorStoryEntry_ = paramResearchPageEntry;
      return this;
    }
    
    public Entry setBrowseModeEntityEntry(Sidekick.BrowseModeEntityEntry paramBrowseModeEntityEntry)
    {
      if (paramBrowseModeEntityEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeEntityEntry = true;
      this.browseModeEntityEntry_ = paramBrowseModeEntityEntry;
      return this;
    }
    
    public Entry setBrowseModeEntityListEntry(Sidekick.ResearchTopicEntry paramResearchTopicEntry)
    {
      if (paramResearchTopicEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeEntityListEntry = true;
      this.browseModeEntityListEntry_ = paramResearchTopicEntry;
      return this;
    }
    
    public Entry setBrowseModeLureAuthorEntry(Sidekick.ResearchTopicEntry paramResearchTopicEntry)
    {
      if (paramResearchTopicEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeLureAuthorEntry = true;
      this.browseModeLureAuthorEntry_ = paramResearchTopicEntry;
      return this;
    }
    
    public Entry setBrowseModeLureInterestUpdateEntry(Sidekick.ResearchPageEntry paramResearchPageEntry)
    {
      if (paramResearchPageEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeLureInterestUpdateEntry = true;
      this.browseModeLureInterestUpdateEntry_ = paramResearchPageEntry;
      return this;
    }
    
    public Entry setBrowseModeLureTravelEntry(Sidekick.ImageLureCardEntry paramImageLureCardEntry)
    {
      if (paramImageLureCardEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeLureTravelEntry = true;
      this.browseModeLureTravelEntry_ = paramImageLureCardEntry;
      return this;
    }
    
    public Entry setBrowseModeVideoEntry(Sidekick.BrowseModeVideoEntry paramBrowseModeVideoEntry)
    {
      if (paramBrowseModeVideoEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeVideoEntry = true;
      this.browseModeVideoEntry_ = paramBrowseModeVideoEntry;
      return this;
    }
    
    public Entry setBrowseModeVideoListEntry(Sidekick.ResearchTopicEntry paramResearchTopicEntry)
    {
      if (paramResearchTopicEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeVideoListEntry = true;
      this.browseModeVideoListEntry_ = paramResearchTopicEntry;
      return this;
    }
    
    public Entry setBrowseModeWebLinkEntry(Sidekick.ResearchPageEntry paramResearchPageEntry)
    {
      if (paramResearchPageEntry == null) {
        throw new NullPointerException();
      }
      this.hasBrowseModeWebLinkEntry = true;
      this.browseModeWebLinkEntry_ = paramResearchPageEntry;
      return this;
    }
    
    public Entry setCalendarEntry(Sidekick.CalendarEntry paramCalendarEntry)
    {
      if (paramCalendarEntry == null) {
        throw new NullPointerException();
      }
      this.hasCalendarEntry = true;
      this.calendarEntry_ = paramCalendarEntry;
      return this;
    }
    
    public Entry setCarRentalEntry(Sidekick.CarRentalEntry paramCarRentalEntry)
    {
      if (paramCarRentalEntry == null) {
        throw new NullPointerException();
      }
      this.hasCarRentalEntry = true;
      this.carRentalEntry_ = paramCarRentalEntry;
      return this;
    }
    
    public Entry setClockEntry(Sidekick.ClockEntry paramClockEntry)
    {
      if (paramClockEntry == null) {
        throw new NullPointerException();
      }
      this.hasClockEntry = true;
      this.clockEntry_ = paramClockEntry;
      return this;
    }
    
    public Entry setCurrencyExchangeEntry(Sidekick.CurrencyExchangeEntry paramCurrencyExchangeEntry)
    {
      if (paramCurrencyExchangeEntry == null) {
        throw new NullPointerException();
      }
      this.hasCurrencyExchangeEntry = true;
      this.currencyExchangeEntry_ = paramCurrencyExchangeEntry;
      return this;
    }
    
    public Entry setEncodedEventId(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedEventId = true;
      this.encodedEventId_ = paramByteStringMicro;
      return this;
    }
    
    public Entry setEncodedServerPayload(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedServerPayload = true;
      this.encodedServerPayload_ = paramByteStringMicro;
      return this;
    }
    
    public Entry setEntityNewsEntry(Sidekick.NewsEntry paramNewsEntry)
    {
      if (paramNewsEntry == null) {
        throw new NullPointerException();
      }
      this.hasEntityNewsEntry = true;
      this.entityNewsEntry_ = paramNewsEntry;
      return this;
    }
    
    public Entry setEntryUpdateId(long paramLong)
    {
      this.hasEntryUpdateId = true;
      this.entryUpdateId_ = paramLong;
      return this;
    }
    
    public Entry setEntryUpdateTimestampMillis(long paramLong)
    {
      this.hasEntryUpdateTimestampMillis = true;
      this.entryUpdateTimestampMillis_ = paramLong;
      return this;
    }
    
    public Entry setEventEntry(Sidekick.EventEntry paramEventEntry)
    {
      if (paramEventEntry == null) {
        throw new NullPointerException();
      }
      this.hasEventEntry = true;
      this.eventEntry_ = paramEventEntry;
      return this;
    }
    
    public Entry setEventListEntry(Sidekick.EventListEntry paramEventListEntry)
    {
      if (paramEventListEntry == null) {
        throw new NullPointerException();
      }
      this.hasEventListEntry = true;
      this.eventListEntry_ = paramEventListEntry;
      return this;
    }
    
    public Entry setFlightStatusEntry(Sidekick.FlightStatusEntry paramFlightStatusEntry)
    {
      if (paramFlightStatusEntry == null) {
        throw new NullPointerException();
      }
      this.hasFlightStatusEntry = true;
      this.flightStatusEntry_ = paramFlightStatusEntry;
      return this;
    }
    
    public Entry setFrequentPlaceEntry(Sidekick.FrequentPlaceEntry paramFrequentPlaceEntry)
    {
      if (paramFrequentPlaceEntry == null) {
        throw new NullPointerException();
      }
      this.hasFrequentPlaceEntry = true;
      this.frequentPlaceEntry_ = paramFrequentPlaceEntry;
      return this;
    }
    
    public Entry setGenericCardEntry(Sidekick.GenericCardEntry paramGenericCardEntry)
    {
      if (paramGenericCardEntry == null) {
        throw new NullPointerException();
      }
      this.hasGenericCardEntry = true;
      this.genericCardEntry_ = paramGenericCardEntry;
      return this;
    }
    
    public Entry setGenericTicketCardEntry(Sidekick.GenericTicketCardEntry paramGenericTicketCardEntry)
    {
      if (paramGenericTicketCardEntry == null) {
        throw new NullPointerException();
      }
      this.hasGenericTicketCardEntry = true;
      this.genericTicketCardEntry_ = paramGenericTicketCardEntry;
      return this;
    }
    
    public Entry setGenericTvProgramEntry(Sidekick.GenericTvProgramEntry paramGenericTvProgramEntry)
    {
      if (paramGenericTvProgramEntry == null) {
        throw new NullPointerException();
      }
      this.hasGenericTvProgramEntry = true;
      this.genericTvProgramEntry_ = paramGenericTvProgramEntry;
      return this;
    }
    
    public Entry setGmailEntry(Sidekick.GmailEntry paramGmailEntry)
    {
      if (paramGmailEntry == null) {
        throw new NullPointerException();
      }
      this.hasGmailEntry = true;
      this.gmailEntry_ = paramGmailEntry;
      return this;
    }
    
    public Entry setHotelPlaceEntry(Sidekick.FrequentPlaceEntry paramFrequentPlaceEntry)
    {
      if (paramFrequentPlaceEntry == null) {
        throw new NullPointerException();
      }
      this.hasHotelPlaceEntry = true;
      this.hotelPlaceEntry_ = paramFrequentPlaceEntry;
      return this;
    }
    
    public Entry setHyperlocalNewsEntry(Sidekick.NewsEntry paramNewsEntry)
    {
      if (paramNewsEntry == null) {
        throw new NullPointerException();
      }
      this.hasHyperlocalNewsEntry = true;
      this.hyperlocalNewsEntry_ = paramNewsEntry;
      return this;
    }
    
    public Entry setIsExample(boolean paramBoolean)
    {
      this.hasIsExample = true;
      this.isExample_ = paramBoolean;
      return this;
    }
    
    public Entry setLastTrainHomeEntry(Sidekick.FrequentPlaceEntry paramFrequentPlaceEntry)
    {
      if (paramFrequentPlaceEntry == null) {
        throw new NullPointerException();
      }
      this.hasLastTrainHomeEntry = true;
      this.lastTrainHomeEntry_ = paramFrequentPlaceEntry;
      return this;
    }
    
    public Entry setLinkedIcebreakerQuestion(Sidekick.QuestionNode paramQuestionNode)
    {
      if (paramQuestionNode == null) {
        throw new NullPointerException();
      }
      this.hasLinkedIcebreakerQuestion = true;
      this.linkedIcebreakerQuestion_ = paramQuestionNode;
      return this;
    }
    
    public Entry setLocationHistoryReminderEntry(Sidekick.LocationHistoryReminderEntry paramLocationHistoryReminderEntry)
    {
      if (paramLocationHistoryReminderEntry == null) {
        throw new NullPointerException();
      }
      this.hasLocationHistoryReminderEntry = true;
      this.locationHistoryReminderEntry_ = paramLocationHistoryReminderEntry;
      return this;
    }
    
    public Entry setMoonshineEventTicketEntry(Sidekick.MoonshineEventTicketEntry paramMoonshineEventTicketEntry)
    {
      if (paramMoonshineEventTicketEntry == null) {
        throw new NullPointerException();
      }
      this.hasMoonshineEventTicketEntry = true;
      this.moonshineEventTicketEntry_ = paramMoonshineEventTicketEntry;
      return this;
    }
    
    public Entry setMovieEntry(Sidekick.MovieEntry paramMovieEntry)
    {
      if (paramMovieEntry == null) {
        throw new NullPointerException();
      }
      this.hasMovieEntry = true;
      this.movieEntry_ = paramMovieEntry;
      return this;
    }
    
    public Entry setMovieListEntry(Sidekick.MovieListEntry paramMovieListEntry)
    {
      if (paramMovieListEntry == null) {
        throw new NullPointerException();
      }
      this.hasMovieListEntry = true;
      this.movieListEntry_ = paramMovieListEntry;
      return this;
    }
    
    public Entry setMovieTicketEntry(Sidekick.MovieTicketEntry paramMovieTicketEntry)
    {
      if (paramMovieTicketEntry == null) {
        throw new NullPointerException();
      }
      this.hasMovieTicketEntry = true;
      this.movieTicketEntry_ = paramMovieTicketEntry;
      return this;
    }
    
    public Entry setNearbyPlaceEntry(Sidekick.FrequentPlaceEntry paramFrequentPlaceEntry)
    {
      if (paramFrequentPlaceEntry == null) {
        throw new NullPointerException();
      }
      this.hasNearbyPlaceEntry = true;
      this.nearbyPlaceEntry_ = paramFrequentPlaceEntry;
      return this;
    }
    
    public Entry setNearbyPlacesListEntry(Sidekick.NearbyPlacesListEntry paramNearbyPlacesListEntry)
    {
      if (paramNearbyPlacesListEntry == null) {
        throw new NullPointerException();
      }
      this.hasNearbyPlacesListEntry = true;
      this.nearbyPlacesListEntry_ = paramNearbyPlacesListEntry;
      return this;
    }
    
    public Entry setNewsEntry(Sidekick.NewsEntry paramNewsEntry)
    {
      if (paramNewsEntry == null) {
        throw new NullPointerException();
      }
      this.hasNewsEntry = true;
      this.newsEntry_ = paramNewsEntry;
      return this;
    }
    
    public Entry setNotification(Sidekick.Notification paramNotification)
    {
      if (paramNotification == null) {
        throw new NullPointerException();
      }
      this.hasNotification = true;
      this.notification_ = paramNotification;
      return this;
    }
    
    public Entry setPackageTrackingEntry(Sidekick.PackageTrackingEntry paramPackageTrackingEntry)
    {
      if (paramPackageTrackingEntry == null) {
        throw new NullPointerException();
      }
      this.hasPackageTrackingEntry = true;
      this.packageTrackingEntry_ = paramPackageTrackingEntry;
      return this;
    }
    
    public Entry setPersonalizedNewsEntry(Sidekick.NewsEntry paramNewsEntry)
    {
      if (paramNewsEntry == null) {
        throw new NullPointerException();
      }
      this.hasPersonalizedNewsEntry = true;
      this.personalizedNewsEntry_ = paramNewsEntry;
      return this;
    }
    
    public Entry setPhotoSpotEntry(Sidekick.PhotoSpotEntry paramPhotoSpotEntry)
    {
      if (paramPhotoSpotEntry == null) {
        throw new NullPointerException();
      }
      this.hasPhotoSpotEntry = true;
      this.photoSpotEntry_ = paramPhotoSpotEntry;
      return this;
    }
    
    public Entry setPrototypeEntry(Sidekick.PrototypeEntry paramPrototypeEntry)
    {
      if (paramPrototypeEntry == null) {
        throw new NullPointerException();
      }
      this.hasPrototypeEntry = true;
      this.prototypeEntry_ = paramPrototypeEntry;
      return this;
    }
    
    public Entry setPublicAlertEntry(Sidekick.PublicAlertEntry paramPublicAlertEntry)
    {
      if (paramPublicAlertEntry == null) {
        throw new NullPointerException();
      }
      this.hasPublicAlertEntry = true;
      this.publicAlertEntry_ = paramPublicAlertEntry;
      return this;
    }
    
    public Entry setRealEstateEntry(Sidekick.RealEstateEntry paramRealEstateEntry)
    {
      if (paramRealEstateEntry == null) {
        throw new NullPointerException();
      }
      this.hasRealEstateEntry = true;
      this.realEstateEntry_ = paramRealEstateEntry;
      return this;
    }
    
    public Entry setReason(String paramString)
    {
      this.hasReason = true;
      this.reason_ = paramString;
      return this;
    }
    
    public Entry setRelevantWebsiteEntry(Sidekick.RelevantWebsiteEntry paramRelevantWebsiteEntry)
    {
      if (paramRelevantWebsiteEntry == null) {
        throw new NullPointerException();
      }
      this.hasRelevantWebsiteEntry = true;
      this.relevantWebsiteEntry_ = paramRelevantWebsiteEntry;
      return this;
    }
    
    public Entry setReminderData(Sidekick.ReminderData paramReminderData)
    {
      if (paramReminderData == null) {
        throw new NullPointerException();
      }
      this.hasReminderData = true;
      this.reminderData_ = paramReminderData;
      return this;
    }
    
    public Entry setReminderEntry(Sidekick.ReminderEntry paramReminderEntry)
    {
      if (paramReminderEntry == null) {
        throw new NullPointerException();
      }
      this.hasReminderEntry = true;
      this.reminderEntry_ = paramReminderEntry;
      return this;
    }
    
    public Entry setResearchPageEntry(Sidekick.ResearchPageEntry paramResearchPageEntry)
    {
      if (paramResearchPageEntry == null) {
        throw new NullPointerException();
      }
      this.hasResearchPageEntry = true;
      this.researchPageEntry_ = paramResearchPageEntry;
      return this;
    }
    
    public Entry setResearchTopicEntry(Sidekick.ResearchTopicEntry paramResearchTopicEntry)
    {
      if (paramResearchTopicEntry == null) {
        throw new NullPointerException();
      }
      this.hasResearchTopicEntry = true;
      this.researchTopicEntry_ = paramResearchTopicEntry;
      return this;
    }
    
    public Entry setRestaurantPlaceEntry(Sidekick.FrequentPlaceEntry paramFrequentPlaceEntry)
    {
      if (paramFrequentPlaceEntry == null) {
        throw new NullPointerException();
      }
      this.hasRestaurantPlaceEntry = true;
      this.restaurantPlaceEntry_ = paramFrequentPlaceEntry;
      return this;
    }
    
    public Entry setSharedTrafficCardEntry(Sidekick.SharedTrafficCardEntry paramSharedTrafficCardEntry)
    {
      if (paramSharedTrafficCardEntry == null) {
        throw new NullPointerException();
      }
      this.hasSharedTrafficCardEntry = true;
      this.sharedTrafficCardEntry_ = paramSharedTrafficCardEntry;
      return this;
    }
    
    public Entry setSportScoreEntry(Sidekick.SportScoreEntry paramSportScoreEntry)
    {
      if (paramSportScoreEntry == null) {
        throw new NullPointerException();
      }
      this.hasSportScoreEntry = true;
      this.sportScoreEntry_ = paramSportScoreEntry;
      return this;
    }
    
    public Entry setStockQuoteListEntry(Sidekick.StockQuoteListEntry paramStockQuoteListEntry)
    {
      if (paramStockQuoteListEntry == null) {
        throw new NullPointerException();
      }
      this.hasStockQuoteListEntry = true;
      this.stockQuoteListEntry_ = paramStockQuoteListEntry;
      return this;
    }
    
    public Entry setThingsToWatchEntry(Sidekick.ThingsToWatchEntry paramThingsToWatchEntry)
    {
      if (paramThingsToWatchEntry == null) {
        throw new NullPointerException();
      }
      this.hasThingsToWatchEntry = true;
      this.thingsToWatchEntry_ = paramThingsToWatchEntry;
      return this;
    }
    
    public Entry setThingsToWatchLureEntry(Sidekick.ImageLureCardEntry paramImageLureCardEntry)
    {
      if (paramImageLureCardEntry == null) {
        throw new NullPointerException();
      }
      this.hasThingsToWatchLureEntry = true;
      this.thingsToWatchLureEntry_ = paramImageLureCardEntry;
      return this;
    }
    
    public Entry setTimeToLeaveDetails(Sidekick.TimeToLeaveDetails paramTimeToLeaveDetails)
    {
      if (paramTimeToLeaveDetails == null) {
        throw new NullPointerException();
      }
      this.hasTimeToLeaveDetails = true;
      this.timeToLeaveDetails_ = paramTimeToLeaveDetails;
      return this;
    }
    
    public Entry setTrainingQuestionEntry(Sidekick.QuestionEntry paramQuestionEntry)
    {
      if (paramQuestionEntry == null) {
        throw new NullPointerException();
      }
      this.hasTrainingQuestionEntry = true;
      this.trainingQuestionEntry_ = paramQuestionEntry;
      return this;
    }
    
    public Entry setTransitStationEntry(Sidekick.TransitStationEntry paramTransitStationEntry)
    {
      if (paramTransitStationEntry == null) {
        throw new NullPointerException();
      }
      this.hasTransitStationEntry = true;
      this.transitStationEntry_ = paramTransitStationEntry;
      return this;
    }
    
    public Entry setTranslateEntry(Sidekick.TranslateEntry paramTranslateEntry)
    {
      if (paramTranslateEntry == null) {
        throw new NullPointerException();
      }
      this.hasTranslateEntry = true;
      this.translateEntry_ = paramTranslateEntry;
      return this;
    }
    
    public Entry setTriggerCondition(Sidekick.TriggerCondition paramTriggerCondition)
    {
      if (paramTriggerCondition == null) {
        throw new NullPointerException();
      }
      this.hasTriggerCondition = true;
      this.triggerCondition_ = paramTriggerCondition;
      return this;
    }
    
    public Entry setTvEpisodeEntry(Sidekick.TvEpisodeEntry paramTvEpisodeEntry)
    {
      if (paramTvEpisodeEntry == null) {
        throw new NullPointerException();
      }
      this.hasTvEpisodeEntry = true;
      this.tvEpisodeEntry_ = paramTvEpisodeEntry;
      return this;
    }
    
    public Entry setTvKnowledgeEntry(Sidekick.TvKnowledgeEntry paramTvKnowledgeEntry)
    {
      if (paramTvKnowledgeEntry == null) {
        throw new NullPointerException();
      }
      this.hasTvKnowledgeEntry = true;
      this.tvKnowledgeEntry_ = paramTvKnowledgeEntry;
      return this;
    }
    
    public Entry setTvMusicEntry(Sidekick.TvMusicEntry paramTvMusicEntry)
    {
      if (paramTvMusicEntry == null) {
        throw new NullPointerException();
      }
      this.hasTvMusicEntry = true;
      this.tvMusicEntry_ = paramTvMusicEntry;
      return this;
    }
    
    public Entry setTvNewsEntry(Sidekick.TvNewsEntry paramTvNewsEntry)
    {
      if (paramTvNewsEntry == null) {
        throw new NullPointerException();
      }
      this.hasTvNewsEntry = true;
      this.tvNewsEntry_ = paramTvNewsEntry;
      return this;
    }
    
    public Entry setTvRecognitionEntry(Sidekick.TvRecognitionEntry paramTvRecognitionEntry)
    {
      if (paramTvRecognitionEntry == null) {
        throw new NullPointerException();
      }
      this.hasTvRecognitionEntry = true;
      this.tvRecognitionEntry_ = paramTvRecognitionEntry;
      return this;
    }
    
    public Entry setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public Entry setUserPrompt(String paramString)
    {
      this.hasUserPrompt = true;
      this.userPrompt_ = paramString;
      return this;
    }
    
    public Entry setVideoGameEntry(Sidekick.VideoGameEntry paramVideoGameEntry)
    {
      if (paramVideoGameEntry == null) {
        throw new NullPointerException();
      }
      this.hasVideoGameEntry = true;
      this.videoGameEntry_ = paramVideoGameEntry;
      return this;
    }
    
    public Entry setVisualSearchEntry(Sidekick.FrequentPlaceEntry paramFrequentPlaceEntry)
    {
      if (paramFrequentPlaceEntry == null) {
        throw new NullPointerException();
      }
      this.hasVisualSearchEntry = true;
      this.visualSearchEntry_ = paramFrequentPlaceEntry;
      return this;
    }
    
    public Entry setVisualSearchListEntry(Sidekick.GenericCardEntry paramGenericCardEntry)
    {
      if (paramGenericCardEntry == null) {
        throw new NullPointerException();
      }
      this.hasVisualSearchListEntry = true;
      this.visualSearchListEntry_ = paramGenericCardEntry;
      return this;
    }
    
    public Entry setWalletLoyaltyEntry(Sidekick.WalletLoyaltyEntry paramWalletLoyaltyEntry)
    {
      if (paramWalletLoyaltyEntry == null) {
        throw new NullPointerException();
      }
      this.hasWalletLoyaltyEntry = true;
      this.walletLoyaltyEntry_ = paramWalletLoyaltyEntry;
      return this;
    }
    
    public Entry setWalletOfferEntry(Sidekick.WalletOfferEntry paramWalletOfferEntry)
    {
      if (paramWalletOfferEntry == null) {
        throw new NullPointerException();
      }
      this.hasWalletOfferEntry = true;
      this.walletOfferEntry_ = paramWalletOfferEntry;
      return this;
    }
    
    public Entry setWeatherEntry(Sidekick.WeatherEntry paramWeatherEntry)
    {
      if (paramWeatherEntry == null) {
        throw new NullPointerException();
      }
      this.hasWeatherEntry = true;
      this.weatherEntry_ = paramWeatherEntry;
      return this;
    }
    
    public Entry setWebsiteUpdateEntry(Sidekick.WebsiteUpdateEntry paramWebsiteUpdateEntry)
    {
      if (paramWebsiteUpdateEntry == null) {
        throw new NullPointerException();
      }
      this.hasWebsiteUpdateEntry = true;
      this.websiteUpdateEntry_ = paramWebsiteUpdateEntry;
      return this;
    }
    
    public Entry setWebsiteUpdateListEntry(Sidekick.WebsiteUpdateListEntry paramWebsiteUpdateListEntry)
    {
      if (paramWebsiteUpdateListEntry == null) {
        throw new NullPointerException();
      }
      this.hasWebsiteUpdateListEntry = true;
      this.websiteUpdateListEntry_ = paramWebsiteUpdateListEntry;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasFrequentPlaceEntry()) {
        paramCodedOutputStreamMicro.writeMessage(1, getFrequentPlaceEntry());
      }
      if (hasReason()) {
        paramCodedOutputStreamMicro.writeString(5, getReason());
      }
      Iterator localIterator1 = getEntryActionList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(6, (Sidekick.Action)localIterator1.next());
      }
      if (hasNotification()) {
        paramCodedOutputStreamMicro.writeMessage(7, getNotification());
      }
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(8, getType());
      }
      if (hasWeatherEntry()) {
        paramCodedOutputStreamMicro.writeMessage(11, getWeatherEntry());
      }
      if (hasCalendarEntry()) {
        paramCodedOutputStreamMicro.writeMessage(12, getCalendarEntry());
      }
      if (hasTransitStationEntry()) {
        paramCodedOutputStreamMicro.writeMessage(14, getTransitStationEntry());
      }
      if (hasGenericCardEntry()) {
        paramCodedOutputStreamMicro.writeMessage(16, getGenericCardEntry());
      }
      if (hasFlightStatusEntry()) {
        paramCodedOutputStreamMicro.writeMessage(17, getFlightStatusEntry());
      }
      if (hasSportScoreEntry()) {
        paramCodedOutputStreamMicro.writeMessage(18, getSportScoreEntry());
      }
      if (hasTranslateEntry()) {
        paramCodedOutputStreamMicro.writeMessage(19, getTranslateEntry());
      }
      if (hasClockEntry()) {
        paramCodedOutputStreamMicro.writeMessage(20, getClockEntry());
      }
      if (hasCurrencyExchangeEntry()) {
        paramCodedOutputStreamMicro.writeMessage(21, getCurrencyExchangeEntry());
      }
      if (hasIsExample()) {
        paramCodedOutputStreamMicro.writeBool(22, getIsExample());
      }
      if (hasNearbyPlaceEntry()) {
        paramCodedOutputStreamMicro.writeMessage(23, getNearbyPlaceEntry());
      }
      if (hasEncodedServerPayload()) {
        paramCodedOutputStreamMicro.writeBytes(24, getEncodedServerPayload());
      }
      if (hasPublicAlertEntry()) {
        paramCodedOutputStreamMicro.writeMessage(25, getPublicAlertEntry());
      }
      if (hasMovieListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(26, getMovieListEntry());
      }
      if (hasStockQuoteListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(27, getStockQuoteListEntry());
      }
      if (hasAttractionListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(28, getAttractionListEntry());
      }
      if (hasPackageTrackingEntry()) {
        paramCodedOutputStreamMicro.writeMessage(29, getPackageTrackingEntry());
      }
      if (hasNewsEntry()) {
        paramCodedOutputStreamMicro.writeMessage(30, getNewsEntry());
      }
      if (hasLocationHistoryReminderEntry()) {
        paramCodedOutputStreamMicro.writeMessage(31, getLocationHistoryReminderEntry());
      }
      if (hasPhotoSpotEntry()) {
        paramCodedOutputStreamMicro.writeMessage(32, getPhotoSpotEntry());
      }
      Iterator localIterator2 = getPrecacheDirectiveList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(33, (Sidekick.PrecacheDirective)localIterator2.next());
      }
      if (hasBirthdayCardEntry()) {
        paramCodedOutputStreamMicro.writeMessage(34, getBirthdayCardEntry());
      }
      if (hasMovieEntry()) {
        paramCodedOutputStreamMicro.writeMessage(35, getMovieEntry());
      }
      if (hasEventEntry()) {
        paramCodedOutputStreamMicro.writeMessage(36, getEventEntry());
      }
      if (hasResearchTopicEntry()) {
        paramCodedOutputStreamMicro.writeMessage(37, getResearchTopicEntry());
      }
      if (hasResearchPageEntry()) {
        paramCodedOutputStreamMicro.writeMessage(38, getResearchPageEntry());
      }
      if (hasBarcodeEntry()) {
        paramCodedOutputStreamMicro.writeMessage(39, getBarcodeEntry());
      }
      if (hasGmailEntry()) {
        paramCodedOutputStreamMicro.writeMessage(40, getGmailEntry());
      }
      if (hasVisualSearchListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(41, getVisualSearchListEntry());
      }
      if (hasVisualSearchEntry()) {
        paramCodedOutputStreamMicro.writeMessage(42, getVisualSearchEntry());
      }
      if (hasNearbyPlacesListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(43, getNearbyPlacesListEntry());
      }
      if (hasEventListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(44, getEventListEntry());
      }
      if (hasUserPrompt()) {
        paramCodedOutputStreamMicro.writeString(45, getUserPrompt());
      }
      if (hasMovieTicketEntry()) {
        paramCodedOutputStreamMicro.writeMessage(46, getMovieTicketEntry());
      }
      if (hasRealEstateEntry()) {
        paramCodedOutputStreamMicro.writeMessage(47, getRealEstateEntry());
      }
      if (hasReminderEntry()) {
        paramCodedOutputStreamMicro.writeMessage(48, getReminderEntry());
      }
      if (hasWebsiteUpdateEntry()) {
        paramCodedOutputStreamMicro.writeMessage(49, getWebsiteUpdateEntry());
      }
      if (hasWebsiteUpdateListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(50, getWebsiteUpdateListEntry());
      }
      if (hasGenericTicketCardEntry()) {
        paramCodedOutputStreamMicro.writeMessage(51, getGenericTicketCardEntry());
      }
      if (hasBookEntry()) {
        paramCodedOutputStreamMicro.writeMessage(52, getBookEntry());
      }
      if (hasAlbumEntry()) {
        paramCodedOutputStreamMicro.writeMessage(53, getAlbumEntry());
      }
      if (hasVideoGameEntry()) {
        paramCodedOutputStreamMicro.writeMessage(54, getVideoGameEntry());
      }
      if (hasTvEpisodeEntry()) {
        paramCodedOutputStreamMicro.writeMessage(55, getTvEpisodeEntry());
      }
      if (hasSharedTrafficCardEntry()) {
        paramCodedOutputStreamMicro.writeMessage(56, getSharedTrafficCardEntry());
      }
      if (hasRelevantWebsiteEntry()) {
        paramCodedOutputStreamMicro.writeMessage(57, getRelevantWebsiteEntry());
      }
      if (hasLastTrainHomeEntry()) {
        paramCodedOutputStreamMicro.writeMessage(58, getLastTrainHomeEntry());
      }
      if (hasBreakingNewsEntry()) {
        paramCodedOutputStreamMicro.writeMessage(59, getBreakingNewsEntry());
      }
      if (hasHyperlocalNewsEntry()) {
        paramCodedOutputStreamMicro.writeMessage(60, getHyperlocalNewsEntry());
      }
      if (hasWalletOfferEntry()) {
        paramCodedOutputStreamMicro.writeMessage(61, getWalletOfferEntry());
      }
      if (hasWalletLoyaltyEntry()) {
        paramCodedOutputStreamMicro.writeMessage(62, getWalletLoyaltyEntry());
      }
      if (hasHotelPlaceEntry()) {
        paramCodedOutputStreamMicro.writeMessage(63, getHotelPlaceEntry());
      }
      if (hasRestaurantPlaceEntry()) {
        paramCodedOutputStreamMicro.writeMessage(64, getRestaurantPlaceEntry());
      }
      if (hasCarRentalEntry()) {
        paramCodedOutputStreamMicro.writeMessage(65, getCarRentalEntry());
      }
      if (hasMoonshineEventTicketEntry()) {
        paramCodedOutputStreamMicro.writeMessage(66, getMoonshineEventTicketEntry());
      }
      if (hasTvRecognitionEntry()) {
        paramCodedOutputStreamMicro.writeMessage(67, getTvRecognitionEntry());
      }
      if (hasGenericTvProgramEntry()) {
        paramCodedOutputStreamMicro.writeMessage(68, getGenericTvProgramEntry());
      }
      if (hasReminderData()) {
        paramCodedOutputStreamMicro.writeMessage(69, getReminderData());
      }
      if (hasTrainingQuestionEntry()) {
        paramCodedOutputStreamMicro.writeMessage(70, getTrainingQuestionEntry());
      }
      Iterator localIterator3 = getTrainingQuestionNodeList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(71, (Sidekick.QuestionNode)localIterator3.next());
      }
      if (hasEntryUpdateId()) {
        paramCodedOutputStreamMicro.writeInt64(72, getEntryUpdateId());
      }
      if (hasTvNewsEntry()) {
        paramCodedOutputStreamMicro.writeMessage(73, getTvNewsEntry());
      }
      if (hasTvMusicEntry()) {
        paramCodedOutputStreamMicro.writeMessage(74, getTvMusicEntry());
      }
      if (hasTvKnowledgeEntry()) {
        paramCodedOutputStreamMicro.writeMessage(75, getTvKnowledgeEntry());
      }
      if (hasEntryUpdateTimestampMillis()) {
        paramCodedOutputStreamMicro.writeInt64(76, getEntryUpdateTimestampMillis());
      }
      if (hasPrototypeEntry()) {
        paramCodedOutputStreamMicro.writeMessage(77, getPrototypeEntry());
      }
      if (hasEntityNewsEntry()) {
        paramCodedOutputStreamMicro.writeMessage(78, getEntityNewsEntry());
      }
      if (hasTriggerCondition()) {
        paramCodedOutputStreamMicro.writeMessage(79, getTriggerCondition());
      }
      if (hasBrowseModeLureInterestUpdateEntry()) {
        paramCodedOutputStreamMicro.writeMessage(80, getBrowseModeLureInterestUpdateEntry());
      }
      if (hasBrowseModeLureTravelEntry()) {
        paramCodedOutputStreamMicro.writeMessage(81, getBrowseModeLureTravelEntry());
      }
      if (hasBrowseModeLureAuthorEntry()) {
        paramCodedOutputStreamMicro.writeMessage(82, getBrowseModeLureAuthorEntry());
      }
      if (hasThingsToWatchEntry()) {
        paramCodedOutputStreamMicro.writeMessage(83, getThingsToWatchEntry());
      }
      if (hasBrowseModeWebLinkEntry()) {
        paramCodedOutputStreamMicro.writeMessage(84, getBrowseModeWebLinkEntry());
      }
      if (hasTimeToLeaveDetails()) {
        paramCodedOutputStreamMicro.writeMessage(85, getTimeToLeaveDetails());
      }
      if (hasBrowseModeEntityListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(86, getBrowseModeEntityListEntry());
      }
      if (hasBrowseModeEntityEntry()) {
        paramCodedOutputStreamMicro.writeMessage(87, getBrowseModeEntityEntry());
      }
      if (hasBrowseModeVideoListEntry()) {
        paramCodedOutputStreamMicro.writeMessage(88, getBrowseModeVideoListEntry());
      }
      if (hasBrowseModeVideoEntry()) {
        paramCodedOutputStreamMicro.writeMessage(89, getBrowseModeVideoEntry());
      }
      if (hasAppSuggestionEntry()) {
        paramCodedOutputStreamMicro.writeMessage(90, getAppSuggestionEntry());
      }
      if (hasBrowseModeAuthorStoryEntry()) {
        paramCodedOutputStreamMicro.writeMessage(91, getBrowseModeAuthorStoryEntry());
      }
      if (hasThingsToWatchLureEntry()) {
        paramCodedOutputStreamMicro.writeMessage(92, getThingsToWatchLureEntry());
      }
      if (hasPersonalizedNewsEntry()) {
        paramCodedOutputStreamMicro.writeMessage(93, getPersonalizedNewsEntry());
      }
      if (hasLinkedIcebreakerQuestion()) {
        paramCodedOutputStreamMicro.writeMessage(94, getLinkedIcebreakerQuestion());
      }
      if (hasEncodedEventId()) {
        paramCodedOutputStreamMicro.writeBytes(95, getEncodedEventId());
      }
    }
  }
  
  public static final class EntryChanges
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Sidekick.Entry> updateOnly_ = Collections.emptyList();
    private List<Sidekick.Entry> updates_ = Collections.emptyList();
    
    public EntryChanges addUpdateOnly(Sidekick.Entry paramEntry)
    {
      if (paramEntry == null) {
        throw new NullPointerException();
      }
      if (this.updateOnly_.isEmpty()) {
        this.updateOnly_ = new ArrayList();
      }
      this.updateOnly_.add(paramEntry);
      return this;
    }
    
    public EntryChanges addUpdates(Sidekick.Entry paramEntry)
    {
      if (paramEntry == null) {
        throw new NullPointerException();
      }
      if (this.updates_.isEmpty()) {
        this.updates_ = new ArrayList();
      }
      this.updates_.add(paramEntry);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator1 = getUpdatesList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.Entry)localIterator1.next());
      }
      Iterator localIterator2 = getUpdateOnlyList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.Entry)localIterator2.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getUpdateOnlyCount()
    {
      return this.updateOnly_.size();
    }
    
    public List<Sidekick.Entry> getUpdateOnlyList()
    {
      return this.updateOnly_;
    }
    
    public int getUpdatesCount()
    {
      return this.updates_.size();
    }
    
    public List<Sidekick.Entry> getUpdatesList()
    {
      return this.updates_;
    }
    
    public EntryChanges mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Entry localEntry2 = new Sidekick.Entry();
          paramCodedInputStreamMicro.readMessage(localEntry2);
          addUpdates(localEntry2);
          break;
        }
        Sidekick.Entry localEntry1 = new Sidekick.Entry();
        paramCodedInputStreamMicro.readMessage(localEntry1);
        addUpdateOnly(localEntry1);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator1 = getUpdatesList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.Entry)localIterator1.next());
      }
      Iterator localIterator2 = getUpdateOnlyList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.Entry)localIterator2.next());
      }
    }
  }
  
  public static final class EntryQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.ClientUserData clientUserData_ = null;
    private boolean hasClientUserData;
    private List<Sidekick.Interest> interest_ = Collections.emptyList();
    
    public EntryQuery addInterest(Sidekick.Interest paramInterest)
    {
      if (paramInterest == null) {
        throw new NullPointerException();
      }
      if (this.interest_.isEmpty()) {
        this.interest_ = new ArrayList();
      }
      this.interest_.add(paramInterest);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ClientUserData getClientUserData()
    {
      return this.clientUserData_;
    }
    
    public Sidekick.Interest getInterest(int paramInt)
    {
      return (Sidekick.Interest)this.interest_.get(paramInt);
    }
    
    public int getInterestCount()
    {
      return this.interest_.size();
    }
    
    public List<Sidekick.Interest> getInterestList()
    {
      return this.interest_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getInterestList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.Interest)localIterator.next());
      }
      if (hasClientUserData()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getClientUserData());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasClientUserData()
    {
      return this.hasClientUserData;
    }
    
    public EntryQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 18: 
          Sidekick.Interest localInterest = new Sidekick.Interest();
          paramCodedInputStreamMicro.readMessage(localInterest);
          addInterest(localInterest);
          break;
        }
        Sidekick.ClientUserData localClientUserData = new Sidekick.ClientUserData();
        paramCodedInputStreamMicro.readMessage(localClientUserData);
        setClientUserData(localClientUserData);
      }
    }
    
    public EntryQuery setClientUserData(Sidekick.ClientUserData paramClientUserData)
    {
      if (paramClientUserData == null) {
        throw new NullPointerException();
      }
      this.hasClientUserData = true;
      this.clientUserData_ = paramClientUserData;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getInterestList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.Interest)localIterator.next());
      }
      if (hasClientUserData()) {
        paramCodedOutputStreamMicro.writeMessage(4, getClientUserData());
      }
    }
  }
  
  public static final class EntryResponse
    extends MessageMicro
  {
    private List<Sidekick.BackgroundPhotoDescriptor> backgroundImageDescriptor_ = Collections.emptyList();
    private List<Sidekick.Photo> backgroundImage_ = Collections.emptyList();
    private int cachedSize = -1;
    private Sidekick.Configuration configuration_ = null;
    private List<Sidekick.EntryTree> entryTree_ = Collections.emptyList();
    private boolean hasConfiguration;
    
    public static EntryResponse parseFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      return new EntryResponse().mergeFrom(paramCodedInputStreamMicro);
    }
    
    public static EntryResponse parseFrom(byte[] paramArrayOfByte)
      throws InvalidProtocolBufferMicroException
    {
      return (EntryResponse)new EntryResponse().mergeFrom(paramArrayOfByte);
    }
    
    public EntryResponse addBackgroundImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      if (this.backgroundImage_.isEmpty()) {
        this.backgroundImage_ = new ArrayList();
      }
      this.backgroundImage_.add(paramPhoto);
      return this;
    }
    
    public EntryResponse addBackgroundImageDescriptor(Sidekick.BackgroundPhotoDescriptor paramBackgroundPhotoDescriptor)
    {
      if (paramBackgroundPhotoDescriptor == null) {
        throw new NullPointerException();
      }
      if (this.backgroundImageDescriptor_.isEmpty()) {
        this.backgroundImageDescriptor_ = new ArrayList();
      }
      this.backgroundImageDescriptor_.add(paramBackgroundPhotoDescriptor);
      return this;
    }
    
    public EntryResponse addEntryTree(Sidekick.EntryTree paramEntryTree)
    {
      if (paramEntryTree == null) {
        throw new NullPointerException();
      }
      if (this.entryTree_.isEmpty()) {
        this.entryTree_ = new ArrayList();
      }
      this.entryTree_.add(paramEntryTree);
      return this;
    }
    
    public Sidekick.Photo getBackgroundImage(int paramInt)
    {
      return (Sidekick.Photo)this.backgroundImage_.get(paramInt);
    }
    
    public int getBackgroundImageCount()
    {
      return this.backgroundImage_.size();
    }
    
    public Sidekick.BackgroundPhotoDescriptor getBackgroundImageDescriptor(int paramInt)
    {
      return (Sidekick.BackgroundPhotoDescriptor)this.backgroundImageDescriptor_.get(paramInt);
    }
    
    public int getBackgroundImageDescriptorCount()
    {
      return this.backgroundImageDescriptor_.size();
    }
    
    public List<Sidekick.BackgroundPhotoDescriptor> getBackgroundImageDescriptorList()
    {
      return this.backgroundImageDescriptor_;
    }
    
    public List<Sidekick.Photo> getBackgroundImageList()
    {
      return this.backgroundImage_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Configuration getConfiguration()
    {
      return this.configuration_;
    }
    
    public Sidekick.EntryTree getEntryTree(int paramInt)
    {
      return (Sidekick.EntryTree)this.entryTree_.get(paramInt);
    }
    
    public int getEntryTreeCount()
    {
      return this.entryTree_.size();
    }
    
    public List<Sidekick.EntryTree> getEntryTreeList()
    {
      return this.entryTree_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasConfiguration();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getConfiguration());
      }
      Iterator localIterator1 = getEntryTreeList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.EntryTree)localIterator1.next());
      }
      Iterator localIterator2 = getBackgroundImageList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, (Sidekick.Photo)localIterator2.next());
      }
      Iterator localIterator3 = getBackgroundImageDescriptorList().iterator();
      while (localIterator3.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, (Sidekick.BackgroundPhotoDescriptor)localIterator3.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasConfiguration()
    {
      return this.hasConfiguration;
    }
    
    public EntryResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Configuration localConfiguration = new Sidekick.Configuration();
          paramCodedInputStreamMicro.readMessage(localConfiguration);
          setConfiguration(localConfiguration);
          break;
        case 18: 
          Sidekick.EntryTree localEntryTree = new Sidekick.EntryTree();
          paramCodedInputStreamMicro.readMessage(localEntryTree);
          addEntryTree(localEntryTree);
          break;
        case 34: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          addBackgroundImage(localPhoto);
          break;
        }
        Sidekick.BackgroundPhotoDescriptor localBackgroundPhotoDescriptor = new Sidekick.BackgroundPhotoDescriptor();
        paramCodedInputStreamMicro.readMessage(localBackgroundPhotoDescriptor);
        addBackgroundImageDescriptor(localBackgroundPhotoDescriptor);
      }
    }
    
    public EntryResponse setConfiguration(Sidekick.Configuration paramConfiguration)
    {
      if (paramConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasConfiguration = true;
      this.configuration_ = paramConfiguration;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(1, getConfiguration());
      }
      Iterator localIterator1 = getEntryTreeList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.EntryTree)localIterator1.next());
      }
      Iterator localIterator2 = getBackgroundImageList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(4, (Sidekick.Photo)localIterator2.next());
      }
      Iterator localIterator3 = getBackgroundImageDescriptorList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(5, (Sidekick.BackgroundPhotoDescriptor)localIterator3.next());
      }
    }
  }
  
  public static final class EntryTree
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<CallbackWithInterest> callbackWithInterest_ = Collections.emptyList();
    private int error_ = 12;
    private long expirationTimestampSeconds_ = 0L;
    private boolean hasError;
    private boolean hasExpirationTimestampSeconds;
    private boolean hasRoot;
    private Sidekick.EntryTreeNode root_ = null;
    
    public EntryTree addCallbackWithInterest(CallbackWithInterest paramCallbackWithInterest)
    {
      if (paramCallbackWithInterest == null) {
        throw new NullPointerException();
      }
      if (this.callbackWithInterest_.isEmpty()) {
        this.callbackWithInterest_ = new ArrayList();
      }
      this.callbackWithInterest_.add(paramCallbackWithInterest);
      return this;
    }
    
    public final EntryTree clear()
    {
      clearRoot();
      clearExpirationTimestampSeconds();
      clearError();
      clearCallbackWithInterest();
      this.cachedSize = -1;
      return this;
    }
    
    public EntryTree clearCallbackWithInterest()
    {
      this.callbackWithInterest_ = Collections.emptyList();
      return this;
    }
    
    public EntryTree clearError()
    {
      this.hasError = false;
      this.error_ = 12;
      return this;
    }
    
    public EntryTree clearExpirationTimestampSeconds()
    {
      this.hasExpirationTimestampSeconds = false;
      this.expirationTimestampSeconds_ = 0L;
      return this;
    }
    
    public EntryTree clearRoot()
    {
      this.hasRoot = false;
      this.root_ = null;
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getCallbackWithInterestCount()
    {
      return this.callbackWithInterest_.size();
    }
    
    public List<CallbackWithInterest> getCallbackWithInterestList()
    {
      return this.callbackWithInterest_;
    }
    
    public int getError()
    {
      return this.error_;
    }
    
    public long getExpirationTimestampSeconds()
    {
      return this.expirationTimestampSeconds_;
    }
    
    public Sidekick.EntryTreeNode getRoot()
    {
      return this.root_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasRoot();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getRoot());
      }
      if (hasExpirationTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(2, getExpirationTimestampSeconds());
      }
      if (hasError()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getError());
      }
      Iterator localIterator = getCallbackWithInterestList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, (CallbackWithInterest)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasError()
    {
      return this.hasError;
    }
    
    public boolean hasExpirationTimestampSeconds()
    {
      return this.hasExpirationTimestampSeconds;
    }
    
    public boolean hasRoot()
    {
      return this.hasRoot;
    }
    
    public EntryTree mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.EntryTreeNode localEntryTreeNode = new Sidekick.EntryTreeNode();
          paramCodedInputStreamMicro.readMessage(localEntryTreeNode);
          setRoot(localEntryTreeNode);
          break;
        case 16: 
          setExpirationTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 24: 
          setError(paramCodedInputStreamMicro.readInt32());
          break;
        }
        CallbackWithInterest localCallbackWithInterest = new CallbackWithInterest();
        paramCodedInputStreamMicro.readMessage(localCallbackWithInterest);
        addCallbackWithInterest(localCallbackWithInterest);
      }
    }
    
    public EntryTree setError(int paramInt)
    {
      this.hasError = true;
      this.error_ = paramInt;
      return this;
    }
    
    public EntryTree setExpirationTimestampSeconds(long paramLong)
    {
      this.hasExpirationTimestampSeconds = true;
      this.expirationTimestampSeconds_ = paramLong;
      return this;
    }
    
    public EntryTree setRoot(Sidekick.EntryTreeNode paramEntryTreeNode)
    {
      if (paramEntryTreeNode == null) {
        throw new NullPointerException();
      }
      this.hasRoot = true;
      this.root_ = paramEntryTreeNode;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasRoot()) {
        paramCodedOutputStreamMicro.writeMessage(1, getRoot());
      }
      if (hasExpirationTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(2, getExpirationTimestampSeconds());
      }
      if (hasError()) {
        paramCodedOutputStreamMicro.writeInt32(3, getError());
      }
      Iterator localIterator = getCallbackWithInterestList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(4, (CallbackWithInterest)localIterator.next());
      }
    }
    
    public static final class CallbackWithInterest
      extends MessageMicro
    {
      private int cachedSize = -1;
      private long callbackTimeSeconds_ = 0L;
      private boolean hasCallbackTimeSeconds;
      private boolean hasInterest;
      private Sidekick.Interest interest_ = null;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public long getCallbackTimeSeconds()
      {
        return this.callbackTimeSeconds_;
      }
      
      public Sidekick.Interest getInterest()
      {
        return this.interest_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasInterest();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getInterest());
        }
        if (hasCallbackTimeSeconds()) {
          i += CodedOutputStreamMicro.computeInt64Size(2, getCallbackTimeSeconds());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasCallbackTimeSeconds()
      {
        return this.hasCallbackTimeSeconds;
      }
      
      public boolean hasInterest()
      {
        return this.hasInterest;
      }
      
      public CallbackWithInterest mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.Interest localInterest = new Sidekick.Interest();
            paramCodedInputStreamMicro.readMessage(localInterest);
            setInterest(localInterest);
            break;
          }
          setCallbackTimeSeconds(paramCodedInputStreamMicro.readInt64());
        }
      }
      
      public CallbackWithInterest setCallbackTimeSeconds(long paramLong)
      {
        this.hasCallbackTimeSeconds = true;
        this.callbackTimeSeconds_ = paramLong;
        return this;
      }
      
      public CallbackWithInterest setInterest(Sidekick.Interest paramInterest)
      {
        if (paramInterest == null) {
          throw new NullPointerException();
        }
        this.hasInterest = true;
        this.interest_ = paramInterest;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasInterest()) {
          paramCodedOutputStreamMicro.writeMessage(1, getInterest());
        }
        if (hasCallbackTimeSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(2, getCallbackTimeSeconds());
        }
      }
    }
  }
  
  public static final class EntryTreeNode
    extends MessageMicro
  {
    private List<Sidekick.Action> action_ = Collections.emptyList();
    private int cachedSize = -1;
    private List<EntryTreeNode> child_ = Collections.emptyList();
    private List<Sidekick.Entry> entry_ = Collections.emptyList();
    private Sidekick.Entry groupEntry_ = null;
    private boolean hasGroupEntry;
    private boolean hasIsExpanded;
    private boolean hasTitle;
    private boolean isExpanded_ = false;
    private String title_ = "";
    
    public static EntryTreeNode parseFrom(byte[] paramArrayOfByte)
      throws InvalidProtocolBufferMicroException
    {
      return (EntryTreeNode)new EntryTreeNode().mergeFrom(paramArrayOfByte);
    }
    
    public EntryTreeNode addAction(Sidekick.Action paramAction)
    {
      if (paramAction == null) {
        throw new NullPointerException();
      }
      if (this.action_.isEmpty()) {
        this.action_ = new ArrayList();
      }
      this.action_.add(paramAction);
      return this;
    }
    
    public EntryTreeNode addChild(EntryTreeNode paramEntryTreeNode)
    {
      if (paramEntryTreeNode == null) {
        throw new NullPointerException();
      }
      if (this.child_.isEmpty()) {
        this.child_ = new ArrayList();
      }
      this.child_.add(paramEntryTreeNode);
      return this;
    }
    
    public EntryTreeNode addEntry(Sidekick.Entry paramEntry)
    {
      if (paramEntry == null) {
        throw new NullPointerException();
      }
      if (this.entry_.isEmpty()) {
        this.entry_ = new ArrayList();
      }
      this.entry_.add(paramEntry);
      return this;
    }
    
    public List<Sidekick.Action> getActionList()
    {
      return this.action_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public EntryTreeNode getChild(int paramInt)
    {
      return (EntryTreeNode)this.child_.get(paramInt);
    }
    
    public int getChildCount()
    {
      return this.child_.size();
    }
    
    public List<EntryTreeNode> getChildList()
    {
      return this.child_;
    }
    
    public Sidekick.Entry getEntry(int paramInt)
    {
      return (Sidekick.Entry)this.entry_.get(paramInt);
    }
    
    public int getEntryCount()
    {
      return this.entry_.size();
    }
    
    public List<Sidekick.Entry> getEntryList()
    {
      return this.entry_;
    }
    
    public Sidekick.Entry getGroupEntry()
    {
      return this.groupEntry_;
    }
    
    public boolean getIsExpanded()
    {
      return this.isExpanded_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      Iterator localIterator1 = getChildList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (EntryTreeNode)localIterator1.next());
      }
      Iterator localIterator2 = getEntryList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.Entry)localIterator2.next());
      }
      Iterator localIterator3 = getActionList().iterator();
      while (localIterator3.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, (Sidekick.Action)localIterator3.next());
      }
      if (hasGroupEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getGroupEntry());
      }
      if (hasIsExpanded()) {
        i += CodedOutputStreamMicro.computeBoolSize(6, getIsExpanded());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasGroupEntry()
    {
      return this.hasGroupEntry;
    }
    
    public boolean hasIsExpanded()
    {
      return this.hasIsExpanded;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public EntryTreeNode mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          EntryTreeNode localEntryTreeNode = new EntryTreeNode();
          paramCodedInputStreamMicro.readMessage(localEntryTreeNode);
          addChild(localEntryTreeNode);
          break;
        case 26: 
          Sidekick.Entry localEntry2 = new Sidekick.Entry();
          paramCodedInputStreamMicro.readMessage(localEntry2);
          addEntry(localEntry2);
          break;
        case 34: 
          Sidekick.Action localAction = new Sidekick.Action();
          paramCodedInputStreamMicro.readMessage(localAction);
          addAction(localAction);
          break;
        case 42: 
          Sidekick.Entry localEntry1 = new Sidekick.Entry();
          paramCodedInputStreamMicro.readMessage(localEntry1);
          setGroupEntry(localEntry1);
          break;
        }
        setIsExpanded(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public EntryTreeNode setGroupEntry(Sidekick.Entry paramEntry)
    {
      if (paramEntry == null) {
        throw new NullPointerException();
      }
      this.hasGroupEntry = true;
      this.groupEntry_ = paramEntry;
      return this;
    }
    
    public EntryTreeNode setIsExpanded(boolean paramBoolean)
    {
      this.hasIsExpanded = true;
      this.isExpanded_ = paramBoolean;
      return this;
    }
    
    public EntryTreeNode setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      Iterator localIterator1 = getChildList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (EntryTreeNode)localIterator1.next());
      }
      Iterator localIterator2 = getEntryList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.Entry)localIterator2.next());
      }
      Iterator localIterator3 = getActionList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(4, (Sidekick.Action)localIterator3.next());
      }
      if (hasGroupEntry()) {
        paramCodedOutputStreamMicro.writeMessage(5, getGroupEntry());
      }
      if (hasIsExpanded()) {
        paramCodedOutputStreamMicro.writeBool(6, getIsExpanded());
      }
    }
  }
  
  public static final class EventEntry
    extends MessageMicro
  {
    private List<String> artistName_ = Collections.emptyList();
    private Sidekick.Attribution attribution_ = null;
    private int cachedSize = -1;
    private List<String> category_ = Collections.emptyList();
    private String description_ = "";
    private long endTimeSeconds_ = 0L;
    private String endTime_ = "";
    private String eventName_ = "";
    private boolean hasAttribution;
    private boolean hasDescription;
    private boolean hasEndTime;
    private boolean hasEndTimeSeconds;
    private boolean hasEventName;
    private boolean hasImage;
    private boolean hasLocation;
    private boolean hasOnCardJustification;
    private boolean hasReasonEntityName;
    private boolean hasStartTime;
    private boolean hasStartTimeSeconds;
    private boolean hasTitle;
    private boolean hasType;
    private boolean hasViewAction;
    private Sidekick.Photo image_ = null;
    private Sidekick.Location location_ = null;
    private String onCardJustification_ = "";
    private String reasonEntityName_ = "";
    private long startTimeSeconds_ = 0L;
    private String startTime_ = "";
    private String title_ = "";
    private int type_ = 1;
    private Sidekick.ClickAction viewAction_ = null;
    
    public EventEntry addArtistName(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.artistName_.isEmpty()) {
        this.artistName_ = new ArrayList();
      }
      this.artistName_.add(paramString);
      return this;
    }
    
    public EventEntry addCategory(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.category_.isEmpty()) {
        this.category_ = new ArrayList();
      }
      this.category_.add(paramString);
      return this;
    }
    
    public List<String> getArtistNameList()
    {
      return this.artistName_;
    }
    
    public Sidekick.Attribution getAttribution()
    {
      return this.attribution_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getCategoryCount()
    {
      return this.category_.size();
    }
    
    public List<String> getCategoryList()
    {
      return this.category_;
    }
    
    public String getDescription()
    {
      return this.description_;
    }
    
    public String getEndTime()
    {
      return this.endTime_;
    }
    
    public long getEndTimeSeconds()
    {
      return this.endTimeSeconds_;
    }
    
    public String getEventName()
    {
      return this.eventName_;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public String getOnCardJustification()
    {
      return this.onCardJustification_;
    }
    
    public String getReasonEntityName()
    {
      return this.reasonEntityName_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getType());
      }
      if (hasTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getTitle());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getImage());
      }
      if (hasLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getLocation());
      }
      if (hasStartTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(5, getStartTimeSeconds());
      }
      if (hasEndTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(6, getEndTimeSeconds());
      }
      if (hasEventName()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getEventName());
      }
      int j = 0;
      Iterator localIterator1 = getArtistNameList().iterator();
      while (localIterator1.hasNext()) {
        j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator1.next());
      }
      int k = i + j + 1 * getArtistNameList().size();
      if (hasViewAction()) {
        k += CodedOutputStreamMicro.computeMessageSize(9, getViewAction());
      }
      if (hasDescription()) {
        k += CodedOutputStreamMicro.computeStringSize(10, getDescription());
      }
      if (hasAttribution()) {
        k += CodedOutputStreamMicro.computeMessageSize(11, getAttribution());
      }
      if (hasReasonEntityName()) {
        k += CodedOutputStreamMicro.computeStringSize(12, getReasonEntityName());
      }
      int m = 0;
      Iterator localIterator2 = getCategoryList().iterator();
      while (localIterator2.hasNext()) {
        m += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator2.next());
      }
      int n = k + m + 1 * getCategoryList().size();
      if (hasStartTime()) {
        n += CodedOutputStreamMicro.computeStringSize(14, getStartTime());
      }
      if (hasEndTime()) {
        n += CodedOutputStreamMicro.computeStringSize(15, getEndTime());
      }
      if (hasOnCardJustification()) {
        n += CodedOutputStreamMicro.computeStringSize(16, getOnCardJustification());
      }
      this.cachedSize = n;
      return n;
    }
    
    public String getStartTime()
    {
      return this.startTime_;
    }
    
    public long getStartTimeSeconds()
    {
      return this.startTimeSeconds_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public Sidekick.ClickAction getViewAction()
    {
      return this.viewAction_;
    }
    
    public boolean hasAttribution()
    {
      return this.hasAttribution;
    }
    
    public boolean hasDescription()
    {
      return this.hasDescription;
    }
    
    public boolean hasEndTime()
    {
      return this.hasEndTime;
    }
    
    public boolean hasEndTimeSeconds()
    {
      return this.hasEndTimeSeconds;
    }
    
    public boolean hasEventName()
    {
      return this.hasEventName;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasOnCardJustification()
    {
      return this.hasOnCardJustification;
    }
    
    public boolean hasReasonEntityName()
    {
      return this.hasReasonEntityName;
    }
    
    public boolean hasStartTime()
    {
      return this.hasStartTime;
    }
    
    public boolean hasStartTimeSeconds()
    {
      return this.hasStartTimeSeconds;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public boolean hasViewAction()
    {
      return this.hasViewAction;
    }
    
    public EventEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        case 18: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 34: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 40: 
          setStartTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 48: 
          setEndTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 58: 
          setEventName(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          addArtistName(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction);
          setViewAction(localClickAction);
          break;
        case 82: 
          setDescription(paramCodedInputStreamMicro.readString());
          break;
        case 90: 
          Sidekick.Attribution localAttribution = new Sidekick.Attribution();
          paramCodedInputStreamMicro.readMessage(localAttribution);
          setAttribution(localAttribution);
          break;
        case 98: 
          setReasonEntityName(paramCodedInputStreamMicro.readString());
          break;
        case 106: 
          addCategory(paramCodedInputStreamMicro.readString());
          break;
        case 114: 
          setStartTime(paramCodedInputStreamMicro.readString());
          break;
        case 122: 
          setEndTime(paramCodedInputStreamMicro.readString());
          break;
        }
        setOnCardJustification(paramCodedInputStreamMicro.readString());
      }
    }
    
    public EventEntry setAttribution(Sidekick.Attribution paramAttribution)
    {
      if (paramAttribution == null) {
        throw new NullPointerException();
      }
      this.hasAttribution = true;
      this.attribution_ = paramAttribution;
      return this;
    }
    
    public EventEntry setDescription(String paramString)
    {
      this.hasDescription = true;
      this.description_ = paramString;
      return this;
    }
    
    public EventEntry setEndTime(String paramString)
    {
      this.hasEndTime = true;
      this.endTime_ = paramString;
      return this;
    }
    
    public EventEntry setEndTimeSeconds(long paramLong)
    {
      this.hasEndTimeSeconds = true;
      this.endTimeSeconds_ = paramLong;
      return this;
    }
    
    public EventEntry setEventName(String paramString)
    {
      this.hasEventName = true;
      this.eventName_ = paramString;
      return this;
    }
    
    public EventEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public EventEntry setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public EventEntry setOnCardJustification(String paramString)
    {
      this.hasOnCardJustification = true;
      this.onCardJustification_ = paramString;
      return this;
    }
    
    public EventEntry setReasonEntityName(String paramString)
    {
      this.hasReasonEntityName = true;
      this.reasonEntityName_ = paramString;
      return this;
    }
    
    public EventEntry setStartTime(String paramString)
    {
      this.hasStartTime = true;
      this.startTime_ = paramString;
      return this;
    }
    
    public EventEntry setStartTimeSeconds(long paramLong)
    {
      this.hasStartTimeSeconds = true;
      this.startTimeSeconds_ = paramLong;
      return this;
    }
    
    public EventEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public EventEntry setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public EventEntry setViewAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasViewAction = true;
      this.viewAction_ = paramClickAction;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(1, getType());
      }
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(2, getTitle());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(3, getImage());
      }
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(4, getLocation());
      }
      if (hasStartTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(5, getStartTimeSeconds());
      }
      if (hasEndTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(6, getEndTimeSeconds());
      }
      if (hasEventName()) {
        paramCodedOutputStreamMicro.writeString(7, getEventName());
      }
      Iterator localIterator1 = getArtistNameList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeString(8, (String)localIterator1.next());
      }
      if (hasViewAction()) {
        paramCodedOutputStreamMicro.writeMessage(9, getViewAction());
      }
      if (hasDescription()) {
        paramCodedOutputStreamMicro.writeString(10, getDescription());
      }
      if (hasAttribution()) {
        paramCodedOutputStreamMicro.writeMessage(11, getAttribution());
      }
      if (hasReasonEntityName()) {
        paramCodedOutputStreamMicro.writeString(12, getReasonEntityName());
      }
      Iterator localIterator2 = getCategoryList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeString(13, (String)localIterator2.next());
      }
      if (hasStartTime()) {
        paramCodedOutputStreamMicro.writeString(14, getStartTime());
      }
      if (hasEndTime()) {
        paramCodedOutputStreamMicro.writeString(15, getEndTime());
      }
      if (hasOnCardJustification()) {
        paramCodedOutputStreamMicro.writeString(16, getOnCardJustification());
      }
    }
  }
  
  public static final class EventListEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      this.cachedSize = 0;
      return 0;
    }
    
    public EventListEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      int i;
      do
      {
        i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        }
      } while (parseUnknownField(paramCodedInputStreamMicro, i));
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro) {}
  }
  
  public static final class EventPerformer
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasImageUrl;
    private boolean hasName;
    private String imageUrl_ = "";
    private String name_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getImageUrl()
    {
      return this.imageUrl_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
      }
      if (hasImageUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getImageUrl());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasImageUrl()
    {
      return this.hasImageUrl;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public EventPerformer mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        }
        setImageUrl(paramCodedInputStreamMicro.readString());
      }
    }
    
    public EventPerformer setImageUrl(String paramString)
    {
      this.hasImageUrl = true;
      this.imageUrl_ = paramString;
      return this;
    }
    
    public EventPerformer setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(1, getName());
      }
      if (hasImageUrl()) {
        paramCodedOutputStreamMicro.writeString(2, getImageUrl());
      }
    }
  }
  
  public static final class EventTicketSeatInfo
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasSeat;
    private boolean hasSeatRow;
    private boolean hasSeatSection;
    private boolean hasSeatType;
    private boolean hasUnderName;
    private String seatRow_ = "";
    private String seatSection_ = "";
    private String seatType_ = "";
    private String seat_ = "";
    private String underName_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getSeat()
    {
      return this.seat_;
    }
    
    public String getSeatRow()
    {
      return this.seatRow_;
    }
    
    public String getSeatSection()
    {
      return this.seatSection_;
    }
    
    public String getSeatType()
    {
      return this.seatType_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSeatSection();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getSeatSection());
      }
      if (hasSeatRow()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSeatRow());
      }
      if (hasSeatType()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getSeatType());
      }
      if (hasSeat()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getSeat());
      }
      if (hasUnderName()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getUnderName());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getUnderName()
    {
      return this.underName_;
    }
    
    public boolean hasSeat()
    {
      return this.hasSeat;
    }
    
    public boolean hasSeatRow()
    {
      return this.hasSeatRow;
    }
    
    public boolean hasSeatSection()
    {
      return this.hasSeatSection;
    }
    
    public boolean hasSeatType()
    {
      return this.hasSeatType;
    }
    
    public boolean hasUnderName()
    {
      return this.hasUnderName;
    }
    
    public EventTicketSeatInfo mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setSeatSection(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSeatRow(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setSeatType(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setSeat(paramCodedInputStreamMicro.readString());
          break;
        }
        setUnderName(paramCodedInputStreamMicro.readString());
      }
    }
    
    public EventTicketSeatInfo setSeat(String paramString)
    {
      this.hasSeat = true;
      this.seat_ = paramString;
      return this;
    }
    
    public EventTicketSeatInfo setSeatRow(String paramString)
    {
      this.hasSeatRow = true;
      this.seatRow_ = paramString;
      return this;
    }
    
    public EventTicketSeatInfo setSeatSection(String paramString)
    {
      this.hasSeatSection = true;
      this.seatSection_ = paramString;
      return this;
    }
    
    public EventTicketSeatInfo setSeatType(String paramString)
    {
      this.hasSeatType = true;
      this.seatType_ = paramString;
      return this;
    }
    
    public EventTicketSeatInfo setUnderName(String paramString)
    {
      this.hasUnderName = true;
      this.underName_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSeatSection()) {
        paramCodedOutputStreamMicro.writeString(1, getSeatSection());
      }
      if (hasSeatRow()) {
        paramCodedOutputStreamMicro.writeString(2, getSeatRow());
      }
      if (hasSeatType()) {
        paramCodedOutputStreamMicro.writeString(3, getSeatType());
      }
      if (hasSeat()) {
        paramCodedOutputStreamMicro.writeString(4, getSeat());
      }
      if (hasUnderName()) {
        paramCodedOutputStreamMicro.writeString(5, getUnderName());
      }
    }
  }
  
  public static final class ExecutedUserAction
    extends MessageMicro
  {
    private Sidekick.Action action_ = null;
    private Sidekick.Question answeredTrainingQuestion_ = null;
    private int cachedSize = -1;
    private int cardHeightPixels_ = 0;
    private Sidekick.ClickAction clickTarget_ = null;
    private ByteStringMicro compressedEncrypted_ = ByteStringMicro.EMPTY;
    private Sidekick.PlaceData customPlace_ = null;
    private Sidekick.Location editedPlaceLocation_ = null;
    private ByteStringMicro encrypted_ = ByteStringMicro.EMPTY;
    private Sidekick.Entry entry_ = null;
    private long executionTimeMs_ = 0L;
    private boolean hasAction;
    private boolean hasAnsweredTrainingQuestion;
    private boolean hasCardHeightPixels;
    private boolean hasClickTarget;
    private boolean hasCompressedEncrypted;
    private boolean hasCustomPlace;
    private boolean hasEditedPlaceLocation;
    private boolean hasEncrypted;
    private boolean hasEntry;
    private boolean hasExecutionTimeMs;
    private boolean hasIsPortrait;
    private boolean hasTargetDisplay;
    private boolean hasTimestampSeconds;
    private boolean hasTimezoneOffsetSeconds;
    private boolean hasUserClientId;
    private List<Sidekick.Entry> inputEntry_ = Collections.emptyList();
    private boolean isPortrait_ = false;
    private int targetDisplay_ = 1;
    private long timestampSeconds_ = 0L;
    private int timezoneOffsetSeconds_ = 0;
    private long userClientId_ = 0L;
    
    public ExecutedUserAction addInputEntry(Sidekick.Entry paramEntry)
    {
      if (paramEntry == null) {
        throw new NullPointerException();
      }
      if (this.inputEntry_.isEmpty()) {
        this.inputEntry_ = new ArrayList();
      }
      this.inputEntry_.add(paramEntry);
      return this;
    }
    
    public Sidekick.Action getAction()
    {
      return this.action_;
    }
    
    public Sidekick.Question getAnsweredTrainingQuestion()
    {
      return this.answeredTrainingQuestion_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getCardHeightPixels()
    {
      return this.cardHeightPixels_;
    }
    
    public Sidekick.ClickAction getClickTarget()
    {
      return this.clickTarget_;
    }
    
    public ByteStringMicro getCompressedEncrypted()
    {
      return this.compressedEncrypted_;
    }
    
    public Sidekick.PlaceData getCustomPlace()
    {
      return this.customPlace_;
    }
    
    public Sidekick.Location getEditedPlaceLocation()
    {
      return this.editedPlaceLocation_;
    }
    
    public ByteStringMicro getEncrypted()
    {
      return this.encrypted_;
    }
    
    public Sidekick.Entry getEntry()
    {
      return this.entry_;
    }
    
    public long getExecutionTimeMs()
    {
      return this.executionTimeMs_;
    }
    
    public List<Sidekick.Entry> getInputEntryList()
    {
      return this.inputEntry_;
    }
    
    public boolean getIsPortrait()
    {
      return this.isPortrait_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasAction();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getAction());
      }
      if (hasEntry()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getEntry());
      }
      if (hasTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(3, getTimestampSeconds());
      }
      if (hasTargetDisplay()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getTargetDisplay());
      }
      Iterator localIterator = getInputEntryList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, (Sidekick.Entry)localIterator.next());
      }
      if (hasCustomPlace()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, getCustomPlace());
      }
      if (hasEditedPlaceLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, getEditedPlaceLocation());
      }
      if (hasEncrypted()) {
        i += CodedOutputStreamMicro.computeBytesSize(9, getEncrypted());
      }
      if (hasClickTarget()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getClickTarget());
      }
      if (hasExecutionTimeMs()) {
        i += CodedOutputStreamMicro.computeInt64Size(11, getExecutionTimeMs());
      }
      if (hasTimezoneOffsetSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(12, getTimezoneOffsetSeconds());
      }
      if (hasAnsweredTrainingQuestion()) {
        i += CodedOutputStreamMicro.computeMessageSize(13, getAnsweredTrainingQuestion());
      }
      if (hasUserClientId()) {
        i += CodedOutputStreamMicro.computeInt64Size(15, getUserClientId());
      }
      if (hasIsPortrait()) {
        i += CodedOutputStreamMicro.computeBoolSize(16, getIsPortrait());
      }
      if (hasCardHeightPixels()) {
        i += CodedOutputStreamMicro.computeInt32Size(17, getCardHeightPixels());
      }
      if (hasCompressedEncrypted()) {
        i += CodedOutputStreamMicro.computeBytesSize(18, getCompressedEncrypted());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getTargetDisplay()
    {
      return this.targetDisplay_;
    }
    
    public long getTimestampSeconds()
    {
      return this.timestampSeconds_;
    }
    
    public int getTimezoneOffsetSeconds()
    {
      return this.timezoneOffsetSeconds_;
    }
    
    public long getUserClientId()
    {
      return this.userClientId_;
    }
    
    public boolean hasAction()
    {
      return this.hasAction;
    }
    
    public boolean hasAnsweredTrainingQuestion()
    {
      return this.hasAnsweredTrainingQuestion;
    }
    
    public boolean hasCardHeightPixels()
    {
      return this.hasCardHeightPixels;
    }
    
    public boolean hasClickTarget()
    {
      return this.hasClickTarget;
    }
    
    public boolean hasCompressedEncrypted()
    {
      return this.hasCompressedEncrypted;
    }
    
    public boolean hasCustomPlace()
    {
      return this.hasCustomPlace;
    }
    
    public boolean hasEditedPlaceLocation()
    {
      return this.hasEditedPlaceLocation;
    }
    
    public boolean hasEncrypted()
    {
      return this.hasEncrypted;
    }
    
    public boolean hasEntry()
    {
      return this.hasEntry;
    }
    
    public boolean hasExecutionTimeMs()
    {
      return this.hasExecutionTimeMs;
    }
    
    public boolean hasIsPortrait()
    {
      return this.hasIsPortrait;
    }
    
    public boolean hasTargetDisplay()
    {
      return this.hasTargetDisplay;
    }
    
    public boolean hasTimestampSeconds()
    {
      return this.hasTimestampSeconds;
    }
    
    public boolean hasTimezoneOffsetSeconds()
    {
      return this.hasTimezoneOffsetSeconds;
    }
    
    public boolean hasUserClientId()
    {
      return this.hasUserClientId;
    }
    
    public ExecutedUserAction mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Action localAction = new Sidekick.Action();
          paramCodedInputStreamMicro.readMessage(localAction);
          setAction(localAction);
          break;
        case 18: 
          Sidekick.Entry localEntry2 = new Sidekick.Entry();
          paramCodedInputStreamMicro.readMessage(localEntry2);
          setEntry(localEntry2);
          break;
        case 24: 
          setTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 32: 
          setTargetDisplay(paramCodedInputStreamMicro.readInt32());
          break;
        case 50: 
          Sidekick.Entry localEntry1 = new Sidekick.Entry();
          paramCodedInputStreamMicro.readMessage(localEntry1);
          addInputEntry(localEntry1);
          break;
        case 58: 
          Sidekick.PlaceData localPlaceData = new Sidekick.PlaceData();
          paramCodedInputStreamMicro.readMessage(localPlaceData);
          setCustomPlace(localPlaceData);
          break;
        case 66: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setEditedPlaceLocation(localLocation);
          break;
        case 74: 
          setEncrypted(paramCodedInputStreamMicro.readBytes());
          break;
        case 82: 
          Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction);
          setClickTarget(localClickAction);
          break;
        case 88: 
          setExecutionTimeMs(paramCodedInputStreamMicro.readInt64());
          break;
        case 96: 
          setTimezoneOffsetSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 106: 
          Sidekick.Question localQuestion = new Sidekick.Question();
          paramCodedInputStreamMicro.readMessage(localQuestion);
          setAnsweredTrainingQuestion(localQuestion);
          break;
        case 120: 
          setUserClientId(paramCodedInputStreamMicro.readInt64());
          break;
        case 128: 
          setIsPortrait(paramCodedInputStreamMicro.readBool());
          break;
        case 136: 
          setCardHeightPixels(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setCompressedEncrypted(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public ExecutedUserAction setAction(Sidekick.Action paramAction)
    {
      if (paramAction == null) {
        throw new NullPointerException();
      }
      this.hasAction = true;
      this.action_ = paramAction;
      return this;
    }
    
    public ExecutedUserAction setAnsweredTrainingQuestion(Sidekick.Question paramQuestion)
    {
      if (paramQuestion == null) {
        throw new NullPointerException();
      }
      this.hasAnsweredTrainingQuestion = true;
      this.answeredTrainingQuestion_ = paramQuestion;
      return this;
    }
    
    public ExecutedUserAction setCardHeightPixels(int paramInt)
    {
      this.hasCardHeightPixels = true;
      this.cardHeightPixels_ = paramInt;
      return this;
    }
    
    public ExecutedUserAction setClickTarget(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasClickTarget = true;
      this.clickTarget_ = paramClickAction;
      return this;
    }
    
    public ExecutedUserAction setCompressedEncrypted(ByteStringMicro paramByteStringMicro)
    {
      this.hasCompressedEncrypted = true;
      this.compressedEncrypted_ = paramByteStringMicro;
      return this;
    }
    
    public ExecutedUserAction setCustomPlace(Sidekick.PlaceData paramPlaceData)
    {
      if (paramPlaceData == null) {
        throw new NullPointerException();
      }
      this.hasCustomPlace = true;
      this.customPlace_ = paramPlaceData;
      return this;
    }
    
    public ExecutedUserAction setEditedPlaceLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasEditedPlaceLocation = true;
      this.editedPlaceLocation_ = paramLocation;
      return this;
    }
    
    public ExecutedUserAction setEncrypted(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncrypted = true;
      this.encrypted_ = paramByteStringMicro;
      return this;
    }
    
    public ExecutedUserAction setEntry(Sidekick.Entry paramEntry)
    {
      if (paramEntry == null) {
        throw new NullPointerException();
      }
      this.hasEntry = true;
      this.entry_ = paramEntry;
      return this;
    }
    
    public ExecutedUserAction setExecutionTimeMs(long paramLong)
    {
      this.hasExecutionTimeMs = true;
      this.executionTimeMs_ = paramLong;
      return this;
    }
    
    public ExecutedUserAction setIsPortrait(boolean paramBoolean)
    {
      this.hasIsPortrait = true;
      this.isPortrait_ = paramBoolean;
      return this;
    }
    
    public ExecutedUserAction setTargetDisplay(int paramInt)
    {
      this.hasTargetDisplay = true;
      this.targetDisplay_ = paramInt;
      return this;
    }
    
    public ExecutedUserAction setTimestampSeconds(long paramLong)
    {
      this.hasTimestampSeconds = true;
      this.timestampSeconds_ = paramLong;
      return this;
    }
    
    public ExecutedUserAction setTimezoneOffsetSeconds(int paramInt)
    {
      this.hasTimezoneOffsetSeconds = true;
      this.timezoneOffsetSeconds_ = paramInt;
      return this;
    }
    
    public ExecutedUserAction setUserClientId(long paramLong)
    {
      this.hasUserClientId = true;
      this.userClientId_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasAction()) {
        paramCodedOutputStreamMicro.writeMessage(1, getAction());
      }
      if (hasEntry()) {
        paramCodedOutputStreamMicro.writeMessage(2, getEntry());
      }
      if (hasTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(3, getTimestampSeconds());
      }
      if (hasTargetDisplay()) {
        paramCodedOutputStreamMicro.writeInt32(4, getTargetDisplay());
      }
      Iterator localIterator = getInputEntryList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(6, (Sidekick.Entry)localIterator.next());
      }
      if (hasCustomPlace()) {
        paramCodedOutputStreamMicro.writeMessage(7, getCustomPlace());
      }
      if (hasEditedPlaceLocation()) {
        paramCodedOutputStreamMicro.writeMessage(8, getEditedPlaceLocation());
      }
      if (hasEncrypted()) {
        paramCodedOutputStreamMicro.writeBytes(9, getEncrypted());
      }
      if (hasClickTarget()) {
        paramCodedOutputStreamMicro.writeMessage(10, getClickTarget());
      }
      if (hasExecutionTimeMs()) {
        paramCodedOutputStreamMicro.writeInt64(11, getExecutionTimeMs());
      }
      if (hasTimezoneOffsetSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(12, getTimezoneOffsetSeconds());
      }
      if (hasAnsweredTrainingQuestion()) {
        paramCodedOutputStreamMicro.writeMessage(13, getAnsweredTrainingQuestion());
      }
      if (hasUserClientId()) {
        paramCodedOutputStreamMicro.writeInt64(15, getUserClientId());
      }
      if (hasIsPortrait()) {
        paramCodedOutputStreamMicro.writeBool(16, getIsPortrait());
      }
      if (hasCardHeightPixels()) {
        paramCodedOutputStreamMicro.writeInt32(17, getCardHeightPixels());
      }
      if (hasCompressedEncrypted()) {
        paramCodedOutputStreamMicro.writeBytes(18, getCompressedEncrypted());
      }
    }
  }
  
  public static final class ExperimentOverrides
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Integer> forceExperimentId_ = Collections.emptyList();
    
    public ExperimentOverrides addForceExperimentId(int paramInt)
    {
      if (this.forceExperimentId_.isEmpty()) {
        this.forceExperimentId_ = new ArrayList();
      }
      this.forceExperimentId_.add(Integer.valueOf(paramInt));
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public List<Integer> getForceExperimentIdList()
    {
      return this.forceExperimentId_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getForceExperimentIdList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator.next()).intValue());
      }
      int j = 0 + i + 1 * getForceExperimentIdList().size();
      this.cachedSize = j;
      return j;
    }
    
    public ExperimentOverrides mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        addForceExperimentId(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getForceExperimentIdList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeInt32(1, ((Integer)localIterator.next()).intValue());
      }
    }
  }
  
  public static final class FetchConfigurationQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      this.cachedSize = 0;
      return 0;
    }
    
    public FetchConfigurationQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      int i;
      do
      {
        i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        }
      } while (parseUnknownField(paramCodedInputStreamMicro, i));
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro) {}
  }
  
  public static final class FetchConfigurationResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.Configuration configuration_ = null;
    private int error_ = 12;
    private boolean hasConfiguration;
    private boolean hasError;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Configuration getConfiguration()
    {
      return this.configuration_;
    }
    
    public int getError()
    {
      return this.error_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasConfiguration();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getConfiguration());
      }
      if (hasError()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getError());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasConfiguration()
    {
      return this.hasConfiguration;
    }
    
    public boolean hasError()
    {
      return this.hasError;
    }
    
    public FetchConfigurationResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Configuration localConfiguration = new Sidekick.Configuration();
          paramCodedInputStreamMicro.readMessage(localConfiguration);
          setConfiguration(localConfiguration);
          break;
        }
        setError(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public FetchConfigurationResponse setConfiguration(Sidekick.Configuration paramConfiguration)
    {
      if (paramConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasConfiguration = true;
      this.configuration_ = paramConfiguration;
      return this;
    }
    
    public FetchConfigurationResponse setError(int paramInt)
    {
      this.hasError = true;
      this.error_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(1, getConfiguration());
      }
      if (hasError()) {
        paramCodedOutputStreamMicro.writeInt32(2, getError());
      }
    }
  }
  
  public static final class FetchStaticEntitiesQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Integer> staticEntities_ = Collections.emptyList();
    
    public FetchStaticEntitiesQuery addStaticEntities(int paramInt)
    {
      if (this.staticEntities_.isEmpty()) {
        this.staticEntities_ = new ArrayList();
      }
      this.staticEntities_.add(Integer.valueOf(paramInt));
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getStaticEntitiesList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator.next()).intValue());
      }
      int j = 0 + i + 1 * getStaticEntitiesList().size();
      this.cachedSize = j;
      return j;
    }
    
    public List<Integer> getStaticEntitiesList()
    {
      return this.staticEntities_;
    }
    
    public FetchStaticEntitiesQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        addStaticEntities(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getStaticEntitiesList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeInt32(1, ((Integer)localIterator.next()).intValue());
      }
    }
  }
  
  public static final class FetchStaticEntitiesResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasSportsEntities;
    private Sidekick.SportsTeams sportsEntities_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSportsEntities();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getSportsEntities());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.SportsTeams getSportsEntities()
    {
      return this.sportsEntities_;
    }
    
    public boolean hasSportsEntities()
    {
      return this.hasSportsEntities;
    }
    
    public FetchStaticEntitiesResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.SportsTeams localSportsTeams = new Sidekick.SportsTeams();
        paramCodedInputStreamMicro.readMessage(localSportsTeams);
        setSportsEntities(localSportsTeams);
      }
    }
    
    public FetchStaticEntitiesResponse setSportsEntities(Sidekick.SportsTeams paramSportsTeams)
    {
      if (paramSportsTeams == null) {
        throw new NullPointerException();
      }
      this.hasSportsEntities = true;
      this.sportsEntities_ = paramSportsTeams;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSportsEntities()) {
        paramCodedOutputStreamMicro.writeMessage(1, getSportsEntities());
      }
    }
  }
  
  public static final class FlightStatusEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Flight> flight_ = Collections.emptyList();
    
    public FlightStatusEntry addFlight(Flight paramFlight)
    {
      if (paramFlight == null) {
        throw new NullPointerException();
      }
      if (this.flight_.isEmpty()) {
        this.flight_ = new ArrayList();
      }
      this.flight_.add(paramFlight);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Flight getFlight(int paramInt)
    {
      return (Flight)this.flight_.get(paramInt);
    }
    
    public int getFlightCount()
    {
      return this.flight_.size();
    }
    
    public List<Flight> getFlightList()
    {
      return this.flight_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getFlightList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Flight)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public FlightStatusEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Flight localFlight = new Flight();
        paramCodedInputStreamMicro.readMessage(localFlight);
        addFlight(localFlight);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getFlightList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Flight)localIterator.next());
      }
    }
    
    public static final class Airport
      extends MessageMicro
    {
      private int cachedSize = -1;
      private String code_ = "";
      private boolean hasCode;
      private boolean hasLocation;
      private boolean hasRoute;
      private boolean hasUserAtAirport;
      private Sidekick.Location location_ = null;
      private Sidekick.CommuteSummary route_ = null;
      private boolean userAtAirport_ = false;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public String getCode()
      {
        return this.code_;
      }
      
      public Sidekick.Location getLocation()
      {
        return this.location_;
      }
      
      public Sidekick.CommuteSummary getRoute()
      {
        return this.route_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasCode();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getCode());
        }
        if (hasLocation()) {
          i += CodedOutputStreamMicro.computeMessageSize(2, getLocation());
        }
        if (hasRoute()) {
          i += CodedOutputStreamMicro.computeMessageSize(3, getRoute());
        }
        if (hasUserAtAirport()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getUserAtAirport());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getUserAtAirport()
      {
        return this.userAtAirport_;
      }
      
      public boolean hasCode()
      {
        return this.hasCode;
      }
      
      public boolean hasLocation()
      {
        return this.hasLocation;
      }
      
      public boolean hasRoute()
      {
        return this.hasRoute;
      }
      
      public boolean hasUserAtAirport()
      {
        return this.hasUserAtAirport;
      }
      
      public Airport mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setCode(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            Sidekick.Location localLocation = new Sidekick.Location();
            paramCodedInputStreamMicro.readMessage(localLocation);
            setLocation(localLocation);
            break;
          case 26: 
            Sidekick.CommuteSummary localCommuteSummary = new Sidekick.CommuteSummary();
            paramCodedInputStreamMicro.readMessage(localCommuteSummary);
            setRoute(localCommuteSummary);
            break;
          }
          setUserAtAirport(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public Airport setCode(String paramString)
      {
        this.hasCode = true;
        this.code_ = paramString;
        return this;
      }
      
      public Airport setLocation(Sidekick.Location paramLocation)
      {
        if (paramLocation == null) {
          throw new NullPointerException();
        }
        this.hasLocation = true;
        this.location_ = paramLocation;
        return this;
      }
      
      public Airport setRoute(Sidekick.CommuteSummary paramCommuteSummary)
      {
        if (paramCommuteSummary == null) {
          throw new NullPointerException();
        }
        this.hasRoute = true;
        this.route_ = paramCommuteSummary;
        return this;
      }
      
      public Airport setUserAtAirport(boolean paramBoolean)
      {
        this.hasUserAtAirport = true;
        this.userAtAirport_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasCode()) {
          paramCodedOutputStreamMicro.writeString(1, getCode());
        }
        if (hasLocation()) {
          paramCodedOutputStreamMicro.writeMessage(2, getLocation());
        }
        if (hasRoute()) {
          paramCodedOutputStreamMicro.writeMessage(3, getRoute());
        }
        if (hasUserAtAirport()) {
          paramCodedOutputStreamMicro.writeBool(4, getUserAtAirport());
        }
      }
    }
    
    public static final class Flight
      extends MessageMicro
    {
      private String airlineCode_ = "";
      private String airlineName_ = "";
      private Sidekick.FlightStatusEntry.Airport arrivalAirport_ = null;
      private String arrivalGate_ = "";
      private String arrivalTerminal_ = "";
      private Sidekick.FlightStatusEntry.Time arrivalTime_ = null;
      private int cachedSize = -1;
      private Sidekick.FlightStatusEntry.Airport departureAirport_ = null;
      private String departureGate_ = "";
      private String departureTerminal_ = "";
      private Sidekick.FlightStatusEntry.Time departureTime_ = null;
      private String detailsUrl_ = "";
      private Sidekick.FlightStatusEntry.Airport diversionAirport_ = null;
      private String diversionGate_ = "";
      private String diversionTerminal_ = "";
      private String flightNumber_ = "";
      private List<Sidekick.GmailReference> gmailReference_ = Collections.emptyList();
      private boolean hasAirlineCode;
      private boolean hasAirlineName;
      private boolean hasArrivalAirport;
      private boolean hasArrivalGate;
      private boolean hasArrivalTerminal;
      private boolean hasArrivalTime;
      private boolean hasDepartureAirport;
      private boolean hasDepartureGate;
      private boolean hasDepartureTerminal;
      private boolean hasDepartureTime;
      private boolean hasDetailsUrl;
      private boolean hasDiversionAirport;
      private boolean hasDiversionGate;
      private boolean hasDiversionTerminal;
      private boolean hasFlightNumber;
      private boolean hasLastUpdatedSecondsSinceEpoch;
      private boolean hasNotificationDetails;
      private boolean hasOperatingAirlineCode;
      private boolean hasOperatingAirlineName;
      private boolean hasStatus;
      private boolean hasStatusCode;
      private long lastUpdatedSecondsSinceEpoch_ = 0L;
      private Sidekick.FlightStatusEntry.NotificationDetails notificationDetails_ = null;
      private String operatingAirlineCode_ = "";
      private String operatingAirlineName_ = "";
      private int statusCode_ = 0;
      private String status_ = "";
      
      public Flight addGmailReference(Sidekick.GmailReference paramGmailReference)
      {
        if (paramGmailReference == null) {
          throw new NullPointerException();
        }
        if (this.gmailReference_.isEmpty()) {
          this.gmailReference_ = new ArrayList();
        }
        this.gmailReference_.add(paramGmailReference);
        return this;
      }
      
      public String getAirlineCode()
      {
        return this.airlineCode_;
      }
      
      public String getAirlineName()
      {
        return this.airlineName_;
      }
      
      public Sidekick.FlightStatusEntry.Airport getArrivalAirport()
      {
        return this.arrivalAirport_;
      }
      
      public String getArrivalGate()
      {
        return this.arrivalGate_;
      }
      
      public String getArrivalTerminal()
      {
        return this.arrivalTerminal_;
      }
      
      public Sidekick.FlightStatusEntry.Time getArrivalTime()
      {
        return this.arrivalTime_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.FlightStatusEntry.Airport getDepartureAirport()
      {
        return this.departureAirport_;
      }
      
      public String getDepartureGate()
      {
        return this.departureGate_;
      }
      
      public String getDepartureTerminal()
      {
        return this.departureTerminal_;
      }
      
      public Sidekick.FlightStatusEntry.Time getDepartureTime()
      {
        return this.departureTime_;
      }
      
      public String getDetailsUrl()
      {
        return this.detailsUrl_;
      }
      
      public Sidekick.FlightStatusEntry.Airport getDiversionAirport()
      {
        return this.diversionAirport_;
      }
      
      public String getDiversionGate()
      {
        return this.diversionGate_;
      }
      
      public String getDiversionTerminal()
      {
        return this.diversionTerminal_;
      }
      
      public String getFlightNumber()
      {
        return this.flightNumber_;
      }
      
      public int getGmailReferenceCount()
      {
        return this.gmailReference_.size();
      }
      
      public List<Sidekick.GmailReference> getGmailReferenceList()
      {
        return this.gmailReference_;
      }
      
      public long getLastUpdatedSecondsSinceEpoch()
      {
        return this.lastUpdatedSecondsSinceEpoch_;
      }
      
      public Sidekick.FlightStatusEntry.NotificationDetails getNotificationDetails()
      {
        return this.notificationDetails_;
      }
      
      public String getOperatingAirlineCode()
      {
        return this.operatingAirlineCode_;
      }
      
      public String getOperatingAirlineName()
      {
        return this.operatingAirlineName_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasStatusCode();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getStatusCode());
        }
        if (hasStatus()) {
          i += CodedOutputStreamMicro.computeStringSize(2, getStatus());
        }
        if (hasLastUpdatedSecondsSinceEpoch()) {
          i += CodedOutputStreamMicro.computeInt64Size(3, getLastUpdatedSecondsSinceEpoch());
        }
        if (hasAirlineCode()) {
          i += CodedOutputStreamMicro.computeStringSize(4, getAirlineCode());
        }
        if (hasAirlineName()) {
          i += CodedOutputStreamMicro.computeStringSize(5, getAirlineName());
        }
        if (hasDepartureAirport()) {
          i += CodedOutputStreamMicro.computeMessageSize(6, getDepartureAirport());
        }
        if (hasDepartureTime()) {
          i += CodedOutputStreamMicro.computeMessageSize(7, getDepartureTime());
        }
        if (hasDepartureTerminal()) {
          i += CodedOutputStreamMicro.computeStringSize(8, getDepartureTerminal());
        }
        if (hasDepartureGate()) {
          i += CodedOutputStreamMicro.computeStringSize(9, getDepartureGate());
        }
        if (hasArrivalAirport()) {
          i += CodedOutputStreamMicro.computeMessageSize(10, getArrivalAirport());
        }
        if (hasArrivalTime()) {
          i += CodedOutputStreamMicro.computeMessageSize(11, getArrivalTime());
        }
        if (hasArrivalTerminal()) {
          i += CodedOutputStreamMicro.computeStringSize(12, getArrivalTerminal());
        }
        if (hasArrivalGate()) {
          i += CodedOutputStreamMicro.computeStringSize(13, getArrivalGate());
        }
        if (hasDiversionAirport()) {
          i += CodedOutputStreamMicro.computeMessageSize(14, getDiversionAirport());
        }
        if (hasDiversionTerminal()) {
          i += CodedOutputStreamMicro.computeStringSize(15, getDiversionTerminal());
        }
        if (hasDiversionGate()) {
          i += CodedOutputStreamMicro.computeStringSize(16, getDiversionGate());
        }
        if (hasFlightNumber()) {
          i += CodedOutputStreamMicro.computeStringSize(17, getFlightNumber());
        }
        if (hasDetailsUrl()) {
          i += CodedOutputStreamMicro.computeStringSize(18, getDetailsUrl());
        }
        Iterator localIterator = getGmailReferenceList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(19, (Sidekick.GmailReference)localIterator.next());
        }
        if (hasNotificationDetails()) {
          i += CodedOutputStreamMicro.computeMessageSize(20, getNotificationDetails());
        }
        if (hasOperatingAirlineName()) {
          i += CodedOutputStreamMicro.computeStringSize(21, getOperatingAirlineName());
        }
        if (hasOperatingAirlineCode()) {
          i += CodedOutputStreamMicro.computeStringSize(22, getOperatingAirlineCode());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getStatus()
      {
        return this.status_;
      }
      
      public int getStatusCode()
      {
        return this.statusCode_;
      }
      
      public boolean hasAirlineCode()
      {
        return this.hasAirlineCode;
      }
      
      public boolean hasAirlineName()
      {
        return this.hasAirlineName;
      }
      
      public boolean hasArrivalAirport()
      {
        return this.hasArrivalAirport;
      }
      
      public boolean hasArrivalGate()
      {
        return this.hasArrivalGate;
      }
      
      public boolean hasArrivalTerminal()
      {
        return this.hasArrivalTerminal;
      }
      
      public boolean hasArrivalTime()
      {
        return this.hasArrivalTime;
      }
      
      public boolean hasDepartureAirport()
      {
        return this.hasDepartureAirport;
      }
      
      public boolean hasDepartureGate()
      {
        return this.hasDepartureGate;
      }
      
      public boolean hasDepartureTerminal()
      {
        return this.hasDepartureTerminal;
      }
      
      public boolean hasDepartureTime()
      {
        return this.hasDepartureTime;
      }
      
      public boolean hasDetailsUrl()
      {
        return this.hasDetailsUrl;
      }
      
      public boolean hasDiversionAirport()
      {
        return this.hasDiversionAirport;
      }
      
      public boolean hasDiversionGate()
      {
        return this.hasDiversionGate;
      }
      
      public boolean hasDiversionTerminal()
      {
        return this.hasDiversionTerminal;
      }
      
      public boolean hasFlightNumber()
      {
        return this.hasFlightNumber;
      }
      
      public boolean hasLastUpdatedSecondsSinceEpoch()
      {
        return this.hasLastUpdatedSecondsSinceEpoch;
      }
      
      public boolean hasNotificationDetails()
      {
        return this.hasNotificationDetails;
      }
      
      public boolean hasOperatingAirlineCode()
      {
        return this.hasOperatingAirlineCode;
      }
      
      public boolean hasOperatingAirlineName()
      {
        return this.hasOperatingAirlineName;
      }
      
      public boolean hasStatus()
      {
        return this.hasStatus;
      }
      
      public boolean hasStatusCode()
      {
        return this.hasStatusCode;
      }
      
      public Flight mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setStatusCode(paramCodedInputStreamMicro.readInt32());
            break;
          case 18: 
            setStatus(paramCodedInputStreamMicro.readString());
            break;
          case 24: 
            setLastUpdatedSecondsSinceEpoch(paramCodedInputStreamMicro.readInt64());
            break;
          case 34: 
            setAirlineCode(paramCodedInputStreamMicro.readString());
            break;
          case 42: 
            setAirlineName(paramCodedInputStreamMicro.readString());
            break;
          case 50: 
            Sidekick.FlightStatusEntry.Airport localAirport3 = new Sidekick.FlightStatusEntry.Airport();
            paramCodedInputStreamMicro.readMessage(localAirport3);
            setDepartureAirport(localAirport3);
            break;
          case 58: 
            Sidekick.FlightStatusEntry.Time localTime2 = new Sidekick.FlightStatusEntry.Time();
            paramCodedInputStreamMicro.readMessage(localTime2);
            setDepartureTime(localTime2);
            break;
          case 66: 
            setDepartureTerminal(paramCodedInputStreamMicro.readString());
            break;
          case 74: 
            setDepartureGate(paramCodedInputStreamMicro.readString());
            break;
          case 82: 
            Sidekick.FlightStatusEntry.Airport localAirport2 = new Sidekick.FlightStatusEntry.Airport();
            paramCodedInputStreamMicro.readMessage(localAirport2);
            setArrivalAirport(localAirport2);
            break;
          case 90: 
            Sidekick.FlightStatusEntry.Time localTime1 = new Sidekick.FlightStatusEntry.Time();
            paramCodedInputStreamMicro.readMessage(localTime1);
            setArrivalTime(localTime1);
            break;
          case 98: 
            setArrivalTerminal(paramCodedInputStreamMicro.readString());
            break;
          case 106: 
            setArrivalGate(paramCodedInputStreamMicro.readString());
            break;
          case 114: 
            Sidekick.FlightStatusEntry.Airport localAirport1 = new Sidekick.FlightStatusEntry.Airport();
            paramCodedInputStreamMicro.readMessage(localAirport1);
            setDiversionAirport(localAirport1);
            break;
          case 122: 
            setDiversionTerminal(paramCodedInputStreamMicro.readString());
            break;
          case 130: 
            setDiversionGate(paramCodedInputStreamMicro.readString());
            break;
          case 138: 
            setFlightNumber(paramCodedInputStreamMicro.readString());
            break;
          case 146: 
            setDetailsUrl(paramCodedInputStreamMicro.readString());
            break;
          case 154: 
            Sidekick.GmailReference localGmailReference = new Sidekick.GmailReference();
            paramCodedInputStreamMicro.readMessage(localGmailReference);
            addGmailReference(localGmailReference);
            break;
          case 162: 
            Sidekick.FlightStatusEntry.NotificationDetails localNotificationDetails = new Sidekick.FlightStatusEntry.NotificationDetails();
            paramCodedInputStreamMicro.readMessage(localNotificationDetails);
            setNotificationDetails(localNotificationDetails);
            break;
          case 170: 
            setOperatingAirlineName(paramCodedInputStreamMicro.readString());
            break;
          }
          setOperatingAirlineCode(paramCodedInputStreamMicro.readString());
        }
      }
      
      public Flight setAirlineCode(String paramString)
      {
        this.hasAirlineCode = true;
        this.airlineCode_ = paramString;
        return this;
      }
      
      public Flight setAirlineName(String paramString)
      {
        this.hasAirlineName = true;
        this.airlineName_ = paramString;
        return this;
      }
      
      public Flight setArrivalAirport(Sidekick.FlightStatusEntry.Airport paramAirport)
      {
        if (paramAirport == null) {
          throw new NullPointerException();
        }
        this.hasArrivalAirport = true;
        this.arrivalAirport_ = paramAirport;
        return this;
      }
      
      public Flight setArrivalGate(String paramString)
      {
        this.hasArrivalGate = true;
        this.arrivalGate_ = paramString;
        return this;
      }
      
      public Flight setArrivalTerminal(String paramString)
      {
        this.hasArrivalTerminal = true;
        this.arrivalTerminal_ = paramString;
        return this;
      }
      
      public Flight setArrivalTime(Sidekick.FlightStatusEntry.Time paramTime)
      {
        if (paramTime == null) {
          throw new NullPointerException();
        }
        this.hasArrivalTime = true;
        this.arrivalTime_ = paramTime;
        return this;
      }
      
      public Flight setDepartureAirport(Sidekick.FlightStatusEntry.Airport paramAirport)
      {
        if (paramAirport == null) {
          throw new NullPointerException();
        }
        this.hasDepartureAirport = true;
        this.departureAirport_ = paramAirport;
        return this;
      }
      
      public Flight setDepartureGate(String paramString)
      {
        this.hasDepartureGate = true;
        this.departureGate_ = paramString;
        return this;
      }
      
      public Flight setDepartureTerminal(String paramString)
      {
        this.hasDepartureTerminal = true;
        this.departureTerminal_ = paramString;
        return this;
      }
      
      public Flight setDepartureTime(Sidekick.FlightStatusEntry.Time paramTime)
      {
        if (paramTime == null) {
          throw new NullPointerException();
        }
        this.hasDepartureTime = true;
        this.departureTime_ = paramTime;
        return this;
      }
      
      public Flight setDetailsUrl(String paramString)
      {
        this.hasDetailsUrl = true;
        this.detailsUrl_ = paramString;
        return this;
      }
      
      public Flight setDiversionAirport(Sidekick.FlightStatusEntry.Airport paramAirport)
      {
        if (paramAirport == null) {
          throw new NullPointerException();
        }
        this.hasDiversionAirport = true;
        this.diversionAirport_ = paramAirport;
        return this;
      }
      
      public Flight setDiversionGate(String paramString)
      {
        this.hasDiversionGate = true;
        this.diversionGate_ = paramString;
        return this;
      }
      
      public Flight setDiversionTerminal(String paramString)
      {
        this.hasDiversionTerminal = true;
        this.diversionTerminal_ = paramString;
        return this;
      }
      
      public Flight setFlightNumber(String paramString)
      {
        this.hasFlightNumber = true;
        this.flightNumber_ = paramString;
        return this;
      }
      
      public Flight setLastUpdatedSecondsSinceEpoch(long paramLong)
      {
        this.hasLastUpdatedSecondsSinceEpoch = true;
        this.lastUpdatedSecondsSinceEpoch_ = paramLong;
        return this;
      }
      
      public Flight setNotificationDetails(Sidekick.FlightStatusEntry.NotificationDetails paramNotificationDetails)
      {
        if (paramNotificationDetails == null) {
          throw new NullPointerException();
        }
        this.hasNotificationDetails = true;
        this.notificationDetails_ = paramNotificationDetails;
        return this;
      }
      
      public Flight setOperatingAirlineCode(String paramString)
      {
        this.hasOperatingAirlineCode = true;
        this.operatingAirlineCode_ = paramString;
        return this;
      }
      
      public Flight setOperatingAirlineName(String paramString)
      {
        this.hasOperatingAirlineName = true;
        this.operatingAirlineName_ = paramString;
        return this;
      }
      
      public Flight setStatus(String paramString)
      {
        this.hasStatus = true;
        this.status_ = paramString;
        return this;
      }
      
      public Flight setStatusCode(int paramInt)
      {
        this.hasStatusCode = true;
        this.statusCode_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasStatusCode()) {
          paramCodedOutputStreamMicro.writeInt32(1, getStatusCode());
        }
        if (hasStatus()) {
          paramCodedOutputStreamMicro.writeString(2, getStatus());
        }
        if (hasLastUpdatedSecondsSinceEpoch()) {
          paramCodedOutputStreamMicro.writeInt64(3, getLastUpdatedSecondsSinceEpoch());
        }
        if (hasAirlineCode()) {
          paramCodedOutputStreamMicro.writeString(4, getAirlineCode());
        }
        if (hasAirlineName()) {
          paramCodedOutputStreamMicro.writeString(5, getAirlineName());
        }
        if (hasDepartureAirport()) {
          paramCodedOutputStreamMicro.writeMessage(6, getDepartureAirport());
        }
        if (hasDepartureTime()) {
          paramCodedOutputStreamMicro.writeMessage(7, getDepartureTime());
        }
        if (hasDepartureTerminal()) {
          paramCodedOutputStreamMicro.writeString(8, getDepartureTerminal());
        }
        if (hasDepartureGate()) {
          paramCodedOutputStreamMicro.writeString(9, getDepartureGate());
        }
        if (hasArrivalAirport()) {
          paramCodedOutputStreamMicro.writeMessage(10, getArrivalAirport());
        }
        if (hasArrivalTime()) {
          paramCodedOutputStreamMicro.writeMessage(11, getArrivalTime());
        }
        if (hasArrivalTerminal()) {
          paramCodedOutputStreamMicro.writeString(12, getArrivalTerminal());
        }
        if (hasArrivalGate()) {
          paramCodedOutputStreamMicro.writeString(13, getArrivalGate());
        }
        if (hasDiversionAirport()) {
          paramCodedOutputStreamMicro.writeMessage(14, getDiversionAirport());
        }
        if (hasDiversionTerminal()) {
          paramCodedOutputStreamMicro.writeString(15, getDiversionTerminal());
        }
        if (hasDiversionGate()) {
          paramCodedOutputStreamMicro.writeString(16, getDiversionGate());
        }
        if (hasFlightNumber()) {
          paramCodedOutputStreamMicro.writeString(17, getFlightNumber());
        }
        if (hasDetailsUrl()) {
          paramCodedOutputStreamMicro.writeString(18, getDetailsUrl());
        }
        Iterator localIterator = getGmailReferenceList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(19, (Sidekick.GmailReference)localIterator.next());
        }
        if (hasNotificationDetails()) {
          paramCodedOutputStreamMicro.writeMessage(20, getNotificationDetails());
        }
        if (hasOperatingAirlineName()) {
          paramCodedOutputStreamMicro.writeString(21, getOperatingAirlineName());
        }
        if (hasOperatingAirlineCode()) {
          paramCodedOutputStreamMicro.writeString(22, getOperatingAirlineCode());
        }
      }
    }
    
    public static final class NotificationDetails
      extends MessageMicro
    {
      private int arriveMinutesBefore_ = 0;
      private int cachedSize = -1;
      private boolean hasArriveMinutesBefore;
      private boolean hasLeaveByTimeSecondsSinceEpoch;
      private long leaveByTimeSecondsSinceEpoch_ = 0L;
      
      public int getArriveMinutesBefore()
      {
        return this.arriveMinutesBefore_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public long getLeaveByTimeSecondsSinceEpoch()
      {
        return this.leaveByTimeSecondsSinceEpoch_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasLeaveByTimeSecondsSinceEpoch();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getLeaveByTimeSecondsSinceEpoch());
        }
        if (hasArriveMinutesBefore()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getArriveMinutesBefore());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasArriveMinutesBefore()
      {
        return this.hasArriveMinutesBefore;
      }
      
      public boolean hasLeaveByTimeSecondsSinceEpoch()
      {
        return this.hasLeaveByTimeSecondsSinceEpoch;
      }
      
      public NotificationDetails mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setLeaveByTimeSecondsSinceEpoch(paramCodedInputStreamMicro.readInt64());
            break;
          }
          setArriveMinutesBefore(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public NotificationDetails setArriveMinutesBefore(int paramInt)
      {
        this.hasArriveMinutesBefore = true;
        this.arriveMinutesBefore_ = paramInt;
        return this;
      }
      
      public NotificationDetails setLeaveByTimeSecondsSinceEpoch(long paramLong)
      {
        this.hasLeaveByTimeSecondsSinceEpoch = true;
        this.leaveByTimeSecondsSinceEpoch_ = paramLong;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasLeaveByTimeSecondsSinceEpoch()) {
          paramCodedOutputStreamMicro.writeInt64(1, getLeaveByTimeSecondsSinceEpoch());
        }
        if (hasArriveMinutesBefore()) {
          paramCodedOutputStreamMicro.writeInt32(2, getArriveMinutesBefore());
        }
      }
    }
    
    public static final class Time
      extends MessageMicro
    {
      private long actualTimeSecondsSinceEpoch_ = 0L;
      private int cachedSize = -1;
      private boolean hasActualTimeSecondsSinceEpoch;
      private boolean hasScheduledTimeSecondsSinceEpoch;
      private boolean hasTimeZoneId;
      private boolean hasTimeZoneOffsetSeconds;
      private long scheduledTimeSecondsSinceEpoch_ = 0L;
      private String timeZoneId_ = "";
      private int timeZoneOffsetSeconds_ = 0;
      
      public long getActualTimeSecondsSinceEpoch()
      {
        return this.actualTimeSecondsSinceEpoch_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public long getScheduledTimeSecondsSinceEpoch()
      {
        return this.scheduledTimeSecondsSinceEpoch_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasScheduledTimeSecondsSinceEpoch();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getScheduledTimeSecondsSinceEpoch());
        }
        if (hasActualTimeSecondsSinceEpoch()) {
          i += CodedOutputStreamMicro.computeInt64Size(2, getActualTimeSecondsSinceEpoch());
        }
        if (hasTimeZoneOffsetSeconds()) {
          i += CodedOutputStreamMicro.computeInt32Size(3, getTimeZoneOffsetSeconds());
        }
        if (hasTimeZoneId()) {
          i += CodedOutputStreamMicro.computeStringSize(4, getTimeZoneId());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getTimeZoneId()
      {
        return this.timeZoneId_;
      }
      
      public int getTimeZoneOffsetSeconds()
      {
        return this.timeZoneOffsetSeconds_;
      }
      
      public boolean hasActualTimeSecondsSinceEpoch()
      {
        return this.hasActualTimeSecondsSinceEpoch;
      }
      
      public boolean hasScheduledTimeSecondsSinceEpoch()
      {
        return this.hasScheduledTimeSecondsSinceEpoch;
      }
      
      public boolean hasTimeZoneId()
      {
        return this.hasTimeZoneId;
      }
      
      public boolean hasTimeZoneOffsetSeconds()
      {
        return this.hasTimeZoneOffsetSeconds;
      }
      
      public Time mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setScheduledTimeSecondsSinceEpoch(paramCodedInputStreamMicro.readInt64());
            break;
          case 16: 
            setActualTimeSecondsSinceEpoch(paramCodedInputStreamMicro.readInt64());
            break;
          case 24: 
            setTimeZoneOffsetSeconds(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setTimeZoneId(paramCodedInputStreamMicro.readString());
        }
      }
      
      public Time setActualTimeSecondsSinceEpoch(long paramLong)
      {
        this.hasActualTimeSecondsSinceEpoch = true;
        this.actualTimeSecondsSinceEpoch_ = paramLong;
        return this;
      }
      
      public Time setScheduledTimeSecondsSinceEpoch(long paramLong)
      {
        this.hasScheduledTimeSecondsSinceEpoch = true;
        this.scheduledTimeSecondsSinceEpoch_ = paramLong;
        return this;
      }
      
      public Time setTimeZoneId(String paramString)
      {
        this.hasTimeZoneId = true;
        this.timeZoneId_ = paramString;
        return this;
      }
      
      public Time setTimeZoneOffsetSeconds(int paramInt)
      {
        this.hasTimeZoneOffsetSeconds = true;
        this.timeZoneOffsetSeconds_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasScheduledTimeSecondsSinceEpoch()) {
          paramCodedOutputStreamMicro.writeInt64(1, getScheduledTimeSecondsSinceEpoch());
        }
        if (hasActualTimeSecondsSinceEpoch()) {
          paramCodedOutputStreamMicro.writeInt64(2, getActualTimeSecondsSinceEpoch());
        }
        if (hasTimeZoneOffsetSeconds()) {
          paramCodedOutputStreamMicro.writeInt32(3, getTimeZoneOffsetSeconds());
        }
        if (hasTimeZoneId()) {
          paramCodedOutputStreamMicro.writeString(4, getTimeZoneId());
        }
      }
    }
  }
  
  public static final class FrequentPlace
    extends MessageMicro
  {
    private List<Sidekick.PlaceData> alternatePlaceData_ = Collections.emptyList();
    private int cachedSize = -1;
    private ByteStringMicro encodedServerPayload_ = ByteStringMicro.EMPTY;
    private boolean explicitPlaceData_ = false;
    private List<Sidekick.GmailReference> gmailReference_ = Collections.emptyList();
    private boolean hasEncodedServerPayload;
    private boolean hasExplicitPlaceData;
    private boolean hasIsCommuteDestination;
    private boolean hasJustification;
    private boolean hasLocation;
    private boolean hasModifyReservationUrl;
    private boolean hasPlaceData;
    private boolean hasSourceType;
    private boolean isCommuteDestination_ = false;
    private String justification_ = "";
    private Sidekick.Location location_ = null;
    private String modifyReservationUrl_ = "";
    private Sidekick.PlaceData placeData_ = null;
    private int sourceType_ = 1;
    
    public FrequentPlace addAlternatePlaceData(Sidekick.PlaceData paramPlaceData)
    {
      if (paramPlaceData == null) {
        throw new NullPointerException();
      }
      if (this.alternatePlaceData_.isEmpty()) {
        this.alternatePlaceData_ = new ArrayList();
      }
      this.alternatePlaceData_.add(paramPlaceData);
      return this;
    }
    
    public FrequentPlace addGmailReference(Sidekick.GmailReference paramGmailReference)
    {
      if (paramGmailReference == null) {
        throw new NullPointerException();
      }
      if (this.gmailReference_.isEmpty()) {
        this.gmailReference_ = new ArrayList();
      }
      this.gmailReference_.add(paramGmailReference);
      return this;
    }
    
    public FrequentPlace clearAlternatePlaceData()
    {
      this.alternatePlaceData_ = Collections.emptyList();
      return this;
    }
    
    public FrequentPlace clearPlaceData()
    {
      this.hasPlaceData = false;
      this.placeData_ = null;
      return this;
    }
    
    public int getAlternatePlaceDataCount()
    {
      return this.alternatePlaceData_.size();
    }
    
    public List<Sidekick.PlaceData> getAlternatePlaceDataList()
    {
      return this.alternatePlaceData_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public ByteStringMicro getEncodedServerPayload()
    {
      return this.encodedServerPayload_;
    }
    
    public boolean getExplicitPlaceData()
    {
      return this.explicitPlaceData_;
    }
    
    public List<Sidekick.GmailReference> getGmailReferenceList()
    {
      return this.gmailReference_;
    }
    
    public boolean getIsCommuteDestination()
    {
      return this.isCommuteDestination_;
    }
    
    public String getJustification()
    {
      return this.justification_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public String getModifyReservationUrl()
    {
      return this.modifyReservationUrl_;
    }
    
    public Sidekick.PlaceData getPlaceData()
    {
      return this.placeData_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLocation();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(2, getLocation());
      }
      if (hasPlaceData()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getPlaceData());
      }
      if (hasExplicitPlaceData()) {
        i += CodedOutputStreamMicro.computeBoolSize(11, getExplicitPlaceData());
      }
      Iterator localIterator1 = getAlternatePlaceDataList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(12, (Sidekick.PlaceData)localIterator1.next());
      }
      if (hasSourceType()) {
        i += CodedOutputStreamMicro.computeInt32Size(13, getSourceType());
      }
      Iterator localIterator2 = getGmailReferenceList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(14, (Sidekick.GmailReference)localIterator2.next());
      }
      if (hasIsCommuteDestination()) {
        i += CodedOutputStreamMicro.computeBoolSize(15, getIsCommuteDestination());
      }
      if (hasModifyReservationUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(16, getModifyReservationUrl());
      }
      if (hasJustification()) {
        i += CodedOutputStreamMicro.computeStringSize(17, getJustification());
      }
      if (hasEncodedServerPayload()) {
        i += CodedOutputStreamMicro.computeBytesSize(18, getEncodedServerPayload());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getSourceType()
    {
      return this.sourceType_;
    }
    
    public boolean hasEncodedServerPayload()
    {
      return this.hasEncodedServerPayload;
    }
    
    public boolean hasExplicitPlaceData()
    {
      return this.hasExplicitPlaceData;
    }
    
    public boolean hasIsCommuteDestination()
    {
      return this.hasIsCommuteDestination;
    }
    
    public boolean hasJustification()
    {
      return this.hasJustification;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasModifyReservationUrl()
    {
      return this.hasModifyReservationUrl;
    }
    
    public boolean hasPlaceData()
    {
      return this.hasPlaceData;
    }
    
    public boolean hasSourceType()
    {
      return this.hasSourceType;
    }
    
    public FrequentPlace mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 18: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 82: 
          Sidekick.PlaceData localPlaceData2 = new Sidekick.PlaceData();
          paramCodedInputStreamMicro.readMessage(localPlaceData2);
          setPlaceData(localPlaceData2);
          break;
        case 88: 
          setExplicitPlaceData(paramCodedInputStreamMicro.readBool());
          break;
        case 98: 
          Sidekick.PlaceData localPlaceData1 = new Sidekick.PlaceData();
          paramCodedInputStreamMicro.readMessage(localPlaceData1);
          addAlternatePlaceData(localPlaceData1);
          break;
        case 104: 
          setSourceType(paramCodedInputStreamMicro.readInt32());
          break;
        case 114: 
          Sidekick.GmailReference localGmailReference = new Sidekick.GmailReference();
          paramCodedInputStreamMicro.readMessage(localGmailReference);
          addGmailReference(localGmailReference);
          break;
        case 120: 
          setIsCommuteDestination(paramCodedInputStreamMicro.readBool());
          break;
        case 130: 
          setModifyReservationUrl(paramCodedInputStreamMicro.readString());
          break;
        case 138: 
          setJustification(paramCodedInputStreamMicro.readString());
          break;
        }
        setEncodedServerPayload(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public FrequentPlace setEncodedServerPayload(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedServerPayload = true;
      this.encodedServerPayload_ = paramByteStringMicro;
      return this;
    }
    
    public FrequentPlace setExplicitPlaceData(boolean paramBoolean)
    {
      this.hasExplicitPlaceData = true;
      this.explicitPlaceData_ = paramBoolean;
      return this;
    }
    
    public FrequentPlace setIsCommuteDestination(boolean paramBoolean)
    {
      this.hasIsCommuteDestination = true;
      this.isCommuteDestination_ = paramBoolean;
      return this;
    }
    
    public FrequentPlace setJustification(String paramString)
    {
      this.hasJustification = true;
      this.justification_ = paramString;
      return this;
    }
    
    public FrequentPlace setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public FrequentPlace setModifyReservationUrl(String paramString)
    {
      this.hasModifyReservationUrl = true;
      this.modifyReservationUrl_ = paramString;
      return this;
    }
    
    public FrequentPlace setPlaceData(Sidekick.PlaceData paramPlaceData)
    {
      if (paramPlaceData == null) {
        throw new NullPointerException();
      }
      this.hasPlaceData = true;
      this.placeData_ = paramPlaceData;
      return this;
    }
    
    public FrequentPlace setSourceType(int paramInt)
    {
      this.hasSourceType = true;
      this.sourceType_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(2, getLocation());
      }
      if (hasPlaceData()) {
        paramCodedOutputStreamMicro.writeMessage(10, getPlaceData());
      }
      if (hasExplicitPlaceData()) {
        paramCodedOutputStreamMicro.writeBool(11, getExplicitPlaceData());
      }
      Iterator localIterator1 = getAlternatePlaceDataList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(12, (Sidekick.PlaceData)localIterator1.next());
      }
      if (hasSourceType()) {
        paramCodedOutputStreamMicro.writeInt32(13, getSourceType());
      }
      Iterator localIterator2 = getGmailReferenceList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(14, (Sidekick.GmailReference)localIterator2.next());
      }
      if (hasIsCommuteDestination()) {
        paramCodedOutputStreamMicro.writeBool(15, getIsCommuteDestination());
      }
      if (hasModifyReservationUrl()) {
        paramCodedOutputStreamMicro.writeString(16, getModifyReservationUrl());
      }
      if (hasJustification()) {
        paramCodedOutputStreamMicro.writeString(17, getJustification());
      }
      if (hasEncodedServerPayload()) {
        paramCodedOutputStreamMicro.writeBytes(18, getEncodedServerPayload());
      }
    }
  }
  
  public static final class FrequentPlaceEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.Photo eventImage_ = null;
    private long eventTimeSeconds_ = 0L;
    private int eventType_ = 1;
    private Sidekick.FrequentPlace frequentPlace_ = null;
    private boolean hasEventImage;
    private boolean hasEventTimeSeconds;
    private boolean hasEventType;
    private boolean hasFrequentPlace;
    private List<Sidekick.CommuteSummary> route_ = Collections.emptyList();
    
    public FrequentPlaceEntry addRoute(Sidekick.CommuteSummary paramCommuteSummary)
    {
      if (paramCommuteSummary == null) {
        throw new NullPointerException();
      }
      if (this.route_.isEmpty()) {
        this.route_ = new ArrayList();
      }
      this.route_.add(paramCommuteSummary);
      return this;
    }
    
    public FrequentPlaceEntry clearRoute()
    {
      this.route_ = Collections.emptyList();
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getEventImage()
    {
      return this.eventImage_;
    }
    
    public long getEventTimeSeconds()
    {
      return this.eventTimeSeconds_;
    }
    
    public int getEventType()
    {
      return this.eventType_;
    }
    
    public Sidekick.FrequentPlace getFrequentPlace()
    {
      return this.frequentPlace_;
    }
    
    public Sidekick.CommuteSummary getRoute(int paramInt)
    {
      return (Sidekick.CommuteSummary)this.route_.get(paramInt);
    }
    
    public int getRouteCount()
    {
      return this.route_.size();
    }
    
    public List<Sidekick.CommuteSummary> getRouteList()
    {
      return this.route_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasFrequentPlace();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getFrequentPlace());
      }
      Iterator localIterator = getRouteList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.CommuteSummary)localIterator.next());
      }
      if (hasEventType()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getEventType());
      }
      if (hasEventTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(4, getEventTimeSeconds());
      }
      if (hasEventImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getEventImage());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasEventImage()
    {
      return this.hasEventImage;
    }
    
    public boolean hasEventTimeSeconds()
    {
      return this.hasEventTimeSeconds;
    }
    
    public boolean hasEventType()
    {
      return this.hasEventType;
    }
    
    public boolean hasFrequentPlace()
    {
      return this.hasFrequentPlace;
    }
    
    public FrequentPlaceEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.FrequentPlace localFrequentPlace = new Sidekick.FrequentPlace();
          paramCodedInputStreamMicro.readMessage(localFrequentPlace);
          setFrequentPlace(localFrequentPlace);
          break;
        case 18: 
          Sidekick.CommuteSummary localCommuteSummary = new Sidekick.CommuteSummary();
          paramCodedInputStreamMicro.readMessage(localCommuteSummary);
          addRoute(localCommuteSummary);
          break;
        case 24: 
          setEventType(paramCodedInputStreamMicro.readInt32());
          break;
        case 32: 
          setEventTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        }
        Sidekick.Photo localPhoto = new Sidekick.Photo();
        paramCodedInputStreamMicro.readMessage(localPhoto);
        setEventImage(localPhoto);
      }
    }
    
    public FrequentPlaceEntry setEventImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasEventImage = true;
      this.eventImage_ = paramPhoto;
      return this;
    }
    
    public FrequentPlaceEntry setEventTimeSeconds(long paramLong)
    {
      this.hasEventTimeSeconds = true;
      this.eventTimeSeconds_ = paramLong;
      return this;
    }
    
    public FrequentPlaceEntry setEventType(int paramInt)
    {
      this.hasEventType = true;
      this.eventType_ = paramInt;
      return this;
    }
    
    public FrequentPlaceEntry setFrequentPlace(Sidekick.FrequentPlace paramFrequentPlace)
    {
      if (paramFrequentPlace == null) {
        throw new NullPointerException();
      }
      this.hasFrequentPlace = true;
      this.frequentPlace_ = paramFrequentPlace;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasFrequentPlace()) {
        paramCodedOutputStreamMicro.writeMessage(1, getFrequentPlace());
      }
      Iterator localIterator = getRouteList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.CommuteSummary)localIterator.next());
      }
      if (hasEventType()) {
        paramCodedOutputStreamMicro.writeInt32(3, getEventType());
      }
      if (hasEventTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(4, getEventTimeSeconds());
      }
      if (hasEventImage()) {
        paramCodedOutputStreamMicro.writeMessage(5, getEventImage());
      }
    }
  }
  
  public static final class GenericCardEntry
    extends MessageMicro
  {
    private int backOfCardQuestionType_ = 1;
    private BackOfCardQuestion backOfCardQuestion_ = null;
    private ByteStringMicro backendCardId_ = ByteStringMicro.EMPTY;
    private int cachedSize = -1;
    private String cardType_ = "";
    private Sidekick.ClickAction detailsClickAction_ = null;
    private boolean hasBackOfCardQuestion;
    private boolean hasBackOfCardQuestionType;
    private boolean hasBackendCardId;
    private boolean hasCardType;
    private boolean hasDetailsClickAction;
    private boolean hasImageHeight;
    private boolean hasImageUrl;
    private boolean hasImageWidth;
    private boolean hasTemplate;
    private boolean hasText;
    private boolean hasTitle;
    private int imageHeight_ = 0;
    private String imageUrl_ = "";
    private int imageWidth_ = 0;
    private List<Sidekick.Photo> photo_ = Collections.emptyList();
    private int template_ = 1;
    private String text_ = "";
    private String title_ = "";
    private List<Sidekick.ClickAction> viewAction_ = Collections.emptyList();
    
    public GenericCardEntry addPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      if (this.photo_.isEmpty()) {
        this.photo_ = new ArrayList();
      }
      this.photo_.add(paramPhoto);
      return this;
    }
    
    public GenericCardEntry addViewAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      if (this.viewAction_.isEmpty()) {
        this.viewAction_ = new ArrayList();
      }
      this.viewAction_.add(paramClickAction);
      return this;
    }
    
    public BackOfCardQuestion getBackOfCardQuestion()
    {
      return this.backOfCardQuestion_;
    }
    
    public int getBackOfCardQuestionType()
    {
      return this.backOfCardQuestionType_;
    }
    
    public ByteStringMicro getBackendCardId()
    {
      return this.backendCardId_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getCardType()
    {
      return this.cardType_;
    }
    
    public Sidekick.ClickAction getDetailsClickAction()
    {
      return this.detailsClickAction_;
    }
    
    public int getImageHeight()
    {
      return this.imageHeight_;
    }
    
    public String getImageUrl()
    {
      return this.imageUrl_;
    }
    
    public int getImageWidth()
    {
      return this.imageWidth_;
    }
    
    public Sidekick.Photo getPhoto(int paramInt)
    {
      return (Sidekick.Photo)this.photo_.get(paramInt);
    }
    
    public int getPhotoCount()
    {
      return this.photo_.size();
    }
    
    public List<Sidekick.Photo> getPhotoList()
    {
      return this.photo_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasText()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getText());
      }
      if (hasImageUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getImageUrl());
      }
      Iterator localIterator1 = getViewActionList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, (Sidekick.ClickAction)localIterator1.next());
      }
      if (hasCardType()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getCardType());
      }
      if (hasImageWidth()) {
        i += CodedOutputStreamMicro.computeInt32Size(6, getImageWidth());
      }
      if (hasImageHeight()) {
        i += CodedOutputStreamMicro.computeInt32Size(7, getImageHeight());
      }
      Iterator localIterator2 = getPhotoList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, (Sidekick.Photo)localIterator2.next());
      }
      if (hasTemplate()) {
        i += CodedOutputStreamMicro.computeInt32Size(9, getTemplate());
      }
      if (hasBackOfCardQuestionType()) {
        i += CodedOutputStreamMicro.computeInt32Size(10, getBackOfCardQuestionType());
      }
      if (hasBackOfCardQuestion()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, getBackOfCardQuestion());
      }
      if (hasDetailsClickAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(12, getDetailsClickAction());
      }
      if (hasBackendCardId()) {
        i += CodedOutputStreamMicro.computeBytesSize(13, getBackendCardId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getTemplate()
    {
      return this.template_;
    }
    
    public String getText()
    {
      return this.text_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public Sidekick.ClickAction getViewAction(int paramInt)
    {
      return (Sidekick.ClickAction)this.viewAction_.get(paramInt);
    }
    
    public int getViewActionCount()
    {
      return this.viewAction_.size();
    }
    
    public List<Sidekick.ClickAction> getViewActionList()
    {
      return this.viewAction_;
    }
    
    public boolean hasBackOfCardQuestion()
    {
      return this.hasBackOfCardQuestion;
    }
    
    public boolean hasBackOfCardQuestionType()
    {
      return this.hasBackOfCardQuestionType;
    }
    
    public boolean hasBackendCardId()
    {
      return this.hasBackendCardId;
    }
    
    public boolean hasCardType()
    {
      return this.hasCardType;
    }
    
    public boolean hasDetailsClickAction()
    {
      return this.hasDetailsClickAction;
    }
    
    public boolean hasImageHeight()
    {
      return this.hasImageHeight;
    }
    
    public boolean hasImageUrl()
    {
      return this.hasImageUrl;
    }
    
    public boolean hasImageWidth()
    {
      return this.hasImageWidth;
    }
    
    public boolean hasTemplate()
    {
      return this.hasTemplate;
    }
    
    public boolean hasText()
    {
      return this.hasText;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public GenericCardEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setText(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setImageUrl(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          Sidekick.ClickAction localClickAction2 = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction2);
          addViewAction(localClickAction2);
          break;
        case 42: 
          setCardType(paramCodedInputStreamMicro.readString());
          break;
        case 48: 
          setImageWidth(paramCodedInputStreamMicro.readInt32());
          break;
        case 56: 
          setImageHeight(paramCodedInputStreamMicro.readInt32());
          break;
        case 66: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          addPhoto(localPhoto);
          break;
        case 72: 
          setTemplate(paramCodedInputStreamMicro.readInt32());
          break;
        case 80: 
          setBackOfCardQuestionType(paramCodedInputStreamMicro.readInt32());
          break;
        case 90: 
          BackOfCardQuestion localBackOfCardQuestion = new BackOfCardQuestion();
          paramCodedInputStreamMicro.readMessage(localBackOfCardQuestion);
          setBackOfCardQuestion(localBackOfCardQuestion);
          break;
        case 98: 
          Sidekick.ClickAction localClickAction1 = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction1);
          setDetailsClickAction(localClickAction1);
          break;
        }
        setBackendCardId(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public GenericCardEntry setBackOfCardQuestion(BackOfCardQuestion paramBackOfCardQuestion)
    {
      if (paramBackOfCardQuestion == null) {
        throw new NullPointerException();
      }
      this.hasBackOfCardQuestion = true;
      this.backOfCardQuestion_ = paramBackOfCardQuestion;
      return this;
    }
    
    public GenericCardEntry setBackOfCardQuestionType(int paramInt)
    {
      this.hasBackOfCardQuestionType = true;
      this.backOfCardQuestionType_ = paramInt;
      return this;
    }
    
    public GenericCardEntry setBackendCardId(ByteStringMicro paramByteStringMicro)
    {
      this.hasBackendCardId = true;
      this.backendCardId_ = paramByteStringMicro;
      return this;
    }
    
    public GenericCardEntry setCardType(String paramString)
    {
      this.hasCardType = true;
      this.cardType_ = paramString;
      return this;
    }
    
    public GenericCardEntry setDetailsClickAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasDetailsClickAction = true;
      this.detailsClickAction_ = paramClickAction;
      return this;
    }
    
    public GenericCardEntry setImageHeight(int paramInt)
    {
      this.hasImageHeight = true;
      this.imageHeight_ = paramInt;
      return this;
    }
    
    public GenericCardEntry setImageUrl(String paramString)
    {
      this.hasImageUrl = true;
      this.imageUrl_ = paramString;
      return this;
    }
    
    public GenericCardEntry setImageWidth(int paramInt)
    {
      this.hasImageWidth = true;
      this.imageWidth_ = paramInt;
      return this;
    }
    
    public GenericCardEntry setTemplate(int paramInt)
    {
      this.hasTemplate = true;
      this.template_ = paramInt;
      return this;
    }
    
    public GenericCardEntry setText(String paramString)
    {
      this.hasText = true;
      this.text_ = paramString;
      return this;
    }
    
    public GenericCardEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasText()) {
        paramCodedOutputStreamMicro.writeString(2, getText());
      }
      if (hasImageUrl()) {
        paramCodedOutputStreamMicro.writeString(3, getImageUrl());
      }
      Iterator localIterator1 = getViewActionList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(4, (Sidekick.ClickAction)localIterator1.next());
      }
      if (hasCardType()) {
        paramCodedOutputStreamMicro.writeString(5, getCardType());
      }
      if (hasImageWidth()) {
        paramCodedOutputStreamMicro.writeInt32(6, getImageWidth());
      }
      if (hasImageHeight()) {
        paramCodedOutputStreamMicro.writeInt32(7, getImageHeight());
      }
      Iterator localIterator2 = getPhotoList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(8, (Sidekick.Photo)localIterator2.next());
      }
      if (hasTemplate()) {
        paramCodedOutputStreamMicro.writeInt32(9, getTemplate());
      }
      if (hasBackOfCardQuestionType()) {
        paramCodedOutputStreamMicro.writeInt32(10, getBackOfCardQuestionType());
      }
      if (hasBackOfCardQuestion()) {
        paramCodedOutputStreamMicro.writeMessage(11, getBackOfCardQuestion());
      }
      if (hasDetailsClickAction()) {
        paramCodedOutputStreamMicro.writeMessage(12, getDetailsClickAction());
      }
      if (hasBackendCardId()) {
        paramCodedOutputStreamMicro.writeBytes(13, getBackendCardId());
      }
    }
    
    public static final class BackOfCardQuestion
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNegativeAnswer;
      private boolean hasPositiveAnswer;
      private boolean hasQuestion;
      private String negativeAnswer_ = "";
      private String positiveAnswer_ = "";
      private String question_ = "";
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public String getNegativeAnswer()
      {
        return this.negativeAnswer_;
      }
      
      public String getPositiveAnswer()
      {
        return this.positiveAnswer_;
      }
      
      public String getQuestion()
      {
        return this.question_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasQuestion();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getQuestion());
        }
        if (hasPositiveAnswer()) {
          i += CodedOutputStreamMicro.computeStringSize(2, getPositiveAnswer());
        }
        if (hasNegativeAnswer()) {
          i += CodedOutputStreamMicro.computeStringSize(3, getNegativeAnswer());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasNegativeAnswer()
      {
        return this.hasNegativeAnswer;
      }
      
      public boolean hasPositiveAnswer()
      {
        return this.hasPositiveAnswer;
      }
      
      public boolean hasQuestion()
      {
        return this.hasQuestion;
      }
      
      public BackOfCardQuestion mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setQuestion(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            setPositiveAnswer(paramCodedInputStreamMicro.readString());
            break;
          }
          setNegativeAnswer(paramCodedInputStreamMicro.readString());
        }
      }
      
      public BackOfCardQuestion setNegativeAnswer(String paramString)
      {
        this.hasNegativeAnswer = true;
        this.negativeAnswer_ = paramString;
        return this;
      }
      
      public BackOfCardQuestion setPositiveAnswer(String paramString)
      {
        this.hasPositiveAnswer = true;
        this.positiveAnswer_ = paramString;
        return this;
      }
      
      public BackOfCardQuestion setQuestion(String paramString)
      {
        this.hasQuestion = true;
        this.question_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasQuestion()) {
          paramCodedOutputStreamMicro.writeString(1, getQuestion());
        }
        if (hasPositiveAnswer()) {
          paramCodedOutputStreamMicro.writeString(2, getPositiveAnswer());
        }
        if (hasNegativeAnswer()) {
          paramCodedOutputStreamMicro.writeString(3, getNegativeAnswer());
        }
      }
    }
  }
  
  public static final class GenericRowInfo
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<GenericCellInfo> cellInfo_ = Collections.emptyList();
    
    public GenericRowInfo addCellInfo(GenericCellInfo paramGenericCellInfo)
    {
      if (paramGenericCellInfo == null) {
        throw new NullPointerException();
      }
      if (this.cellInfo_.isEmpty()) {
        this.cellInfo_ = new ArrayList();
      }
      this.cellInfo_.add(paramGenericCellInfo);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public List<GenericCellInfo> getCellInfoList()
    {
      return this.cellInfo_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getCellInfoList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (GenericCellInfo)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public GenericRowInfo mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        GenericCellInfo localGenericCellInfo = new GenericCellInfo();
        paramCodedInputStreamMicro.readMessage(localGenericCellInfo);
        addCellInfo(localGenericCellInfo);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getCellInfoList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (GenericCellInfo)localIterator.next());
      }
    }
    
    public static final class GenericCellInfo
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasLabel;
      private boolean hasStringValue;
      private boolean hasTimestampSeconds;
      private String label_ = "";
      private String stringValue_ = "";
      private long timestampSeconds_ = 0L;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public String getLabel()
      {
        return this.label_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasLabel();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getLabel());
        }
        if (hasStringValue()) {
          i += CodedOutputStreamMicro.computeStringSize(2, getStringValue());
        }
        if (hasTimestampSeconds()) {
          i += CodedOutputStreamMicro.computeInt64Size(3, getTimestampSeconds());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getStringValue()
      {
        return this.stringValue_;
      }
      
      public long getTimestampSeconds()
      {
        return this.timestampSeconds_;
      }
      
      public boolean hasLabel()
      {
        return this.hasLabel;
      }
      
      public boolean hasStringValue()
      {
        return this.hasStringValue;
      }
      
      public boolean hasTimestampSeconds()
      {
        return this.hasTimestampSeconds;
      }
      
      public GenericCellInfo mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setLabel(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            setStringValue(paramCodedInputStreamMicro.readString());
            break;
          }
          setTimestampSeconds(paramCodedInputStreamMicro.readInt64());
        }
      }
      
      public GenericCellInfo setLabel(String paramString)
      {
        this.hasLabel = true;
        this.label_ = paramString;
        return this;
      }
      
      public GenericCellInfo setStringValue(String paramString)
      {
        this.hasStringValue = true;
        this.stringValue_ = paramString;
        return this;
      }
      
      public GenericCellInfo setTimestampSeconds(long paramLong)
      {
        this.hasTimestampSeconds = true;
        this.timestampSeconds_ = paramLong;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasLabel()) {
          paramCodedOutputStreamMicro.writeString(1, getLabel());
        }
        if (hasStringValue()) {
          paramCodedOutputStreamMicro.writeString(2, getStringValue());
        }
        if (hasTimestampSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(3, getTimestampSeconds());
        }
      }
    }
  }
  
  public static final class GenericTicketCardEntry
    extends MessageMicro
  {
    private List<Sidekick.ClickAction> action_ = Collections.emptyList();
    private Sidekick.Photo barcode_ = null;
    private int cachedSize = -1;
    private String confirmationNumber_ = "";
    private boolean hasBarcode;
    private boolean hasConfirmationNumber;
    private boolean hasSubTitle;
    private boolean hasTitle;
    private boolean hasType;
    private List<Sidekick.GenericRowInfo.GenericCellInfo> hiddenInfo_ = Collections.emptyList();
    private List<Sidekick.GenericRowInfo> rowInfo_ = Collections.emptyList();
    private String subTitle_ = "";
    private String title_ = "";
    private String type_ = "";
    
    public GenericTicketCardEntry addAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      if (this.action_.isEmpty()) {
        this.action_ = new ArrayList();
      }
      this.action_.add(paramClickAction);
      return this;
    }
    
    public GenericTicketCardEntry addHiddenInfo(Sidekick.GenericRowInfo.GenericCellInfo paramGenericCellInfo)
    {
      if (paramGenericCellInfo == null) {
        throw new NullPointerException();
      }
      if (this.hiddenInfo_.isEmpty()) {
        this.hiddenInfo_ = new ArrayList();
      }
      this.hiddenInfo_.add(paramGenericCellInfo);
      return this;
    }
    
    public GenericTicketCardEntry addRowInfo(Sidekick.GenericRowInfo paramGenericRowInfo)
    {
      if (paramGenericRowInfo == null) {
        throw new NullPointerException();
      }
      if (this.rowInfo_.isEmpty()) {
        this.rowInfo_ = new ArrayList();
      }
      this.rowInfo_.add(paramGenericRowInfo);
      return this;
    }
    
    public List<Sidekick.ClickAction> getActionList()
    {
      return this.action_;
    }
    
    public Sidekick.Photo getBarcode()
    {
      return this.barcode_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getConfirmationNumber()
    {
      return this.confirmationNumber_;
    }
    
    public List<Sidekick.GenericRowInfo.GenericCellInfo> getHiddenInfoList()
    {
      return this.hiddenInfo_;
    }
    
    public List<Sidekick.GenericRowInfo> getRowInfoList()
    {
      return this.rowInfo_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getType());
      }
      if (hasTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getTitle());
      }
      if (hasSubTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getSubTitle());
      }
      if (hasBarcode()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getBarcode());
      }
      if (hasConfirmationNumber()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getConfirmationNumber());
      }
      Iterator localIterator1 = getRowInfoList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, (Sidekick.GenericRowInfo)localIterator1.next());
      }
      Iterator localIterator2 = getActionList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, (Sidekick.ClickAction)localIterator2.next());
      }
      Iterator localIterator3 = getHiddenInfoList().iterator();
      while (localIterator3.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, (Sidekick.GenericRowInfo.GenericCellInfo)localIterator3.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSubTitle()
    {
      return this.subTitle_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public String getType()
    {
      return this.type_;
    }
    
    public boolean hasBarcode()
    {
      return this.hasBarcode;
    }
    
    public boolean hasConfirmationNumber()
    {
      return this.hasConfirmationNumber;
    }
    
    public boolean hasSubTitle()
    {
      return this.hasSubTitle;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public GenericTicketCardEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setType(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setSubTitle(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setBarcode(localPhoto);
          break;
        case 42: 
          setConfirmationNumber(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          Sidekick.GenericRowInfo localGenericRowInfo = new Sidekick.GenericRowInfo();
          paramCodedInputStreamMicro.readMessage(localGenericRowInfo);
          addRowInfo(localGenericRowInfo);
          break;
        case 58: 
          Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction);
          addAction(localClickAction);
          break;
        }
        Sidekick.GenericRowInfo.GenericCellInfo localGenericCellInfo = new Sidekick.GenericRowInfo.GenericCellInfo();
        paramCodedInputStreamMicro.readMessage(localGenericCellInfo);
        addHiddenInfo(localGenericCellInfo);
      }
    }
    
    public GenericTicketCardEntry setBarcode(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasBarcode = true;
      this.barcode_ = paramPhoto;
      return this;
    }
    
    public GenericTicketCardEntry setConfirmationNumber(String paramString)
    {
      this.hasConfirmationNumber = true;
      this.confirmationNumber_ = paramString;
      return this;
    }
    
    public GenericTicketCardEntry setSubTitle(String paramString)
    {
      this.hasSubTitle = true;
      this.subTitle_ = paramString;
      return this;
    }
    
    public GenericTicketCardEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public GenericTicketCardEntry setType(String paramString)
    {
      this.hasType = true;
      this.type_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasType()) {
        paramCodedOutputStreamMicro.writeString(1, getType());
      }
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(2, getTitle());
      }
      if (hasSubTitle()) {
        paramCodedOutputStreamMicro.writeString(3, getSubTitle());
      }
      if (hasBarcode()) {
        paramCodedOutputStreamMicro.writeMessage(4, getBarcode());
      }
      if (hasConfirmationNumber()) {
        paramCodedOutputStreamMicro.writeString(5, getConfirmationNumber());
      }
      Iterator localIterator1 = getRowInfoList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(6, (Sidekick.GenericRowInfo)localIterator1.next());
      }
      Iterator localIterator2 = getActionList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(7, (Sidekick.ClickAction)localIterator2.next());
      }
      Iterator localIterator3 = getHiddenInfoList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(8, (Sidekick.GenericRowInfo.GenericCellInfo)localIterator3.next());
      }
    }
  }
  
  public static final class GenericTvProgramEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String castLabel_ = "";
    private List<Sidekick.CastMember> castMember_ = Collections.emptyList();
    private Sidekick.ClickAction clickAction_ = null;
    private List<Sidekick.CrewMember> crewMember_ = Collections.emptyList();
    private String description_ = "";
    private Sidekick.Destination destination_ = null;
    private boolean hasCastLabel;
    private boolean hasClickAction;
    private boolean hasDescription;
    private boolean hasDestination;
    private boolean hasName;
    private boolean hasPhoto;
    private boolean hasPhotoDestination;
    private List<String> metaInfo_ = Collections.emptyList();
    private String name_ = "";
    private Sidekick.Destination photoDestination_ = null;
    private Sidekick.Photo photo_ = null;
    
    public GenericTvProgramEntry addCastMember(Sidekick.CastMember paramCastMember)
    {
      if (paramCastMember == null) {
        throw new NullPointerException();
      }
      if (this.castMember_.isEmpty()) {
        this.castMember_ = new ArrayList();
      }
      this.castMember_.add(paramCastMember);
      return this;
    }
    
    public GenericTvProgramEntry addCrewMember(Sidekick.CrewMember paramCrewMember)
    {
      if (paramCrewMember == null) {
        throw new NullPointerException();
      }
      if (this.crewMember_.isEmpty()) {
        this.crewMember_ = new ArrayList();
      }
      this.crewMember_.add(paramCrewMember);
      return this;
    }
    
    public GenericTvProgramEntry addMetaInfo(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.metaInfo_.isEmpty()) {
        this.metaInfo_ = new ArrayList();
      }
      this.metaInfo_.add(paramString);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getCastLabel()
    {
      return this.castLabel_;
    }
    
    public Sidekick.CastMember getCastMember(int paramInt)
    {
      return (Sidekick.CastMember)this.castMember_.get(paramInt);
    }
    
    public int getCastMemberCount()
    {
      return this.castMember_.size();
    }
    
    public List<Sidekick.CastMember> getCastMemberList()
    {
      return this.castMember_;
    }
    
    public Sidekick.ClickAction getClickAction()
    {
      return this.clickAction_;
    }
    
    public Sidekick.CrewMember getCrewMember(int paramInt)
    {
      return (Sidekick.CrewMember)this.crewMember_.get(paramInt);
    }
    
    public int getCrewMemberCount()
    {
      return this.crewMember_.size();
    }
    
    public List<Sidekick.CrewMember> getCrewMemberList()
    {
      return this.crewMember_;
    }
    
    public String getDescription()
    {
      return this.description_;
    }
    
    public Sidekick.Destination getDestination()
    {
      return this.destination_;
    }
    
    public int getMetaInfoCount()
    {
      return this.metaInfo_.size();
    }
    
    public List<String> getMetaInfoList()
    {
      return this.metaInfo_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public Sidekick.Photo getPhoto()
    {
      return this.photo_;
    }
    
    public Sidekick.Destination getPhotoDestination()
    {
      return this.photoDestination_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
      }
      int j = 0;
      Iterator localIterator1 = getMetaInfoList().iterator();
      while (localIterator1.hasNext()) {
        j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator1.next());
      }
      int k = i + j + 1 * getMetaInfoList().size();
      if (hasDescription()) {
        k += CodedOutputStreamMicro.computeStringSize(3, getDescription());
      }
      if (hasPhoto()) {
        k += CodedOutputStreamMicro.computeMessageSize(4, getPhoto());
      }
      Iterator localIterator2 = getCrewMemberList().iterator();
      while (localIterator2.hasNext()) {
        k += CodedOutputStreamMicro.computeMessageSize(5, (Sidekick.CrewMember)localIterator2.next());
      }
      Iterator localIterator3 = getCastMemberList().iterator();
      while (localIterator3.hasNext()) {
        k += CodedOutputStreamMicro.computeMessageSize(7, (Sidekick.CastMember)localIterator3.next());
      }
      if (hasPhotoDestination()) {
        k += CodedOutputStreamMicro.computeMessageSize(8, getPhotoDestination());
      }
      if (hasCastLabel()) {
        k += CodedOutputStreamMicro.computeStringSize(9, getCastLabel());
      }
      if (hasDestination()) {
        k += CodedOutputStreamMicro.computeMessageSize(10, getDestination());
      }
      if (hasClickAction()) {
        k += CodedOutputStreamMicro.computeMessageSize(11, getClickAction());
      }
      this.cachedSize = k;
      return k;
    }
    
    public boolean hasCastLabel()
    {
      return this.hasCastLabel;
    }
    
    public boolean hasClickAction()
    {
      return this.hasClickAction;
    }
    
    public boolean hasDescription()
    {
      return this.hasDescription;
    }
    
    public boolean hasDestination()
    {
      return this.hasDestination;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasPhoto()
    {
      return this.hasPhoto;
    }
    
    public boolean hasPhotoDestination()
    {
      return this.hasPhotoDestination;
    }
    
    public GenericTvProgramEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          addMetaInfo(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setDescription(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setPhoto(localPhoto);
          break;
        case 42: 
          Sidekick.CrewMember localCrewMember = new Sidekick.CrewMember();
          paramCodedInputStreamMicro.readMessage(localCrewMember);
          addCrewMember(localCrewMember);
          break;
        case 58: 
          Sidekick.CastMember localCastMember = new Sidekick.CastMember();
          paramCodedInputStreamMicro.readMessage(localCastMember);
          addCastMember(localCastMember);
          break;
        case 66: 
          Sidekick.Destination localDestination2 = new Sidekick.Destination();
          paramCodedInputStreamMicro.readMessage(localDestination2);
          setPhotoDestination(localDestination2);
          break;
        case 74: 
          setCastLabel(paramCodedInputStreamMicro.readString());
          break;
        case 82: 
          Sidekick.Destination localDestination1 = new Sidekick.Destination();
          paramCodedInputStreamMicro.readMessage(localDestination1);
          setDestination(localDestination1);
          break;
        }
        Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
        paramCodedInputStreamMicro.readMessage(localClickAction);
        setClickAction(localClickAction);
      }
    }
    
    public GenericTvProgramEntry setCastLabel(String paramString)
    {
      this.hasCastLabel = true;
      this.castLabel_ = paramString;
      return this;
    }
    
    public GenericTvProgramEntry setClickAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasClickAction = true;
      this.clickAction_ = paramClickAction;
      return this;
    }
    
    public GenericTvProgramEntry setDescription(String paramString)
    {
      this.hasDescription = true;
      this.description_ = paramString;
      return this;
    }
    
    public GenericTvProgramEntry setDestination(Sidekick.Destination paramDestination)
    {
      if (paramDestination == null) {
        throw new NullPointerException();
      }
      this.hasDestination = true;
      this.destination_ = paramDestination;
      return this;
    }
    
    public GenericTvProgramEntry setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public GenericTvProgramEntry setPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasPhoto = true;
      this.photo_ = paramPhoto;
      return this;
    }
    
    public GenericTvProgramEntry setPhotoDestination(Sidekick.Destination paramDestination)
    {
      if (paramDestination == null) {
        throw new NullPointerException();
      }
      this.hasPhotoDestination = true;
      this.photoDestination_ = paramDestination;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(1, getName());
      }
      Iterator localIterator1 = getMetaInfoList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeString(2, (String)localIterator1.next());
      }
      if (hasDescription()) {
        paramCodedOutputStreamMicro.writeString(3, getDescription());
      }
      if (hasPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(4, getPhoto());
      }
      Iterator localIterator2 = getCrewMemberList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(5, (Sidekick.CrewMember)localIterator2.next());
      }
      Iterator localIterator3 = getCastMemberList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(7, (Sidekick.CastMember)localIterator3.next());
      }
      if (hasPhotoDestination()) {
        paramCodedOutputStreamMicro.writeMessage(8, getPhotoDestination());
      }
      if (hasCastLabel()) {
        paramCodedOutputStreamMicro.writeString(9, getCastLabel());
      }
      if (hasDestination()) {
        paramCodedOutputStreamMicro.writeMessage(10, getDestination());
      }
      if (hasClickAction()) {
        paramCodedOutputStreamMicro.writeMessage(11, getClickAction());
      }
    }
  }
  
  public static final class GeoLocatedPhoto
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasLocation;
    private boolean hasMediumSizedPhoto;
    private boolean hasName;
    private boolean hasThumbnail;
    private Sidekick.Location location_ = null;
    private Sidekick.Photo mediumSizedPhoto_ = null;
    private String name_ = "";
    private Sidekick.Photo thumbnail_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public Sidekick.Photo getMediumSizedPhoto()
    {
      return this.mediumSizedPhoto_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
      }
      if (hasLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getLocation());
      }
      if (hasThumbnail()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getThumbnail());
      }
      if (hasMediumSizedPhoto()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getMediumSizedPhoto());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.Photo getThumbnail()
    {
      return this.thumbnail_;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasMediumSizedPhoto()
    {
      return this.hasMediumSizedPhoto;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasThumbnail()
    {
      return this.hasThumbnail;
    }
    
    public GeoLocatedPhoto mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 26: 
          Sidekick.Photo localPhoto2 = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto2);
          setThumbnail(localPhoto2);
          break;
        }
        Sidekick.Photo localPhoto1 = new Sidekick.Photo();
        paramCodedInputStreamMicro.readMessage(localPhoto1);
        setMediumSizedPhoto(localPhoto1);
      }
    }
    
    public GeoLocatedPhoto setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public GeoLocatedPhoto setMediumSizedPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasMediumSizedPhoto = true;
      this.mediumSizedPhoto_ = paramPhoto;
      return this;
    }
    
    public GeoLocatedPhoto setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public GeoLocatedPhoto setThumbnail(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasThumbnail = true;
      this.thumbnail_ = paramPhoto;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(1, getName());
      }
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(2, getLocation());
      }
      if (hasThumbnail()) {
        paramCodedOutputStreamMicro.writeMessage(3, getThumbnail());
      }
      if (hasMediumSizedPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(4, getMediumSizedPhoto());
      }
    }
  }
  
  public static final class GeostoreFeatureId
    extends MessageMicro
  {
    private int cachedSize = -1;
    private long cellId_ = 0L;
    private long fprint_ = 0L;
    private boolean hasCellId;
    private boolean hasFprint;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getCellId()
    {
      return this.cellId_;
    }
    
    public long getFprint()
    {
      return this.fprint_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasCellId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeFixed64Size(1, getCellId());
      }
      if (hasFprint()) {
        i += CodedOutputStreamMicro.computeFixed64Size(2, getFprint());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasCellId()
    {
      return this.hasCellId;
    }
    
    public boolean hasFprint()
    {
      return this.hasFprint;
    }
    
    public GeostoreFeatureId mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 9: 
          setCellId(paramCodedInputStreamMicro.readFixed64());
          break;
        }
        setFprint(paramCodedInputStreamMicro.readFixed64());
      }
    }
    
    public GeostoreFeatureId setCellId(long paramLong)
    {
      this.hasCellId = true;
      this.cellId_ = paramLong;
      return this;
    }
    
    public GeostoreFeatureId setFprint(long paramLong)
    {
      this.hasFprint = true;
      this.fprint_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasCellId()) {
        paramCodedOutputStreamMicro.writeFixed64(1, getCellId());
      }
      if (hasFprint()) {
        paramCodedOutputStreamMicro.writeFixed64(2, getFprint());
      }
    }
  }
  
  public static final class GmailEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Contact gmailUser_ = null;
    private boolean hasGmailUser;
    private boolean hasNumUnreadEmails;
    private boolean hasProfilePhoto;
    private boolean hasUserTimezoneId;
    private List<GmailMessageDescription> messages_ = Collections.emptyList();
    private long numUnreadEmails_ = 0L;
    private Sidekick.Photo profilePhoto_ = null;
    private String userTimezoneId_ = "";
    
    public GmailEntry addMessages(GmailMessageDescription paramGmailMessageDescription)
    {
      if (paramGmailMessageDescription == null) {
        throw new NullPointerException();
      }
      if (this.messages_.isEmpty()) {
        this.messages_ = new ArrayList();
      }
      this.messages_.add(paramGmailMessageDescription);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Contact getGmailUser()
    {
      return this.gmailUser_;
    }
    
    public List<GmailMessageDescription> getMessagesList()
    {
      return this.messages_;
    }
    
    public long getNumUnreadEmails()
    {
      return this.numUnreadEmails_;
    }
    
    public Sidekick.Photo getProfilePhoto()
    {
      return this.profilePhoto_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasProfilePhoto();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getProfilePhoto());
      }
      if (hasNumUnreadEmails()) {
        i += CodedOutputStreamMicro.computeInt64Size(2, getNumUnreadEmails());
      }
      Iterator localIterator = getMessagesList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (GmailMessageDescription)localIterator.next());
      }
      if (hasGmailUser()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getGmailUser());
      }
      if (hasUserTimezoneId()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getUserTimezoneId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getUserTimezoneId()
    {
      return this.userTimezoneId_;
    }
    
    public boolean hasGmailUser()
    {
      return this.hasGmailUser;
    }
    
    public boolean hasNumUnreadEmails()
    {
      return this.hasNumUnreadEmails;
    }
    
    public boolean hasProfilePhoto()
    {
      return this.hasProfilePhoto;
    }
    
    public boolean hasUserTimezoneId()
    {
      return this.hasUserTimezoneId;
    }
    
    public GmailEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setProfilePhoto(localPhoto);
          break;
        case 16: 
          setNumUnreadEmails(paramCodedInputStreamMicro.readInt64());
          break;
        case 26: 
          GmailMessageDescription localGmailMessageDescription = new GmailMessageDescription();
          paramCodedInputStreamMicro.readMessage(localGmailMessageDescription);
          addMessages(localGmailMessageDescription);
          break;
        case 34: 
          Contact localContact = new Contact();
          paramCodedInputStreamMicro.readMessage(localContact);
          setGmailUser(localContact);
          break;
        }
        setUserTimezoneId(paramCodedInputStreamMicro.readString());
      }
    }
    
    public GmailEntry setGmailUser(Contact paramContact)
    {
      if (paramContact == null) {
        throw new NullPointerException();
      }
      this.hasGmailUser = true;
      this.gmailUser_ = paramContact;
      return this;
    }
    
    public GmailEntry setNumUnreadEmails(long paramLong)
    {
      this.hasNumUnreadEmails = true;
      this.numUnreadEmails_ = paramLong;
      return this;
    }
    
    public GmailEntry setProfilePhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasProfilePhoto = true;
      this.profilePhoto_ = paramPhoto;
      return this;
    }
    
    public GmailEntry setUserTimezoneId(String paramString)
    {
      this.hasUserTimezoneId = true;
      this.userTimezoneId_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasProfilePhoto()) {
        paramCodedOutputStreamMicro.writeMessage(1, getProfilePhoto());
      }
      if (hasNumUnreadEmails()) {
        paramCodedOutputStreamMicro.writeInt64(2, getNumUnreadEmails());
      }
      Iterator localIterator = getMessagesList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (GmailMessageDescription)localIterator.next());
      }
      if (hasGmailUser()) {
        paramCodedOutputStreamMicro.writeMessage(4, getGmailUser());
      }
      if (hasUserTimezoneId()) {
        paramCodedOutputStreamMicro.writeString(5, getUserTimezoneId());
      }
    }
    
    public static final class Contact
      extends MessageMicro
    {
      private int cachedSize = -1;
      private String fullName_ = "";
      private boolean hasFullName;
      private boolean hasIsSelf;
      private boolean hasUsername;
      private boolean isSelf_ = false;
      private String username_ = "";
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public String getFullName()
      {
        return this.fullName_;
      }
      
      public boolean getIsSelf()
      {
        return this.isSelf_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasUsername();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getUsername());
        }
        if (hasFullName()) {
          i += CodedOutputStreamMicro.computeStringSize(2, getFullName());
        }
        if (hasIsSelf()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getIsSelf());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getUsername()
      {
        return this.username_;
      }
      
      public boolean hasFullName()
      {
        return this.hasFullName;
      }
      
      public boolean hasIsSelf()
      {
        return this.hasIsSelf;
      }
      
      public boolean hasUsername()
      {
        return this.hasUsername;
      }
      
      public Contact mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setUsername(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            setFullName(paramCodedInputStreamMicro.readString());
            break;
          }
          setIsSelf(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public Contact setFullName(String paramString)
      {
        this.hasFullName = true;
        this.fullName_ = paramString;
        return this;
      }
      
      public Contact setIsSelf(boolean paramBoolean)
      {
        this.hasIsSelf = true;
        this.isSelf_ = paramBoolean;
        return this;
      }
      
      public Contact setUsername(String paramString)
      {
        this.hasUsername = true;
        this.username_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasUsername()) {
          paramCodedOutputStreamMicro.writeString(1, getUsername());
        }
        if (hasFullName()) {
          paramCodedOutputStreamMicro.writeString(2, getFullName());
        }
        if (hasIsSelf()) {
          paramCodedOutputStreamMicro.writeBool(3, getIsSelf());
        }
      }
    }
    
    public static final class GmailMessageDescription
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasAttachment_ = false;
      private boolean hasHasAttachment;
      private boolean hasHasStar;
      private boolean hasIsImportant;
      private boolean hasIsUnread;
      private boolean hasNumMessagesInThread;
      private boolean hasNumThreadParticipants;
      private boolean hasSender;
      private boolean hasSnippet;
      private boolean hasStar_ = false;
      private boolean hasSubject;
      private boolean hasThreadTimeSec;
      private boolean hasUrl;
      private boolean isImportant_ = false;
      private boolean isUnread_ = false;
      private List<String> labels_ = Collections.emptyList();
      private int numMessagesInThread_ = 0;
      private int numThreadParticipants_ = 0;
      private List<Sidekick.GmailEntry.Contact> participants_ = Collections.emptyList();
      private List<Sidekick.GmailEntry.Contact> recipients_ = Collections.emptyList();
      private Sidekick.GmailEntry.Contact sender_ = null;
      private String snippet_ = "";
      private String subject_ = "";
      private long threadTimeSec_ = 0L;
      private String url_ = "";
      
      public GmailMessageDescription addLabels(String paramString)
      {
        if (paramString == null) {
          throw new NullPointerException();
        }
        if (this.labels_.isEmpty()) {
          this.labels_ = new ArrayList();
        }
        this.labels_.add(paramString);
        return this;
      }
      
      public GmailMessageDescription addParticipants(Sidekick.GmailEntry.Contact paramContact)
      {
        if (paramContact == null) {
          throw new NullPointerException();
        }
        if (this.participants_.isEmpty()) {
          this.participants_ = new ArrayList();
        }
        this.participants_.add(paramContact);
        return this;
      }
      
      public GmailMessageDescription addRecipients(Sidekick.GmailEntry.Contact paramContact)
      {
        if (paramContact == null) {
          throw new NullPointerException();
        }
        if (this.recipients_.isEmpty()) {
          this.recipients_ = new ArrayList();
        }
        this.recipients_.add(paramContact);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public boolean getHasAttachment()
      {
        return this.hasAttachment_;
      }
      
      public boolean getHasStar()
      {
        return this.hasStar_;
      }
      
      public boolean getIsImportant()
      {
        return this.isImportant_;
      }
      
      public boolean getIsUnread()
      {
        return this.isUnread_;
      }
      
      public List<String> getLabelsList()
      {
        return this.labels_;
      }
      
      public int getNumMessagesInThread()
      {
        return this.numMessagesInThread_;
      }
      
      public int getNumThreadParticipants()
      {
        return this.numThreadParticipants_;
      }
      
      public List<Sidekick.GmailEntry.Contact> getParticipantsList()
      {
        return this.participants_;
      }
      
      public List<Sidekick.GmailEntry.Contact> getRecipientsList()
      {
        return this.recipients_;
      }
      
      public Sidekick.GmailEntry.Contact getSender()
      {
        return this.sender_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasHasAttachment();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getHasAttachment());
        }
        if (hasHasStar()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getHasStar());
        }
        if (hasIsUnread()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getIsUnread());
        }
        if (hasSubject()) {
          i += CodedOutputStreamMicro.computeStringSize(4, getSubject());
        }
        if (hasSnippet()) {
          i += CodedOutputStreamMicro.computeStringSize(5, getSnippet());
        }
        if (hasUrl()) {
          i += CodedOutputStreamMicro.computeStringSize(6, getUrl());
        }
        int j = 0;
        Iterator localIterator1 = getLabelsList().iterator();
        while (localIterator1.hasNext()) {
          j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator1.next());
        }
        int k = i + j + 1 * getLabelsList().size();
        if (hasThreadTimeSec()) {
          k += CodedOutputStreamMicro.computeInt64Size(8, getThreadTimeSec());
        }
        if (hasSender()) {
          k += CodedOutputStreamMicro.computeMessageSize(9, getSender());
        }
        Iterator localIterator2 = getRecipientsList().iterator();
        while (localIterator2.hasNext()) {
          k += CodedOutputStreamMicro.computeMessageSize(10, (Sidekick.GmailEntry.Contact)localIterator2.next());
        }
        Iterator localIterator3 = getParticipantsList().iterator();
        while (localIterator3.hasNext()) {
          k += CodedOutputStreamMicro.computeMessageSize(11, (Sidekick.GmailEntry.Contact)localIterator3.next());
        }
        if (hasIsImportant()) {
          k += CodedOutputStreamMicro.computeBoolSize(12, getIsImportant());
        }
        if (hasNumMessagesInThread()) {
          k += CodedOutputStreamMicro.computeUInt32Size(13, getNumMessagesInThread());
        }
        if (hasNumThreadParticipants()) {
          k += CodedOutputStreamMicro.computeUInt32Size(14, getNumThreadParticipants());
        }
        this.cachedSize = k;
        return k;
      }
      
      public String getSnippet()
      {
        return this.snippet_;
      }
      
      public String getSubject()
      {
        return this.subject_;
      }
      
      public long getThreadTimeSec()
      {
        return this.threadTimeSec_;
      }
      
      public String getUrl()
      {
        return this.url_;
      }
      
      public boolean hasHasAttachment()
      {
        return this.hasHasAttachment;
      }
      
      public boolean hasHasStar()
      {
        return this.hasHasStar;
      }
      
      public boolean hasIsImportant()
      {
        return this.hasIsImportant;
      }
      
      public boolean hasIsUnread()
      {
        return this.hasIsUnread;
      }
      
      public boolean hasNumMessagesInThread()
      {
        return this.hasNumMessagesInThread;
      }
      
      public boolean hasNumThreadParticipants()
      {
        return this.hasNumThreadParticipants;
      }
      
      public boolean hasSender()
      {
        return this.hasSender;
      }
      
      public boolean hasSnippet()
      {
        return this.hasSnippet;
      }
      
      public boolean hasSubject()
      {
        return this.hasSubject;
      }
      
      public boolean hasThreadTimeSec()
      {
        return this.hasThreadTimeSec;
      }
      
      public boolean hasUrl()
      {
        return this.hasUrl;
      }
      
      public GmailMessageDescription mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setHasAttachment(paramCodedInputStreamMicro.readBool());
            break;
          case 16: 
            setHasStar(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setIsUnread(paramCodedInputStreamMicro.readBool());
            break;
          case 34: 
            setSubject(paramCodedInputStreamMicro.readString());
            break;
          case 42: 
            setSnippet(paramCodedInputStreamMicro.readString());
            break;
          case 50: 
            setUrl(paramCodedInputStreamMicro.readString());
            break;
          case 58: 
            addLabels(paramCodedInputStreamMicro.readString());
            break;
          case 64: 
            setThreadTimeSec(paramCodedInputStreamMicro.readInt64());
            break;
          case 74: 
            Sidekick.GmailEntry.Contact localContact3 = new Sidekick.GmailEntry.Contact();
            paramCodedInputStreamMicro.readMessage(localContact3);
            setSender(localContact3);
            break;
          case 82: 
            Sidekick.GmailEntry.Contact localContact2 = new Sidekick.GmailEntry.Contact();
            paramCodedInputStreamMicro.readMessage(localContact2);
            addRecipients(localContact2);
            break;
          case 90: 
            Sidekick.GmailEntry.Contact localContact1 = new Sidekick.GmailEntry.Contact();
            paramCodedInputStreamMicro.readMessage(localContact1);
            addParticipants(localContact1);
            break;
          case 96: 
            setIsImportant(paramCodedInputStreamMicro.readBool());
            break;
          case 104: 
            setNumMessagesInThread(paramCodedInputStreamMicro.readUInt32());
            break;
          }
          setNumThreadParticipants(paramCodedInputStreamMicro.readUInt32());
        }
      }
      
      public GmailMessageDescription setHasAttachment(boolean paramBoolean)
      {
        this.hasHasAttachment = true;
        this.hasAttachment_ = paramBoolean;
        return this;
      }
      
      public GmailMessageDescription setHasStar(boolean paramBoolean)
      {
        this.hasHasStar = true;
        this.hasStar_ = paramBoolean;
        return this;
      }
      
      public GmailMessageDescription setIsImportant(boolean paramBoolean)
      {
        this.hasIsImportant = true;
        this.isImportant_ = paramBoolean;
        return this;
      }
      
      public GmailMessageDescription setIsUnread(boolean paramBoolean)
      {
        this.hasIsUnread = true;
        this.isUnread_ = paramBoolean;
        return this;
      }
      
      public GmailMessageDescription setNumMessagesInThread(int paramInt)
      {
        this.hasNumMessagesInThread = true;
        this.numMessagesInThread_ = paramInt;
        return this;
      }
      
      public GmailMessageDescription setNumThreadParticipants(int paramInt)
      {
        this.hasNumThreadParticipants = true;
        this.numThreadParticipants_ = paramInt;
        return this;
      }
      
      public GmailMessageDescription setSender(Sidekick.GmailEntry.Contact paramContact)
      {
        if (paramContact == null) {
          throw new NullPointerException();
        }
        this.hasSender = true;
        this.sender_ = paramContact;
        return this;
      }
      
      public GmailMessageDescription setSnippet(String paramString)
      {
        this.hasSnippet = true;
        this.snippet_ = paramString;
        return this;
      }
      
      public GmailMessageDescription setSubject(String paramString)
      {
        this.hasSubject = true;
        this.subject_ = paramString;
        return this;
      }
      
      public GmailMessageDescription setThreadTimeSec(long paramLong)
      {
        this.hasThreadTimeSec = true;
        this.threadTimeSec_ = paramLong;
        return this;
      }
      
      public GmailMessageDescription setUrl(String paramString)
      {
        this.hasUrl = true;
        this.url_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasHasAttachment()) {
          paramCodedOutputStreamMicro.writeBool(1, getHasAttachment());
        }
        if (hasHasStar()) {
          paramCodedOutputStreamMicro.writeBool(2, getHasStar());
        }
        if (hasIsUnread()) {
          paramCodedOutputStreamMicro.writeBool(3, getIsUnread());
        }
        if (hasSubject()) {
          paramCodedOutputStreamMicro.writeString(4, getSubject());
        }
        if (hasSnippet()) {
          paramCodedOutputStreamMicro.writeString(5, getSnippet());
        }
        if (hasUrl()) {
          paramCodedOutputStreamMicro.writeString(6, getUrl());
        }
        Iterator localIterator1 = getLabelsList().iterator();
        while (localIterator1.hasNext()) {
          paramCodedOutputStreamMicro.writeString(7, (String)localIterator1.next());
        }
        if (hasThreadTimeSec()) {
          paramCodedOutputStreamMicro.writeInt64(8, getThreadTimeSec());
        }
        if (hasSender()) {
          paramCodedOutputStreamMicro.writeMessage(9, getSender());
        }
        Iterator localIterator2 = getRecipientsList().iterator();
        while (localIterator2.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(10, (Sidekick.GmailEntry.Contact)localIterator2.next());
        }
        Iterator localIterator3 = getParticipantsList().iterator();
        while (localIterator3.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(11, (Sidekick.GmailEntry.Contact)localIterator3.next());
        }
        if (hasIsImportant()) {
          paramCodedOutputStreamMicro.writeBool(12, getIsImportant());
        }
        if (hasNumMessagesInThread()) {
          paramCodedOutputStreamMicro.writeUInt32(13, getNumMessagesInThread());
        }
        if (hasNumThreadParticipants()) {
          paramCodedOutputStreamMicro.writeUInt32(14, getNumThreadParticipants());
        }
      }
    }
  }
  
  public static final class GmailReference
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String emailIdentifier_ = "";
    private String emailUrl_ = "";
    private boolean hasEmailIdentifier;
    private boolean hasEmailUrl;
    private boolean hasSenderDisplayName;
    private boolean hasSenderEmailAddress;
    private String senderDisplayName_ = "";
    private String senderEmailAddress_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getEmailIdentifier()
    {
      return this.emailIdentifier_;
    }
    
    public String getEmailUrl()
    {
      return this.emailUrl_;
    }
    
    public String getSenderDisplayName()
    {
      return this.senderDisplayName_;
    }
    
    public String getSenderEmailAddress()
    {
      return this.senderEmailAddress_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasEmailIdentifier();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getEmailIdentifier());
      }
      if (hasSenderEmailAddress()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSenderEmailAddress());
      }
      if (hasEmailUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getEmailUrl());
      }
      if (hasSenderDisplayName()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getSenderDisplayName());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasEmailIdentifier()
    {
      return this.hasEmailIdentifier;
    }
    
    public boolean hasEmailUrl()
    {
      return this.hasEmailUrl;
    }
    
    public boolean hasSenderDisplayName()
    {
      return this.hasSenderDisplayName;
    }
    
    public boolean hasSenderEmailAddress()
    {
      return this.hasSenderEmailAddress;
    }
    
    public GmailReference mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setEmailIdentifier(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSenderEmailAddress(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setEmailUrl(paramCodedInputStreamMicro.readString());
          break;
        }
        setSenderDisplayName(paramCodedInputStreamMicro.readString());
      }
    }
    
    public GmailReference setEmailIdentifier(String paramString)
    {
      this.hasEmailIdentifier = true;
      this.emailIdentifier_ = paramString;
      return this;
    }
    
    public GmailReference setEmailUrl(String paramString)
    {
      this.hasEmailUrl = true;
      this.emailUrl_ = paramString;
      return this;
    }
    
    public GmailReference setSenderDisplayName(String paramString)
    {
      this.hasSenderDisplayName = true;
      this.senderDisplayName_ = paramString;
      return this;
    }
    
    public GmailReference setSenderEmailAddress(String paramString)
    {
      this.hasSenderEmailAddress = true;
      this.senderEmailAddress_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasEmailIdentifier()) {
        paramCodedOutputStreamMicro.writeString(1, getEmailIdentifier());
      }
      if (hasSenderEmailAddress()) {
        paramCodedOutputStreamMicro.writeString(2, getSenderEmailAddress());
      }
      if (hasEmailUrl()) {
        paramCodedOutputStreamMicro.writeString(3, getEmailUrl());
      }
      if (hasSenderDisplayName()) {
        paramCodedOutputStreamMicro.writeString(4, getSenderDisplayName());
      }
    }
  }
  
  public static final class ImageLureCardEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasJustification;
    private boolean hasSecondaryPageHeader;
    private boolean hasText;
    private boolean hasTitle;
    private String justification_ = "";
    private List<Sidekick.Photo> photo_ = Collections.emptyList();
    private Sidekick.SecondaryPageHeaderDescriptor secondaryPageHeader_ = null;
    private String text_ = "";
    private String title_ = "";
    
    public ImageLureCardEntry addPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      if (this.photo_.isEmpty()) {
        this.photo_ = new ArrayList();
      }
      this.photo_.add(paramPhoto);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getJustification()
    {
      return this.justification_;
    }
    
    public int getPhotoCount()
    {
      return this.photo_.size();
    }
    
    public List<Sidekick.Photo> getPhotoList()
    {
      return this.photo_;
    }
    
    public Sidekick.SecondaryPageHeaderDescriptor getSecondaryPageHeader()
    {
      return this.secondaryPageHeader_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasText()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getText());
      }
      Iterator localIterator = getPhotoList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.Photo)localIterator.next());
      }
      if (hasSecondaryPageHeader()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getSecondaryPageHeader());
      }
      if (hasJustification()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getJustification());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getText()
    {
      return this.text_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasJustification()
    {
      return this.hasJustification;
    }
    
    public boolean hasSecondaryPageHeader()
    {
      return this.hasSecondaryPageHeader;
    }
    
    public boolean hasText()
    {
      return this.hasText;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public ImageLureCardEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setText(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          addPhoto(localPhoto);
          break;
        case 34: 
          Sidekick.SecondaryPageHeaderDescriptor localSecondaryPageHeaderDescriptor = new Sidekick.SecondaryPageHeaderDescriptor();
          paramCodedInputStreamMicro.readMessage(localSecondaryPageHeaderDescriptor);
          setSecondaryPageHeader(localSecondaryPageHeaderDescriptor);
          break;
        }
        setJustification(paramCodedInputStreamMicro.readString());
      }
    }
    
    public ImageLureCardEntry setJustification(String paramString)
    {
      this.hasJustification = true;
      this.justification_ = paramString;
      return this;
    }
    
    public ImageLureCardEntry setSecondaryPageHeader(Sidekick.SecondaryPageHeaderDescriptor paramSecondaryPageHeaderDescriptor)
    {
      if (paramSecondaryPageHeaderDescriptor == null) {
        throw new NullPointerException();
      }
      this.hasSecondaryPageHeader = true;
      this.secondaryPageHeader_ = paramSecondaryPageHeaderDescriptor;
      return this;
    }
    
    public ImageLureCardEntry setText(String paramString)
    {
      this.hasText = true;
      this.text_ = paramString;
      return this;
    }
    
    public ImageLureCardEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasText()) {
        paramCodedOutputStreamMicro.writeString(2, getText());
      }
      Iterator localIterator = getPhotoList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.Photo)localIterator.next());
      }
      if (hasSecondaryPageHeader()) {
        paramCodedOutputStreamMicro.writeMessage(4, getSecondaryPageHeader());
      }
      if (hasJustification()) {
        paramCodedOutputStreamMicro.writeString(5, getJustification());
      }
    }
  }
  
  public static final class Interest
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int constraintLevel_ = 0;
    private ByteStringMicro encodedServerPayload_ = ByteStringMicro.EMPTY;
    private List<Integer> entryTypeRestrict_ = Collections.emptyList();
    private boolean exampleData_ = false;
    private Filter filter_ = null;
    private boolean hasConstraintLevel;
    private boolean hasEncodedServerPayload;
    private boolean hasExampleData;
    private boolean hasFilter;
    private boolean hasIncludeStricterConstraintResponses;
    private boolean hasMaxEntriesTotalToProduce;
    private boolean hasNumItemsToFetch;
    private boolean hasOffset;
    private boolean hasTargetDisplay;
    private boolean hasTestData;
    private boolean includeStricterConstraintResponses_ = false;
    private int maxEntriesTotalToProduce_ = 0;
    private int numItemsToFetch_ = 0;
    private int offset_ = 0;
    private int targetDisplay_ = 1;
    private boolean testData_ = false;
    private List<TimeSpaceRegion> timeSpaceRegion_ = Collections.emptyList();
    
    public Interest addEntryTypeRestrict(int paramInt)
    {
      if (this.entryTypeRestrict_.isEmpty()) {
        this.entryTypeRestrict_ = new ArrayList();
      }
      this.entryTypeRestrict_.add(Integer.valueOf(paramInt));
      return this;
    }
    
    public Interest addTimeSpaceRegion(TimeSpaceRegion paramTimeSpaceRegion)
    {
      if (paramTimeSpaceRegion == null) {
        throw new NullPointerException();
      }
      if (this.timeSpaceRegion_.isEmpty()) {
        this.timeSpaceRegion_ = new ArrayList();
      }
      this.timeSpaceRegion_.add(paramTimeSpaceRegion);
      return this;
    }
    
    public Interest clearEntryTypeRestrict()
    {
      this.entryTypeRestrict_ = Collections.emptyList();
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getConstraintLevel()
    {
      return this.constraintLevel_;
    }
    
    public ByteStringMicro getEncodedServerPayload()
    {
      return this.encodedServerPayload_;
    }
    
    public int getEntryTypeRestrict(int paramInt)
    {
      return ((Integer)this.entryTypeRestrict_.get(paramInt)).intValue();
    }
    
    public int getEntryTypeRestrictCount()
    {
      return this.entryTypeRestrict_.size();
    }
    
    public List<Integer> getEntryTypeRestrictList()
    {
      return this.entryTypeRestrict_;
    }
    
    public boolean getExampleData()
    {
      return this.exampleData_;
    }
    
    public Filter getFilter()
    {
      return this.filter_;
    }
    
    public boolean getIncludeStricterConstraintResponses()
    {
      return this.includeStricterConstraintResponses_;
    }
    
    public int getMaxEntriesTotalToProduce()
    {
      return this.maxEntriesTotalToProduce_;
    }
    
    public int getNumItemsToFetch()
    {
      return this.numItemsToFetch_;
    }
    
    public int getOffset()
    {
      return this.offset_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTargetDisplay();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getTargetDisplay());
      }
      if (hasMaxEntriesTotalToProduce()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getMaxEntriesTotalToProduce());
      }
      if (hasNumItemsToFetch()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getNumItemsToFetch());
      }
      if (hasOffset()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getOffset());
      }
      Iterator localIterator1 = getTimeSpaceRegionList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, (TimeSpaceRegion)localIterator1.next());
      }
      int j = 0;
      Iterator localIterator2 = getEntryTypeRestrictList().iterator();
      while (localIterator2.hasNext()) {
        j += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator2.next()).intValue());
      }
      int k = i + j + 1 * getEntryTypeRestrictList().size();
      if (hasConstraintLevel()) {
        k += CodedOutputStreamMicro.computeInt32Size(7, getConstraintLevel());
      }
      if (hasExampleData()) {
        k += CodedOutputStreamMicro.computeBoolSize(8, getExampleData());
      }
      if (hasIncludeStricterConstraintResponses()) {
        k += CodedOutputStreamMicro.computeBoolSize(9, getIncludeStricterConstraintResponses());
      }
      if (hasEncodedServerPayload()) {
        k += CodedOutputStreamMicro.computeBytesSize(10, getEncodedServerPayload());
      }
      if (hasFilter()) {
        k += CodedOutputStreamMicro.computeMessageSize(11, getFilter());
      }
      if (hasTestData()) {
        k += CodedOutputStreamMicro.computeBoolSize(12, getTestData());
      }
      this.cachedSize = k;
      return k;
    }
    
    public int getTargetDisplay()
    {
      return this.targetDisplay_;
    }
    
    public boolean getTestData()
    {
      return this.testData_;
    }
    
    public List<TimeSpaceRegion> getTimeSpaceRegionList()
    {
      return this.timeSpaceRegion_;
    }
    
    public boolean hasConstraintLevel()
    {
      return this.hasConstraintLevel;
    }
    
    public boolean hasEncodedServerPayload()
    {
      return this.hasEncodedServerPayload;
    }
    
    public boolean hasExampleData()
    {
      return this.hasExampleData;
    }
    
    public boolean hasFilter()
    {
      return this.hasFilter;
    }
    
    public boolean hasIncludeStricterConstraintResponses()
    {
      return this.hasIncludeStricterConstraintResponses;
    }
    
    public boolean hasMaxEntriesTotalToProduce()
    {
      return this.hasMaxEntriesTotalToProduce;
    }
    
    public boolean hasNumItemsToFetch()
    {
      return this.hasNumItemsToFetch;
    }
    
    public boolean hasOffset()
    {
      return this.hasOffset;
    }
    
    public boolean hasTargetDisplay()
    {
      return this.hasTargetDisplay;
    }
    
    public boolean hasTestData()
    {
      return this.hasTestData;
    }
    
    public Interest mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setTargetDisplay(paramCodedInputStreamMicro.readInt32());
          break;
        case 16: 
          setMaxEntriesTotalToProduce(paramCodedInputStreamMicro.readInt32());
          break;
        case 24: 
          setNumItemsToFetch(paramCodedInputStreamMicro.readInt32());
          break;
        case 32: 
          setOffset(paramCodedInputStreamMicro.readInt32());
          break;
        case 42: 
          TimeSpaceRegion localTimeSpaceRegion = new TimeSpaceRegion();
          paramCodedInputStreamMicro.readMessage(localTimeSpaceRegion);
          addTimeSpaceRegion(localTimeSpaceRegion);
          break;
        case 48: 
          addEntryTypeRestrict(paramCodedInputStreamMicro.readInt32());
          break;
        case 56: 
          setConstraintLevel(paramCodedInputStreamMicro.readInt32());
          break;
        case 64: 
          setExampleData(paramCodedInputStreamMicro.readBool());
          break;
        case 72: 
          setIncludeStricterConstraintResponses(paramCodedInputStreamMicro.readBool());
          break;
        case 82: 
          setEncodedServerPayload(paramCodedInputStreamMicro.readBytes());
          break;
        case 90: 
          Filter localFilter = new Filter();
          paramCodedInputStreamMicro.readMessage(localFilter);
          setFilter(localFilter);
          break;
        }
        setTestData(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public Interest setConstraintLevel(int paramInt)
    {
      this.hasConstraintLevel = true;
      this.constraintLevel_ = paramInt;
      return this;
    }
    
    public Interest setEncodedServerPayload(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedServerPayload = true;
      this.encodedServerPayload_ = paramByteStringMicro;
      return this;
    }
    
    public Interest setExampleData(boolean paramBoolean)
    {
      this.hasExampleData = true;
      this.exampleData_ = paramBoolean;
      return this;
    }
    
    public Interest setFilter(Filter paramFilter)
    {
      if (paramFilter == null) {
        throw new NullPointerException();
      }
      this.hasFilter = true;
      this.filter_ = paramFilter;
      return this;
    }
    
    public Interest setIncludeStricterConstraintResponses(boolean paramBoolean)
    {
      this.hasIncludeStricterConstraintResponses = true;
      this.includeStricterConstraintResponses_ = paramBoolean;
      return this;
    }
    
    public Interest setMaxEntriesTotalToProduce(int paramInt)
    {
      this.hasMaxEntriesTotalToProduce = true;
      this.maxEntriesTotalToProduce_ = paramInt;
      return this;
    }
    
    public Interest setNumItemsToFetch(int paramInt)
    {
      this.hasNumItemsToFetch = true;
      this.numItemsToFetch_ = paramInt;
      return this;
    }
    
    public Interest setOffset(int paramInt)
    {
      this.hasOffset = true;
      this.offset_ = paramInt;
      return this;
    }
    
    public Interest setTargetDisplay(int paramInt)
    {
      this.hasTargetDisplay = true;
      this.targetDisplay_ = paramInt;
      return this;
    }
    
    public Interest setTestData(boolean paramBoolean)
    {
      this.hasTestData = true;
      this.testData_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTargetDisplay()) {
        paramCodedOutputStreamMicro.writeInt32(1, getTargetDisplay());
      }
      if (hasMaxEntriesTotalToProduce()) {
        paramCodedOutputStreamMicro.writeInt32(2, getMaxEntriesTotalToProduce());
      }
      if (hasNumItemsToFetch()) {
        paramCodedOutputStreamMicro.writeInt32(3, getNumItemsToFetch());
      }
      if (hasOffset()) {
        paramCodedOutputStreamMicro.writeInt32(4, getOffset());
      }
      Iterator localIterator1 = getTimeSpaceRegionList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(5, (TimeSpaceRegion)localIterator1.next());
      }
      Iterator localIterator2 = getEntryTypeRestrictList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeInt32(6, ((Integer)localIterator2.next()).intValue());
      }
      if (hasConstraintLevel()) {
        paramCodedOutputStreamMicro.writeInt32(7, getConstraintLevel());
      }
      if (hasExampleData()) {
        paramCodedOutputStreamMicro.writeBool(8, getExampleData());
      }
      if (hasIncludeStricterConstraintResponses()) {
        paramCodedOutputStreamMicro.writeBool(9, getIncludeStricterConstraintResponses());
      }
      if (hasEncodedServerPayload()) {
        paramCodedOutputStreamMicro.writeBytes(10, getEncodedServerPayload());
      }
      if (hasFilter()) {
        paramCodedOutputStreamMicro.writeMessage(11, getFilter());
      }
      if (hasTestData()) {
        paramCodedOutputStreamMicro.writeBool(12, getTestData());
      }
    }
    
    public static final class Filter
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasTvContentId;
      private String tvContentId_ = "";
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasTvContentId();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTvContentId());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getTvContentId()
      {
        return this.tvContentId_;
      }
      
      public boolean hasTvContentId()
      {
        return this.hasTvContentId;
      }
      
      public Filter mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          setTvContentId(paramCodedInputStreamMicro.readString());
        }
      }
      
      public Filter setTvContentId(String paramString)
      {
        this.hasTvContentId = true;
        this.tvContentId_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasTvContentId()) {
          paramCodedOutputStreamMicro.writeString(1, getTvContentId());
        }
      }
    }
    
    public static final class TimeSpaceRegion
      extends MessageMicro
    {
      private int cachedSize = -1;
      private long endSeconds_ = 0L;
      private boolean hasEndSeconds;
      private boolean hasLocation;
      private boolean hasStartSeconds;
      private Sidekick.Location location_ = null;
      private long startSeconds_ = 0L;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public long getEndSeconds()
      {
        return this.endSeconds_;
      }
      
      public Sidekick.Location getLocation()
      {
        return this.location_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasLocation();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getLocation());
        }
        if (hasStartSeconds()) {
          i += CodedOutputStreamMicro.computeInt64Size(2, getStartSeconds());
        }
        if (hasEndSeconds()) {
          i += CodedOutputStreamMicro.computeInt64Size(3, getEndSeconds());
        }
        this.cachedSize = i;
        return i;
      }
      
      public long getStartSeconds()
      {
        return this.startSeconds_;
      }
      
      public boolean hasEndSeconds()
      {
        return this.hasEndSeconds;
      }
      
      public boolean hasLocation()
      {
        return this.hasLocation;
      }
      
      public boolean hasStartSeconds()
      {
        return this.hasStartSeconds;
      }
      
      public TimeSpaceRegion mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.Location localLocation = new Sidekick.Location();
            paramCodedInputStreamMicro.readMessage(localLocation);
            setLocation(localLocation);
            break;
          case 16: 
            setStartSeconds(paramCodedInputStreamMicro.readInt64());
            break;
          }
          setEndSeconds(paramCodedInputStreamMicro.readInt64());
        }
      }
      
      public TimeSpaceRegion setEndSeconds(long paramLong)
      {
        this.hasEndSeconds = true;
        this.endSeconds_ = paramLong;
        return this;
      }
      
      public TimeSpaceRegion setLocation(Sidekick.Location paramLocation)
      {
        if (paramLocation == null) {
          throw new NullPointerException();
        }
        this.hasLocation = true;
        this.location_ = paramLocation;
        return this;
      }
      
      public TimeSpaceRegion setStartSeconds(long paramLong)
      {
        this.hasStartSeconds = true;
        this.startSeconds_ = paramLong;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasLocation()) {
          paramCodedOutputStreamMicro.writeMessage(1, getLocation());
        }
        if (hasStartSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(2, getStartSeconds());
        }
        if (hasEndSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(3, getEndSeconds());
        }
      }
    }
  }
  
  public static final class KnowledgeFact
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasName;
    private boolean hasValue;
    private String name_ = "";
    private String value_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
      }
      if (hasValue()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getValue());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getValue()
    {
      return this.value_;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasValue()
    {
      return this.hasValue;
    }
    
    public KnowledgeFact mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        }
        setValue(paramCodedInputStreamMicro.readString());
      }
    }
    
    public KnowledgeFact setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public KnowledgeFact setValue(String paramString)
    {
      this.hasValue = true;
      this.value_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(1, getName());
      }
      if (hasValue()) {
        paramCodedOutputStreamMicro.writeString(2, getValue());
      }
    }
  }
  
  public static final class LayoutInfo
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int cardWidthPixelsLandscape_ = 0;
    private int cardWidthPixelsPortrait_ = 0;
    private boolean hasCardWidthPixelsLandscape;
    private boolean hasCardWidthPixelsPortrait;
    private boolean hasScreenDensity;
    private boolean hasScreenPixelsLongestEdge;
    private boolean hasScreenPixelsShortestEdge;
    private float screenDensity_ = 0.0F;
    private int screenPixelsLongestEdge_ = 0;
    private int screenPixelsShortestEdge_ = 0;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getCardWidthPixelsLandscape()
    {
      return this.cardWidthPixelsLandscape_;
    }
    
    public int getCardWidthPixelsPortrait()
    {
      return this.cardWidthPixelsPortrait_;
    }
    
    public float getScreenDensity()
    {
      return this.screenDensity_;
    }
    
    public int getScreenPixelsLongestEdge()
    {
      return this.screenPixelsLongestEdge_;
    }
    
    public int getScreenPixelsShortestEdge()
    {
      return this.screenPixelsShortestEdge_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasScreenPixelsLongestEdge();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getScreenPixelsLongestEdge());
      }
      if (hasScreenPixelsShortestEdge()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getScreenPixelsShortestEdge());
      }
      if (hasScreenDensity()) {
        i += CodedOutputStreamMicro.computeFloatSize(3, getScreenDensity());
      }
      if (hasCardWidthPixelsPortrait()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getCardWidthPixelsPortrait());
      }
      if (hasCardWidthPixelsLandscape()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getCardWidthPixelsLandscape());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasCardWidthPixelsLandscape()
    {
      return this.hasCardWidthPixelsLandscape;
    }
    
    public boolean hasCardWidthPixelsPortrait()
    {
      return this.hasCardWidthPixelsPortrait;
    }
    
    public boolean hasScreenDensity()
    {
      return this.hasScreenDensity;
    }
    
    public boolean hasScreenPixelsLongestEdge()
    {
      return this.hasScreenPixelsLongestEdge;
    }
    
    public boolean hasScreenPixelsShortestEdge()
    {
      return this.hasScreenPixelsShortestEdge;
    }
    
    public LayoutInfo mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setScreenPixelsLongestEdge(paramCodedInputStreamMicro.readInt32());
          break;
        case 16: 
          setScreenPixelsShortestEdge(paramCodedInputStreamMicro.readInt32());
          break;
        case 29: 
          setScreenDensity(paramCodedInputStreamMicro.readFloat());
          break;
        case 32: 
          setCardWidthPixelsPortrait(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setCardWidthPixelsLandscape(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public LayoutInfo setCardWidthPixelsLandscape(int paramInt)
    {
      this.hasCardWidthPixelsLandscape = true;
      this.cardWidthPixelsLandscape_ = paramInt;
      return this;
    }
    
    public LayoutInfo setCardWidthPixelsPortrait(int paramInt)
    {
      this.hasCardWidthPixelsPortrait = true;
      this.cardWidthPixelsPortrait_ = paramInt;
      return this;
    }
    
    public LayoutInfo setScreenDensity(float paramFloat)
    {
      this.hasScreenDensity = true;
      this.screenDensity_ = paramFloat;
      return this;
    }
    
    public LayoutInfo setScreenPixelsLongestEdge(int paramInt)
    {
      this.hasScreenPixelsLongestEdge = true;
      this.screenPixelsLongestEdge_ = paramInt;
      return this;
    }
    
    public LayoutInfo setScreenPixelsShortestEdge(int paramInt)
    {
      this.hasScreenPixelsShortestEdge = true;
      this.screenPixelsShortestEdge_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasScreenPixelsLongestEdge()) {
        paramCodedOutputStreamMicro.writeInt32(1, getScreenPixelsLongestEdge());
      }
      if (hasScreenPixelsShortestEdge()) {
        paramCodedOutputStreamMicro.writeInt32(2, getScreenPixelsShortestEdge());
      }
      if (hasScreenDensity()) {
        paramCodedOutputStreamMicro.writeFloat(3, getScreenDensity());
      }
      if (hasCardWidthPixelsPortrait()) {
        paramCodedOutputStreamMicro.writeInt32(4, getCardWidthPixelsPortrait());
      }
      if (hasCardWidthPixelsLandscape()) {
        paramCodedOutputStreamMicro.writeInt32(5, getCardWidthPixelsLandscape());
      }
    }
  }
  
  public static final class LocaleConfiguration
    extends MessageMicro
  {
    private boolean bikingDirectionsEnabled_ = false;
    private int cachedSize = -1;
    private boolean enabled_ = true;
    private boolean hasBikingDirectionsEnabled;
    private boolean hasEnabled;
    
    public boolean getBikingDirectionsEnabled()
    {
      return this.bikingDirectionsEnabled_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getEnabled()
    {
      return this.enabled_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasEnabled();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getEnabled());
      }
      if (hasBikingDirectionsEnabled()) {
        i += CodedOutputStreamMicro.computeBoolSize(2, getBikingDirectionsEnabled());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasBikingDirectionsEnabled()
    {
      return this.hasBikingDirectionsEnabled;
    }
    
    public boolean hasEnabled()
    {
      return this.hasEnabled;
    }
    
    public LocaleConfiguration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setEnabled(paramCodedInputStreamMicro.readBool());
          break;
        }
        setBikingDirectionsEnabled(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public LocaleConfiguration setBikingDirectionsEnabled(boolean paramBoolean)
    {
      this.hasBikingDirectionsEnabled = true;
      this.bikingDirectionsEnabled_ = paramBoolean;
      return this;
    }
    
    public LocaleConfiguration setEnabled(boolean paramBoolean)
    {
      this.hasEnabled = true;
      this.enabled_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasEnabled()) {
        paramCodedOutputStreamMicro.writeBool(1, getEnabled());
      }
      if (hasBikingDirectionsEnabled()) {
        paramCodedOutputStreamMicro.writeBool(2, getBikingDirectionsEnabled());
      }
    }
  }
  
  public static final class Location
    extends MessageMicro
  {
    private String address_ = "";
    private int alias_ = 1;
    private int cachedSize = -1;
    private Sidekick.Chain chain_ = null;
    private long cid_ = 0L;
    private int featureType_ = 0;
    private String geocodeToken_ = "";
    private boolean hasAddress;
    private boolean hasAlias;
    private boolean hasChain;
    private boolean hasCid;
    private boolean hasFeatureType;
    private boolean hasGeocodeToken;
    private boolean hasLat;
    private boolean hasLng;
    private boolean hasName;
    private boolean hasRadiusMeters;
    private boolean hasSkipGeocode;
    private double lat_ = 0.0D;
    private double lng_ = 0.0D;
    private String name_ = "";
    private double radiusMeters_ = 0.0D;
    private boolean skipGeocode_ = false;
    
    public String getAddress()
    {
      return this.address_;
    }
    
    public int getAlias()
    {
      return this.alias_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Chain getChain()
    {
      return this.chain_;
    }
    
    public long getCid()
    {
      return this.cid_;
    }
    
    public int getFeatureType()
    {
      return this.featureType_;
    }
    
    public String getGeocodeToken()
    {
      return this.geocodeToken_;
    }
    
    public double getLat()
    {
      return this.lat_;
    }
    
    public double getLng()
    {
      return this.lng_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public double getRadiusMeters()
    {
      return this.radiusMeters_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLat();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeDoubleSize(1, getLat());
      }
      if (hasLng()) {
        i += CodedOutputStreamMicro.computeDoubleSize(2, getLng());
      }
      if (hasName()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getName());
      }
      if (hasAddress()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getAddress());
      }
      if (hasRadiusMeters()) {
        i += CodedOutputStreamMicro.computeDoubleSize(6, getRadiusMeters());
      }
      if (hasCid()) {
        i += CodedOutputStreamMicro.computeInt64Size(7, getCid());
      }
      if (hasSkipGeocode()) {
        i += CodedOutputStreamMicro.computeBoolSize(8, getSkipGeocode());
      }
      if (hasAlias()) {
        i += CodedOutputStreamMicro.computeInt32Size(9, getAlias());
      }
      if (hasFeatureType()) {
        i += CodedOutputStreamMicro.computeInt32Size(10, getFeatureType());
      }
      if (hasGeocodeToken()) {
        i += CodedOutputStreamMicro.computeStringSize(11, getGeocodeToken());
      }
      if (hasChain()) {
        i += CodedOutputStreamMicro.computeMessageSize(12, getChain());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean getSkipGeocode()
    {
      return this.skipGeocode_;
    }
    
    public boolean hasAddress()
    {
      return this.hasAddress;
    }
    
    public boolean hasAlias()
    {
      return this.hasAlias;
    }
    
    public boolean hasChain()
    {
      return this.hasChain;
    }
    
    public boolean hasCid()
    {
      return this.hasCid;
    }
    
    public boolean hasFeatureType()
    {
      return this.hasFeatureType;
    }
    
    public boolean hasGeocodeToken()
    {
      return this.hasGeocodeToken;
    }
    
    public boolean hasLat()
    {
      return this.hasLat;
    }
    
    public boolean hasLng()
    {
      return this.hasLng;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasRadiusMeters()
    {
      return this.hasRadiusMeters;
    }
    
    public boolean hasSkipGeocode()
    {
      return this.hasSkipGeocode;
    }
    
    public Location mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 9: 
          setLat(paramCodedInputStreamMicro.readDouble());
          break;
        case 17: 
          setLng(paramCodedInputStreamMicro.readDouble());
          break;
        case 26: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setAddress(paramCodedInputStreamMicro.readString());
          break;
        case 49: 
          setRadiusMeters(paramCodedInputStreamMicro.readDouble());
          break;
        case 56: 
          setCid(paramCodedInputStreamMicro.readInt64());
          break;
        case 64: 
          setSkipGeocode(paramCodedInputStreamMicro.readBool());
          break;
        case 72: 
          setAlias(paramCodedInputStreamMicro.readInt32());
          break;
        case 80: 
          setFeatureType(paramCodedInputStreamMicro.readInt32());
          break;
        case 90: 
          setGeocodeToken(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.Chain localChain = new Sidekick.Chain();
        paramCodedInputStreamMicro.readMessage(localChain);
        setChain(localChain);
      }
    }
    
    public Location setAddress(String paramString)
    {
      this.hasAddress = true;
      this.address_ = paramString;
      return this;
    }
    
    public Location setAlias(int paramInt)
    {
      this.hasAlias = true;
      this.alias_ = paramInt;
      return this;
    }
    
    public Location setChain(Sidekick.Chain paramChain)
    {
      if (paramChain == null) {
        throw new NullPointerException();
      }
      this.hasChain = true;
      this.chain_ = paramChain;
      return this;
    }
    
    public Location setCid(long paramLong)
    {
      this.hasCid = true;
      this.cid_ = paramLong;
      return this;
    }
    
    public Location setFeatureType(int paramInt)
    {
      this.hasFeatureType = true;
      this.featureType_ = paramInt;
      return this;
    }
    
    public Location setGeocodeToken(String paramString)
    {
      this.hasGeocodeToken = true;
      this.geocodeToken_ = paramString;
      return this;
    }
    
    public Location setLat(double paramDouble)
    {
      this.hasLat = true;
      this.lat_ = paramDouble;
      return this;
    }
    
    public Location setLng(double paramDouble)
    {
      this.hasLng = true;
      this.lng_ = paramDouble;
      return this;
    }
    
    public Location setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public Location setRadiusMeters(double paramDouble)
    {
      this.hasRadiusMeters = true;
      this.radiusMeters_ = paramDouble;
      return this;
    }
    
    public Location setSkipGeocode(boolean paramBoolean)
    {
      this.hasSkipGeocode = true;
      this.skipGeocode_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLat()) {
        paramCodedOutputStreamMicro.writeDouble(1, getLat());
      }
      if (hasLng()) {
        paramCodedOutputStreamMicro.writeDouble(2, getLng());
      }
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(3, getName());
      }
      if (hasAddress()) {
        paramCodedOutputStreamMicro.writeString(4, getAddress());
      }
      if (hasRadiusMeters()) {
        paramCodedOutputStreamMicro.writeDouble(6, getRadiusMeters());
      }
      if (hasCid()) {
        paramCodedOutputStreamMicro.writeInt64(7, getCid());
      }
      if (hasSkipGeocode()) {
        paramCodedOutputStreamMicro.writeBool(8, getSkipGeocode());
      }
      if (hasAlias()) {
        paramCodedOutputStreamMicro.writeInt32(9, getAlias());
      }
      if (hasFeatureType()) {
        paramCodedOutputStreamMicro.writeInt32(10, getFeatureType());
      }
      if (hasGeocodeToken()) {
        paramCodedOutputStreamMicro.writeString(11, getGeocodeToken());
      }
      if (hasChain()) {
        paramCodedOutputStreamMicro.writeMessage(12, getChain());
      }
    }
  }
  
  public static final class LocationHistoryReminderEntry
    extends MessageMicro
  {
    private List<ActivityStats> aerobicStats_ = Collections.emptyList();
    private int cachedSize = -1;
    
    public LocationHistoryReminderEntry addAerobicStats(ActivityStats paramActivityStats)
    {
      if (paramActivityStats == null) {
        throw new NullPointerException();
      }
      if (this.aerobicStats_.isEmpty()) {
        this.aerobicStats_ = new ArrayList();
      }
      this.aerobicStats_.add(paramActivityStats);
      return this;
    }
    
    public List<ActivityStats> getAerobicStatsList()
    {
      return this.aerobicStats_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getAerobicStatsList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (ActivityStats)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public LocationHistoryReminderEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        ActivityStats localActivityStats = new ActivityStats();
        paramCodedInputStreamMicro.readMessage(localActivityStats);
        addAerobicStats(localActivityStats);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getAerobicStatsList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (ActivityStats)localIterator.next());
      }
    }
    
    public static final class ActivityStats
      extends MessageMicro
    {
      private Sidekick.Photo activityIcon_ = null;
      private String activity_ = "";
      private int cachedSize = -1;
      private boolean hasActivity;
      private boolean hasActivityIcon;
      private List<Sidekick.LocationHistoryReminderEntry.StatsPerMonth> stats_ = Collections.emptyList();
      
      public ActivityStats addStats(Sidekick.LocationHistoryReminderEntry.StatsPerMonth paramStatsPerMonth)
      {
        if (paramStatsPerMonth == null) {
          throw new NullPointerException();
        }
        if (this.stats_.isEmpty()) {
          this.stats_ = new ArrayList();
        }
        this.stats_.add(paramStatsPerMonth);
        return this;
      }
      
      public String getActivity()
      {
        return this.activity_;
      }
      
      public Sidekick.Photo getActivityIcon()
      {
        return this.activityIcon_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasActivity();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getActivity());
        }
        if (hasActivityIcon()) {
          i += CodedOutputStreamMicro.computeMessageSize(2, getActivityIcon());
        }
        Iterator localIterator = getStatsList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.LocationHistoryReminderEntry.StatsPerMonth)localIterator.next());
        }
        this.cachedSize = i;
        return i;
      }
      
      public Sidekick.LocationHistoryReminderEntry.StatsPerMonth getStats(int paramInt)
      {
        return (Sidekick.LocationHistoryReminderEntry.StatsPerMonth)this.stats_.get(paramInt);
      }
      
      public int getStatsCount()
      {
        return this.stats_.size();
      }
      
      public List<Sidekick.LocationHistoryReminderEntry.StatsPerMonth> getStatsList()
      {
        return this.stats_;
      }
      
      public boolean hasActivity()
      {
        return this.hasActivity;
      }
      
      public boolean hasActivityIcon()
      {
        return this.hasActivityIcon;
      }
      
      public ActivityStats mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setActivity(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            Sidekick.Photo localPhoto = new Sidekick.Photo();
            paramCodedInputStreamMicro.readMessage(localPhoto);
            setActivityIcon(localPhoto);
            break;
          }
          Sidekick.LocationHistoryReminderEntry.StatsPerMonth localStatsPerMonth = new Sidekick.LocationHistoryReminderEntry.StatsPerMonth();
          paramCodedInputStreamMicro.readMessage(localStatsPerMonth);
          addStats(localStatsPerMonth);
        }
      }
      
      public ActivityStats setActivity(String paramString)
      {
        this.hasActivity = true;
        this.activity_ = paramString;
        return this;
      }
      
      public ActivityStats setActivityIcon(Sidekick.Photo paramPhoto)
      {
        if (paramPhoto == null) {
          throw new NullPointerException();
        }
        this.hasActivityIcon = true;
        this.activityIcon_ = paramPhoto;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasActivity()) {
          paramCodedOutputStreamMicro.writeString(1, getActivity());
        }
        if (hasActivityIcon()) {
          paramCodedOutputStreamMicro.writeMessage(2, getActivityIcon());
        }
        Iterator localIterator = getStatsList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.LocationHistoryReminderEntry.StatsPerMonth)localIterator.next());
        }
      }
    }
    
    public static final class StatsPerMonth
      extends MessageMicro
    {
      private int cachedSize = -1;
      private int distanceInMeters_ = 0;
      private boolean hasDistanceInMeters;
      private boolean hasMonth;
      private int month_ = 1;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getDistanceInMeters()
      {
        return this.distanceInMeters_;
      }
      
      public int getMonth()
      {
        return this.month_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasMonth();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getMonth());
        }
        if (hasDistanceInMeters()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getDistanceInMeters());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasDistanceInMeters()
      {
        return this.hasDistanceInMeters;
      }
      
      public boolean hasMonth()
      {
        return this.hasMonth;
      }
      
      public StatsPerMonth mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setMonth(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setDistanceInMeters(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public StatsPerMonth setDistanceInMeters(int paramInt)
      {
        this.hasDistanceInMeters = true;
        this.distanceInMeters_ = paramInt;
        return this;
      }
      
      public StatsPerMonth setMonth(int paramInt)
      {
        this.hasMonth = true;
        this.month_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasMonth()) {
          paramCodedOutputStreamMicro.writeInt32(1, getMonth());
        }
        if (hasDistanceInMeters()) {
          paramCodedOutputStreamMicro.writeInt32(2, getDistanceInMeters());
        }
      }
    }
  }
  
  public static final class LocationReportingConfiguration
    extends MessageMicro
  {
    private String appSpecificKey_ = "";
    private int cachedSize = -1;
    private boolean cancelBurstReporting_ = false;
    private long endBurstReportingTimestampSeconds_ = 0L;
    private boolean hasAppSpecificKey;
    private boolean hasCancelBurstReporting;
    private boolean hasEndBurstReportingTimestampSeconds;
    private boolean hasMovingFrequencyMillis;
    private boolean hasReason;
    private boolean hasStationaryFrequencyMillis;
    private int movingFrequencyMillis_ = 0;
    private String reason_ = "";
    private int stationaryFrequencyMillis_ = 0;
    
    public String getAppSpecificKey()
    {
      return this.appSpecificKey_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getCancelBurstReporting()
    {
      return this.cancelBurstReporting_;
    }
    
    public long getEndBurstReportingTimestampSeconds()
    {
      return this.endBurstReportingTimestampSeconds_;
    }
    
    public int getMovingFrequencyMillis()
    {
      return this.movingFrequencyMillis_;
    }
    
    public String getReason()
    {
      return this.reason_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasReason();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getReason());
      }
      if (hasAppSpecificKey()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getAppSpecificKey());
      }
      if (hasCancelBurstReporting()) {
        i += CodedOutputStreamMicro.computeBoolSize(3, getCancelBurstReporting());
      }
      if (hasEndBurstReportingTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(4, getEndBurstReportingTimestampSeconds());
      }
      if (hasMovingFrequencyMillis()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getMovingFrequencyMillis());
      }
      if (hasStationaryFrequencyMillis()) {
        i += CodedOutputStreamMicro.computeInt32Size(6, getStationaryFrequencyMillis());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getStationaryFrequencyMillis()
    {
      return this.stationaryFrequencyMillis_;
    }
    
    public boolean hasAppSpecificKey()
    {
      return this.hasAppSpecificKey;
    }
    
    public boolean hasCancelBurstReporting()
    {
      return this.hasCancelBurstReporting;
    }
    
    public boolean hasEndBurstReportingTimestampSeconds()
    {
      return this.hasEndBurstReportingTimestampSeconds;
    }
    
    public boolean hasMovingFrequencyMillis()
    {
      return this.hasMovingFrequencyMillis;
    }
    
    public boolean hasReason()
    {
      return this.hasReason;
    }
    
    public boolean hasStationaryFrequencyMillis()
    {
      return this.hasStationaryFrequencyMillis;
    }
    
    public LocationReportingConfiguration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setReason(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setAppSpecificKey(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setCancelBurstReporting(paramCodedInputStreamMicro.readBool());
          break;
        case 32: 
          setEndBurstReportingTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 40: 
          setMovingFrequencyMillis(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setStationaryFrequencyMillis(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public LocationReportingConfiguration setAppSpecificKey(String paramString)
    {
      this.hasAppSpecificKey = true;
      this.appSpecificKey_ = paramString;
      return this;
    }
    
    public LocationReportingConfiguration setCancelBurstReporting(boolean paramBoolean)
    {
      this.hasCancelBurstReporting = true;
      this.cancelBurstReporting_ = paramBoolean;
      return this;
    }
    
    public LocationReportingConfiguration setEndBurstReportingTimestampSeconds(long paramLong)
    {
      this.hasEndBurstReportingTimestampSeconds = true;
      this.endBurstReportingTimestampSeconds_ = paramLong;
      return this;
    }
    
    public LocationReportingConfiguration setMovingFrequencyMillis(int paramInt)
    {
      this.hasMovingFrequencyMillis = true;
      this.movingFrequencyMillis_ = paramInt;
      return this;
    }
    
    public LocationReportingConfiguration setReason(String paramString)
    {
      this.hasReason = true;
      this.reason_ = paramString;
      return this;
    }
    
    public LocationReportingConfiguration setStationaryFrequencyMillis(int paramInt)
    {
      this.hasStationaryFrequencyMillis = true;
      this.stationaryFrequencyMillis_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasReason()) {
        paramCodedOutputStreamMicro.writeString(1, getReason());
      }
      if (hasAppSpecificKey()) {
        paramCodedOutputStreamMicro.writeString(2, getAppSpecificKey());
      }
      if (hasCancelBurstReporting()) {
        paramCodedOutputStreamMicro.writeBool(3, getCancelBurstReporting());
      }
      if (hasEndBurstReportingTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(4, getEndBurstReportingTimestampSeconds());
      }
      if (hasMovingFrequencyMillis()) {
        paramCodedOutputStreamMicro.writeInt32(5, getMovingFrequencyMillis());
      }
      if (hasStationaryFrequencyMillis()) {
        paramCodedOutputStreamMicro.writeInt32(6, getStationaryFrequencyMillis());
      }
    }
  }
  
  public static final class MinimumDataVersion
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasStorageBackend;
    private boolean hasVersion;
    private int storageBackend_ = 1;
    private String version_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasStorageBackend();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getStorageBackend());
      }
      if (hasVersion()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getVersion());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getStorageBackend()
    {
      return this.storageBackend_;
    }
    
    public String getVersion()
    {
      return this.version_;
    }
    
    public boolean hasStorageBackend()
    {
      return this.hasStorageBackend;
    }
    
    public boolean hasVersion()
    {
      return this.hasVersion;
    }
    
    public MinimumDataVersion mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setStorageBackend(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setVersion(paramCodedInputStreamMicro.readString());
      }
    }
    
    public MinimumDataVersion setStorageBackend(int paramInt)
    {
      this.hasStorageBackend = true;
      this.storageBackend_ = paramInt;
      return this;
    }
    
    public MinimumDataVersion setVersion(String paramString)
    {
      this.hasVersion = true;
      this.version_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasStorageBackend()) {
        paramCodedOutputStreamMicro.writeInt32(1, getStorageBackend());
      }
      if (hasVersion()) {
        paramCodedOutputStreamMicro.writeString(2, getVersion());
      }
    }
  }
  
  public static final class MoonshineEventTicketEntry
    extends MessageMicro
  {
    private Sidekick.Photo barcode_ = null;
    private String bookingAgentLogoUrl_ = "";
    private String bookingAgent_ = "";
    private int cachedSize = -1;
    private String confirmationNumber_ = "";
    private long departureTimeMs_ = 0L;
    private long doorOpenTimeMs_ = 0L;
    private Sidekick.GmailReference gmailReference_ = null;
    private boolean hasBarcode;
    private boolean hasBookingAgent;
    private boolean hasBookingAgentLogoUrl;
    private boolean hasConfirmationNumber;
    private boolean hasDepartureTimeMs;
    private boolean hasDoorOpenTimeMs;
    private boolean hasGmailReference;
    private boolean hasManageReservationUrl;
    private boolean hasNumberOfTickets;
    private boolean hasRoute;
    private boolean hasStartTimeMs;
    private boolean hasSubTitle;
    private boolean hasTicketType;
    private boolean hasTitle;
    private boolean hasVenue;
    private String manageReservationUrl_ = "";
    private int numberOfTickets_ = 0;
    private List<Sidekick.EventPerformer> performers_ = Collections.emptyList();
    private Sidekick.CommuteSummary route_ = null;
    private List<Sidekick.EventTicketSeatInfo> seatInformation_ = Collections.emptyList();
    private long startTimeMs_ = 0L;
    private String subTitle_ = "";
    private String ticketType_ = "";
    private String title_ = "";
    private Sidekick.Location venue_ = null;
    
    public MoonshineEventTicketEntry addPerformers(Sidekick.EventPerformer paramEventPerformer)
    {
      if (paramEventPerformer == null) {
        throw new NullPointerException();
      }
      if (this.performers_.isEmpty()) {
        this.performers_ = new ArrayList();
      }
      this.performers_.add(paramEventPerformer);
      return this;
    }
    
    public MoonshineEventTicketEntry addSeatInformation(Sidekick.EventTicketSeatInfo paramEventTicketSeatInfo)
    {
      if (paramEventTicketSeatInfo == null) {
        throw new NullPointerException();
      }
      if (this.seatInformation_.isEmpty()) {
        this.seatInformation_ = new ArrayList();
      }
      this.seatInformation_.add(paramEventTicketSeatInfo);
      return this;
    }
    
    public Sidekick.Photo getBarcode()
    {
      return this.barcode_;
    }
    
    public String getBookingAgent()
    {
      return this.bookingAgent_;
    }
    
    public String getBookingAgentLogoUrl()
    {
      return this.bookingAgentLogoUrl_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getConfirmationNumber()
    {
      return this.confirmationNumber_;
    }
    
    public long getDepartureTimeMs()
    {
      return this.departureTimeMs_;
    }
    
    public long getDoorOpenTimeMs()
    {
      return this.doorOpenTimeMs_;
    }
    
    public Sidekick.GmailReference getGmailReference()
    {
      return this.gmailReference_;
    }
    
    public String getManageReservationUrl()
    {
      return this.manageReservationUrl_;
    }
    
    public int getNumberOfTickets()
    {
      return this.numberOfTickets_;
    }
    
    public Sidekick.EventPerformer getPerformers(int paramInt)
    {
      return (Sidekick.EventPerformer)this.performers_.get(paramInt);
    }
    
    public int getPerformersCount()
    {
      return this.performers_.size();
    }
    
    public List<Sidekick.EventPerformer> getPerformersList()
    {
      return this.performers_;
    }
    
    public Sidekick.CommuteSummary getRoute()
    {
      return this.route_;
    }
    
    public Sidekick.EventTicketSeatInfo getSeatInformation(int paramInt)
    {
      return (Sidekick.EventTicketSeatInfo)this.seatInformation_.get(paramInt);
    }
    
    public int getSeatInformationCount()
    {
      return this.seatInformation_.size();
    }
    
    public List<Sidekick.EventTicketSeatInfo> getSeatInformationList()
    {
      return this.seatInformation_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasSubTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSubTitle());
      }
      Iterator localIterator1 = getPerformersList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.EventPerformer)localIterator1.next());
      }
      if (hasVenue()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getVenue());
      }
      if (hasStartTimeMs()) {
        i += CodedOutputStreamMicro.computeInt64Size(5, getStartTimeMs());
      }
      if (hasDepartureTimeMs()) {
        i += CodedOutputStreamMicro.computeInt64Size(6, getDepartureTimeMs());
      }
      if (hasRoute()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, getRoute());
      }
      if (hasConfirmationNumber()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getConfirmationNumber());
      }
      if (hasNumberOfTickets()) {
        i += CodedOutputStreamMicro.computeInt32Size(9, getNumberOfTickets());
      }
      if (hasBarcode()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getBarcode());
      }
      if (hasGmailReference()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, getGmailReference());
      }
      if (hasManageReservationUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(12, getManageReservationUrl());
      }
      if (hasBookingAgent()) {
        i += CodedOutputStreamMicro.computeStringSize(14, getBookingAgent());
      }
      if (hasBookingAgentLogoUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(15, getBookingAgentLogoUrl());
      }
      Iterator localIterator2 = getSeatInformationList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(16, (Sidekick.EventTicketSeatInfo)localIterator2.next());
      }
      if (hasDoorOpenTimeMs()) {
        i += CodedOutputStreamMicro.computeInt64Size(17, getDoorOpenTimeMs());
      }
      if (hasTicketType()) {
        i += CodedOutputStreamMicro.computeStringSize(18, getTicketType());
      }
      this.cachedSize = i;
      return i;
    }
    
    public long getStartTimeMs()
    {
      return this.startTimeMs_;
    }
    
    public String getSubTitle()
    {
      return this.subTitle_;
    }
    
    public String getTicketType()
    {
      return this.ticketType_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public Sidekick.Location getVenue()
    {
      return this.venue_;
    }
    
    public boolean hasBarcode()
    {
      return this.hasBarcode;
    }
    
    public boolean hasBookingAgent()
    {
      return this.hasBookingAgent;
    }
    
    public boolean hasBookingAgentLogoUrl()
    {
      return this.hasBookingAgentLogoUrl;
    }
    
    public boolean hasConfirmationNumber()
    {
      return this.hasConfirmationNumber;
    }
    
    public boolean hasDepartureTimeMs()
    {
      return this.hasDepartureTimeMs;
    }
    
    public boolean hasDoorOpenTimeMs()
    {
      return this.hasDoorOpenTimeMs;
    }
    
    public boolean hasGmailReference()
    {
      return this.hasGmailReference;
    }
    
    public boolean hasManageReservationUrl()
    {
      return this.hasManageReservationUrl;
    }
    
    public boolean hasNumberOfTickets()
    {
      return this.hasNumberOfTickets;
    }
    
    public boolean hasRoute()
    {
      return this.hasRoute;
    }
    
    public boolean hasStartTimeMs()
    {
      return this.hasStartTimeMs;
    }
    
    public boolean hasSubTitle()
    {
      return this.hasSubTitle;
    }
    
    public boolean hasTicketType()
    {
      return this.hasTicketType;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasVenue()
    {
      return this.hasVenue;
    }
    
    public MoonshineEventTicketEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSubTitle(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.EventPerformer localEventPerformer = new Sidekick.EventPerformer();
          paramCodedInputStreamMicro.readMessage(localEventPerformer);
          addPerformers(localEventPerformer);
          break;
        case 34: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setVenue(localLocation);
          break;
        case 40: 
          setStartTimeMs(paramCodedInputStreamMicro.readInt64());
          break;
        case 48: 
          setDepartureTimeMs(paramCodedInputStreamMicro.readInt64());
          break;
        case 58: 
          Sidekick.CommuteSummary localCommuteSummary = new Sidekick.CommuteSummary();
          paramCodedInputStreamMicro.readMessage(localCommuteSummary);
          setRoute(localCommuteSummary);
          break;
        case 66: 
          setConfirmationNumber(paramCodedInputStreamMicro.readString());
          break;
        case 72: 
          setNumberOfTickets(paramCodedInputStreamMicro.readInt32());
          break;
        case 82: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setBarcode(localPhoto);
          break;
        case 90: 
          Sidekick.GmailReference localGmailReference = new Sidekick.GmailReference();
          paramCodedInputStreamMicro.readMessage(localGmailReference);
          setGmailReference(localGmailReference);
          break;
        case 98: 
          setManageReservationUrl(paramCodedInputStreamMicro.readString());
          break;
        case 114: 
          setBookingAgent(paramCodedInputStreamMicro.readString());
          break;
        case 122: 
          setBookingAgentLogoUrl(paramCodedInputStreamMicro.readString());
          break;
        case 130: 
          Sidekick.EventTicketSeatInfo localEventTicketSeatInfo = new Sidekick.EventTicketSeatInfo();
          paramCodedInputStreamMicro.readMessage(localEventTicketSeatInfo);
          addSeatInformation(localEventTicketSeatInfo);
          break;
        case 136: 
          setDoorOpenTimeMs(paramCodedInputStreamMicro.readInt64());
          break;
        }
        setTicketType(paramCodedInputStreamMicro.readString());
      }
    }
    
    public MoonshineEventTicketEntry setBarcode(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasBarcode = true;
      this.barcode_ = paramPhoto;
      return this;
    }
    
    public MoonshineEventTicketEntry setBookingAgent(String paramString)
    {
      this.hasBookingAgent = true;
      this.bookingAgent_ = paramString;
      return this;
    }
    
    public MoonshineEventTicketEntry setBookingAgentLogoUrl(String paramString)
    {
      this.hasBookingAgentLogoUrl = true;
      this.bookingAgentLogoUrl_ = paramString;
      return this;
    }
    
    public MoonshineEventTicketEntry setConfirmationNumber(String paramString)
    {
      this.hasConfirmationNumber = true;
      this.confirmationNumber_ = paramString;
      return this;
    }
    
    public MoonshineEventTicketEntry setDepartureTimeMs(long paramLong)
    {
      this.hasDepartureTimeMs = true;
      this.departureTimeMs_ = paramLong;
      return this;
    }
    
    public MoonshineEventTicketEntry setDoorOpenTimeMs(long paramLong)
    {
      this.hasDoorOpenTimeMs = true;
      this.doorOpenTimeMs_ = paramLong;
      return this;
    }
    
    public MoonshineEventTicketEntry setGmailReference(Sidekick.GmailReference paramGmailReference)
    {
      if (paramGmailReference == null) {
        throw new NullPointerException();
      }
      this.hasGmailReference = true;
      this.gmailReference_ = paramGmailReference;
      return this;
    }
    
    public MoonshineEventTicketEntry setManageReservationUrl(String paramString)
    {
      this.hasManageReservationUrl = true;
      this.manageReservationUrl_ = paramString;
      return this;
    }
    
    public MoonshineEventTicketEntry setNumberOfTickets(int paramInt)
    {
      this.hasNumberOfTickets = true;
      this.numberOfTickets_ = paramInt;
      return this;
    }
    
    public MoonshineEventTicketEntry setRoute(Sidekick.CommuteSummary paramCommuteSummary)
    {
      if (paramCommuteSummary == null) {
        throw new NullPointerException();
      }
      this.hasRoute = true;
      this.route_ = paramCommuteSummary;
      return this;
    }
    
    public MoonshineEventTicketEntry setStartTimeMs(long paramLong)
    {
      this.hasStartTimeMs = true;
      this.startTimeMs_ = paramLong;
      return this;
    }
    
    public MoonshineEventTicketEntry setSubTitle(String paramString)
    {
      this.hasSubTitle = true;
      this.subTitle_ = paramString;
      return this;
    }
    
    public MoonshineEventTicketEntry setTicketType(String paramString)
    {
      this.hasTicketType = true;
      this.ticketType_ = paramString;
      return this;
    }
    
    public MoonshineEventTicketEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public MoonshineEventTicketEntry setVenue(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasVenue = true;
      this.venue_ = paramLocation;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasSubTitle()) {
        paramCodedOutputStreamMicro.writeString(2, getSubTitle());
      }
      Iterator localIterator1 = getPerformersList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.EventPerformer)localIterator1.next());
      }
      if (hasVenue()) {
        paramCodedOutputStreamMicro.writeMessage(4, getVenue());
      }
      if (hasStartTimeMs()) {
        paramCodedOutputStreamMicro.writeInt64(5, getStartTimeMs());
      }
      if (hasDepartureTimeMs()) {
        paramCodedOutputStreamMicro.writeInt64(6, getDepartureTimeMs());
      }
      if (hasRoute()) {
        paramCodedOutputStreamMicro.writeMessage(7, getRoute());
      }
      if (hasConfirmationNumber()) {
        paramCodedOutputStreamMicro.writeString(8, getConfirmationNumber());
      }
      if (hasNumberOfTickets()) {
        paramCodedOutputStreamMicro.writeInt32(9, getNumberOfTickets());
      }
      if (hasBarcode()) {
        paramCodedOutputStreamMicro.writeMessage(10, getBarcode());
      }
      if (hasGmailReference()) {
        paramCodedOutputStreamMicro.writeMessage(11, getGmailReference());
      }
      if (hasManageReservationUrl()) {
        paramCodedOutputStreamMicro.writeString(12, getManageReservationUrl());
      }
      if (hasBookingAgent()) {
        paramCodedOutputStreamMicro.writeString(14, getBookingAgent());
      }
      if (hasBookingAgentLogoUrl()) {
        paramCodedOutputStreamMicro.writeString(15, getBookingAgentLogoUrl());
      }
      Iterator localIterator2 = getSeatInformationList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(16, (Sidekick.EventTicketSeatInfo)localIterator2.next());
      }
      if (hasDoorOpenTimeMs()) {
        paramCodedOutputStreamMicro.writeInt64(17, getDoorOpenTimeMs());
      }
      if (hasTicketType()) {
        paramCodedOutputStreamMicro.writeString(18, getTicketType());
      }
    }
  }
  
  public static final class Movie
    extends MessageMicro
  {
    private List<String> actor_ = Collections.emptyList();
    private int cachedSize = -1;
    private boolean hasImage;
    private boolean hasImageUrl;
    private boolean hasLength;
    private boolean hasMpaaRating;
    private boolean hasOnCardJustification;
    private boolean hasOpeningDateSecs;
    private boolean hasTitle;
    private boolean hasTrailerUrl;
    private boolean hasWebUrl;
    private String imageUrl_ = "";
    private Sidekick.Photo image_ = null;
    private String length_ = "";
    private String mpaaRating_ = "";
    private String onCardJustification_ = "";
    private long openingDateSecs_ = 0L;
    private List<Sidekick.Rating> rating_ = Collections.emptyList();
    private List<String> showtime_ = Collections.emptyList();
    private String title_ = "";
    private String trailerUrl_ = "";
    private String webUrl_ = "";
    
    public Movie addActor(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.actor_.isEmpty()) {
        this.actor_ = new ArrayList();
      }
      this.actor_.add(paramString);
      return this;
    }
    
    public Movie addRating(Sidekick.Rating paramRating)
    {
      if (paramRating == null) {
        throw new NullPointerException();
      }
      if (this.rating_.isEmpty()) {
        this.rating_ = new ArrayList();
      }
      this.rating_.add(paramRating);
      return this;
    }
    
    public Movie addShowtime(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.showtime_.isEmpty()) {
        this.showtime_ = new ArrayList();
      }
      this.showtime_.add(paramString);
      return this;
    }
    
    public int getActorCount()
    {
      return this.actor_.size();
    }
    
    public List<String> getActorList()
    {
      return this.actor_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public String getImageUrl()
    {
      return this.imageUrl_;
    }
    
    public String getLength()
    {
      return this.length_;
    }
    
    public String getMpaaRating()
    {
      return this.mpaaRating_;
    }
    
    public String getOnCardJustification()
    {
      return this.onCardJustification_;
    }
    
    public long getOpeningDateSecs()
    {
      return this.openingDateSecs_;
    }
    
    public Sidekick.Rating getRating(int paramInt)
    {
      return (Sidekick.Rating)this.rating_.get(paramInt);
    }
    
    public int getRatingCount()
    {
      return this.rating_.size();
    }
    
    public List<Sidekick.Rating> getRatingList()
    {
      return this.rating_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      int j = 0;
      Iterator localIterator1 = getActorList().iterator();
      while (localIterator1.hasNext()) {
        j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator1.next());
      }
      int k = i + j + 1 * getActorList().size();
      if (hasMpaaRating()) {
        k += CodedOutputStreamMicro.computeStringSize(3, getMpaaRating());
      }
      if (hasLength()) {
        k += CodedOutputStreamMicro.computeStringSize(4, getLength());
      }
      int m = 0;
      Iterator localIterator2 = getShowtimeList().iterator();
      while (localIterator2.hasNext()) {
        m += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator2.next());
      }
      int n = k + m + 1 * getShowtimeList().size();
      if (hasImageUrl()) {
        n += CodedOutputStreamMicro.computeStringSize(6, getImageUrl());
      }
      if (hasTrailerUrl()) {
        n += CodedOutputStreamMicro.computeStringSize(7, getTrailerUrl());
      }
      if (hasWebUrl()) {
        n += CodedOutputStreamMicro.computeStringSize(8, getWebUrl());
      }
      if (hasImage()) {
        n += CodedOutputStreamMicro.computeMessageSize(9, getImage());
      }
      if (hasOpeningDateSecs()) {
        n += CodedOutputStreamMicro.computeInt64Size(10, getOpeningDateSecs());
      }
      Iterator localIterator3 = getRatingList().iterator();
      while (localIterator3.hasNext()) {
        n += CodedOutputStreamMicro.computeMessageSize(11, (Sidekick.Rating)localIterator3.next());
      }
      if (hasOnCardJustification()) {
        n += CodedOutputStreamMicro.computeStringSize(12, getOnCardJustification());
      }
      this.cachedSize = n;
      return n;
    }
    
    public String getShowtime(int paramInt)
    {
      return (String)this.showtime_.get(paramInt);
    }
    
    public int getShowtimeCount()
    {
      return this.showtime_.size();
    }
    
    public List<String> getShowtimeList()
    {
      return this.showtime_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public String getTrailerUrl()
    {
      return this.trailerUrl_;
    }
    
    public String getWebUrl()
    {
      return this.webUrl_;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasImageUrl()
    {
      return this.hasImageUrl;
    }
    
    public boolean hasLength()
    {
      return this.hasLength;
    }
    
    public boolean hasMpaaRating()
    {
      return this.hasMpaaRating;
    }
    
    public boolean hasOnCardJustification()
    {
      return this.hasOnCardJustification;
    }
    
    public boolean hasOpeningDateSecs()
    {
      return this.hasOpeningDateSecs;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasTrailerUrl()
    {
      return this.hasTrailerUrl;
    }
    
    public boolean hasWebUrl()
    {
      return this.hasWebUrl;
    }
    
    public Movie mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          addActor(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setMpaaRating(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setLength(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          addShowtime(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setImageUrl(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          setTrailerUrl(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          setWebUrl(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 80: 
          setOpeningDateSecs(paramCodedInputStreamMicro.readInt64());
          break;
        case 90: 
          Sidekick.Rating localRating = new Sidekick.Rating();
          paramCodedInputStreamMicro.readMessage(localRating);
          addRating(localRating);
          break;
        }
        setOnCardJustification(paramCodedInputStreamMicro.readString());
      }
    }
    
    public Movie setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public Movie setImageUrl(String paramString)
    {
      this.hasImageUrl = true;
      this.imageUrl_ = paramString;
      return this;
    }
    
    public Movie setLength(String paramString)
    {
      this.hasLength = true;
      this.length_ = paramString;
      return this;
    }
    
    public Movie setMpaaRating(String paramString)
    {
      this.hasMpaaRating = true;
      this.mpaaRating_ = paramString;
      return this;
    }
    
    public Movie setOnCardJustification(String paramString)
    {
      this.hasOnCardJustification = true;
      this.onCardJustification_ = paramString;
      return this;
    }
    
    public Movie setOpeningDateSecs(long paramLong)
    {
      this.hasOpeningDateSecs = true;
      this.openingDateSecs_ = paramLong;
      return this;
    }
    
    public Movie setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public Movie setTrailerUrl(String paramString)
    {
      this.hasTrailerUrl = true;
      this.trailerUrl_ = paramString;
      return this;
    }
    
    public Movie setWebUrl(String paramString)
    {
      this.hasWebUrl = true;
      this.webUrl_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      Iterator localIterator1 = getActorList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeString(2, (String)localIterator1.next());
      }
      if (hasMpaaRating()) {
        paramCodedOutputStreamMicro.writeString(3, getMpaaRating());
      }
      if (hasLength()) {
        paramCodedOutputStreamMicro.writeString(4, getLength());
      }
      Iterator localIterator2 = getShowtimeList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeString(5, (String)localIterator2.next());
      }
      if (hasImageUrl()) {
        paramCodedOutputStreamMicro.writeString(6, getImageUrl());
      }
      if (hasTrailerUrl()) {
        paramCodedOutputStreamMicro.writeString(7, getTrailerUrl());
      }
      if (hasWebUrl()) {
        paramCodedOutputStreamMicro.writeString(8, getWebUrl());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(9, getImage());
      }
      if (hasOpeningDateSecs()) {
        paramCodedOutputStreamMicro.writeInt64(10, getOpeningDateSecs());
      }
      Iterator localIterator3 = getRatingList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(11, (Sidekick.Rating)localIterator3.next());
      }
      if (hasOnCardJustification()) {
        paramCodedOutputStreamMicro.writeString(12, getOnCardJustification());
      }
    }
  }
  
  public static final class MovieEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasMovieEntry;
    private boolean hasReasonEntityName;
    private Sidekick.Movie movieEntry_ = null;
    private String reasonEntityName_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Movie getMovieEntry()
    {
      return this.movieEntry_;
    }
    
    public String getReasonEntityName()
    {
      return this.reasonEntityName_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasMovieEntry();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getMovieEntry());
      }
      if (hasReasonEntityName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getReasonEntityName());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasMovieEntry()
    {
      return this.hasMovieEntry;
    }
    
    public boolean hasReasonEntityName()
    {
      return this.hasReasonEntityName;
    }
    
    public MovieEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Movie localMovie = new Sidekick.Movie();
          paramCodedInputStreamMicro.readMessage(localMovie);
          setMovieEntry(localMovie);
          break;
        }
        setReasonEntityName(paramCodedInputStreamMicro.readString());
      }
    }
    
    public MovieEntry setMovieEntry(Sidekick.Movie paramMovie)
    {
      if (paramMovie == null) {
        throw new NullPointerException();
      }
      this.hasMovieEntry = true;
      this.movieEntry_ = paramMovie;
      return this;
    }
    
    public MovieEntry setReasonEntityName(String paramString)
    {
      this.hasReasonEntityName = true;
      this.reasonEntityName_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasMovieEntry()) {
        paramCodedOutputStreamMicro.writeMessage(1, getMovieEntry());
      }
      if (hasReasonEntityName()) {
        paramCodedOutputStreamMicro.writeString(2, getReasonEntityName());
      }
    }
  }
  
  public static final class MovieListEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasMoreUrl;
    private boolean hasTheaterId;
    private boolean hasTheaterLocation;
    private boolean hasTheaterName;
    private String moreUrl_ = "";
    private List<Sidekick.Movie> movieEntry_ = Collections.emptyList();
    private long theaterId_ = 0L;
    private Sidekick.Location theaterLocation_ = null;
    private String theaterName_ = "";
    
    public MovieListEntry addMovieEntry(Sidekick.Movie paramMovie)
    {
      if (paramMovie == null) {
        throw new NullPointerException();
      }
      if (this.movieEntry_.isEmpty()) {
        this.movieEntry_ = new ArrayList();
      }
      this.movieEntry_.add(paramMovie);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getMoreUrl()
    {
      return this.moreUrl_;
    }
    
    public List<Sidekick.Movie> getMovieEntryList()
    {
      return this.movieEntry_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getMovieEntryList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.Movie)localIterator.next());
      }
      if (hasMoreUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getMoreUrl());
      }
      if (hasTheaterName()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getTheaterName());
      }
      if (hasTheaterId()) {
        i += CodedOutputStreamMicro.computeUInt64Size(4, getTheaterId());
      }
      if (hasTheaterLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getTheaterLocation());
      }
      this.cachedSize = i;
      return i;
    }
    
    public long getTheaterId()
    {
      return this.theaterId_;
    }
    
    public Sidekick.Location getTheaterLocation()
    {
      return this.theaterLocation_;
    }
    
    public String getTheaterName()
    {
      return this.theaterName_;
    }
    
    public boolean hasMoreUrl()
    {
      return this.hasMoreUrl;
    }
    
    public boolean hasTheaterId()
    {
      return this.hasTheaterId;
    }
    
    public boolean hasTheaterLocation()
    {
      return this.hasTheaterLocation;
    }
    
    public boolean hasTheaterName()
    {
      return this.hasTheaterName;
    }
    
    public MovieListEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Movie localMovie = new Sidekick.Movie();
          paramCodedInputStreamMicro.readMessage(localMovie);
          addMovieEntry(localMovie);
          break;
        case 18: 
          setMoreUrl(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setTheaterName(paramCodedInputStreamMicro.readString());
          break;
        case 32: 
          setTheaterId(paramCodedInputStreamMicro.readUInt64());
          break;
        }
        Sidekick.Location localLocation = new Sidekick.Location();
        paramCodedInputStreamMicro.readMessage(localLocation);
        setTheaterLocation(localLocation);
      }
    }
    
    public MovieListEntry setMoreUrl(String paramString)
    {
      this.hasMoreUrl = true;
      this.moreUrl_ = paramString;
      return this;
    }
    
    public MovieListEntry setTheaterId(long paramLong)
    {
      this.hasTheaterId = true;
      this.theaterId_ = paramLong;
      return this;
    }
    
    public MovieListEntry setTheaterLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasTheaterLocation = true;
      this.theaterLocation_ = paramLocation;
      return this;
    }
    
    public MovieListEntry setTheaterName(String paramString)
    {
      this.hasTheaterName = true;
      this.theaterName_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getMovieEntryList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.Movie)localIterator.next());
      }
      if (hasMoreUrl()) {
        paramCodedOutputStreamMicro.writeString(2, getMoreUrl());
      }
      if (hasTheaterName()) {
        paramCodedOutputStreamMicro.writeString(3, getTheaterName());
      }
      if (hasTheaterId()) {
        paramCodedOutputStreamMicro.writeUInt64(4, getTheaterId());
      }
      if (hasTheaterLocation()) {
        paramCodedOutputStreamMicro.writeMessage(5, getTheaterLocation());
      }
    }
  }
  
  public static final class MovieTicketEntry
    extends MessageMicro
  {
    private Sidekick.Photo barcode_ = null;
    private int cachedSize = -1;
    private String confirmationNumber_ = "";
    private long departureTimeMs_ = 0L;
    private Sidekick.GmailReference gmailReference_ = null;
    private boolean hasBarcode;
    private boolean hasConfirmationNumber;
    private boolean hasDepartureTimeMs;
    private boolean hasGmailReference;
    private boolean hasHolderName;
    private boolean hasMovie;
    private boolean hasNumberOfTickets;
    private boolean hasRoute;
    private boolean hasShowtimeSeconds;
    private boolean hasTheater;
    private String holderName_ = "";
    private Sidekick.Movie movie_ = null;
    private int numberOfTickets_ = 0;
    private Sidekick.CommuteSummary route_ = null;
    private long showtimeSeconds_ = 0L;
    private Sidekick.Location theater_ = null;
    
    public Sidekick.Photo getBarcode()
    {
      return this.barcode_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getConfirmationNumber()
    {
      return this.confirmationNumber_;
    }
    
    public long getDepartureTimeMs()
    {
      return this.departureTimeMs_;
    }
    
    public Sidekick.GmailReference getGmailReference()
    {
      return this.gmailReference_;
    }
    
    public String getHolderName()
    {
      return this.holderName_;
    }
    
    public Sidekick.Movie getMovie()
    {
      return this.movie_;
    }
    
    public int getNumberOfTickets()
    {
      return this.numberOfTickets_;
    }
    
    public Sidekick.CommuteSummary getRoute()
    {
      return this.route_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasMovie();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getMovie());
      }
      if (hasTheater()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getTheater());
      }
      if (hasShowtimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(3, getShowtimeSeconds());
      }
      if (hasRoute()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getRoute());
      }
      if (hasGmailReference()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getGmailReference());
      }
      if (hasNumberOfTickets()) {
        i += CodedOutputStreamMicro.computeInt32Size(6, getNumberOfTickets());
      }
      if (hasConfirmationNumber()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getConfirmationNumber());
      }
      if (hasBarcode()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, getBarcode());
      }
      if (hasHolderName()) {
        i += CodedOutputStreamMicro.computeStringSize(9, getHolderName());
      }
      if (hasDepartureTimeMs()) {
        i += CodedOutputStreamMicro.computeInt64Size(10, getDepartureTimeMs());
      }
      this.cachedSize = i;
      return i;
    }
    
    public long getShowtimeSeconds()
    {
      return this.showtimeSeconds_;
    }
    
    public Sidekick.Location getTheater()
    {
      return this.theater_;
    }
    
    public boolean hasBarcode()
    {
      return this.hasBarcode;
    }
    
    public boolean hasConfirmationNumber()
    {
      return this.hasConfirmationNumber;
    }
    
    public boolean hasDepartureTimeMs()
    {
      return this.hasDepartureTimeMs;
    }
    
    public boolean hasGmailReference()
    {
      return this.hasGmailReference;
    }
    
    public boolean hasHolderName()
    {
      return this.hasHolderName;
    }
    
    public boolean hasMovie()
    {
      return this.hasMovie;
    }
    
    public boolean hasNumberOfTickets()
    {
      return this.hasNumberOfTickets;
    }
    
    public boolean hasRoute()
    {
      return this.hasRoute;
    }
    
    public boolean hasShowtimeSeconds()
    {
      return this.hasShowtimeSeconds;
    }
    
    public boolean hasTheater()
    {
      return this.hasTheater;
    }
    
    public MovieTicketEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Movie localMovie = new Sidekick.Movie();
          paramCodedInputStreamMicro.readMessage(localMovie);
          setMovie(localMovie);
          break;
        case 18: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setTheater(localLocation);
          break;
        case 24: 
          setShowtimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 34: 
          Sidekick.CommuteSummary localCommuteSummary = new Sidekick.CommuteSummary();
          paramCodedInputStreamMicro.readMessage(localCommuteSummary);
          setRoute(localCommuteSummary);
          break;
        case 42: 
          Sidekick.GmailReference localGmailReference = new Sidekick.GmailReference();
          paramCodedInputStreamMicro.readMessage(localGmailReference);
          setGmailReference(localGmailReference);
          break;
        case 48: 
          setNumberOfTickets(paramCodedInputStreamMicro.readInt32());
          break;
        case 58: 
          setConfirmationNumber(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setBarcode(localPhoto);
          break;
        case 74: 
          setHolderName(paramCodedInputStreamMicro.readString());
          break;
        }
        setDepartureTimeMs(paramCodedInputStreamMicro.readInt64());
      }
    }
    
    public MovieTicketEntry setBarcode(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasBarcode = true;
      this.barcode_ = paramPhoto;
      return this;
    }
    
    public MovieTicketEntry setConfirmationNumber(String paramString)
    {
      this.hasConfirmationNumber = true;
      this.confirmationNumber_ = paramString;
      return this;
    }
    
    public MovieTicketEntry setDepartureTimeMs(long paramLong)
    {
      this.hasDepartureTimeMs = true;
      this.departureTimeMs_ = paramLong;
      return this;
    }
    
    public MovieTicketEntry setGmailReference(Sidekick.GmailReference paramGmailReference)
    {
      if (paramGmailReference == null) {
        throw new NullPointerException();
      }
      this.hasGmailReference = true;
      this.gmailReference_ = paramGmailReference;
      return this;
    }
    
    public MovieTicketEntry setHolderName(String paramString)
    {
      this.hasHolderName = true;
      this.holderName_ = paramString;
      return this;
    }
    
    public MovieTicketEntry setMovie(Sidekick.Movie paramMovie)
    {
      if (paramMovie == null) {
        throw new NullPointerException();
      }
      this.hasMovie = true;
      this.movie_ = paramMovie;
      return this;
    }
    
    public MovieTicketEntry setNumberOfTickets(int paramInt)
    {
      this.hasNumberOfTickets = true;
      this.numberOfTickets_ = paramInt;
      return this;
    }
    
    public MovieTicketEntry setRoute(Sidekick.CommuteSummary paramCommuteSummary)
    {
      if (paramCommuteSummary == null) {
        throw new NullPointerException();
      }
      this.hasRoute = true;
      this.route_ = paramCommuteSummary;
      return this;
    }
    
    public MovieTicketEntry setShowtimeSeconds(long paramLong)
    {
      this.hasShowtimeSeconds = true;
      this.showtimeSeconds_ = paramLong;
      return this;
    }
    
    public MovieTicketEntry setTheater(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasTheater = true;
      this.theater_ = paramLocation;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasMovie()) {
        paramCodedOutputStreamMicro.writeMessage(1, getMovie());
      }
      if (hasTheater()) {
        paramCodedOutputStreamMicro.writeMessage(2, getTheater());
      }
      if (hasShowtimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(3, getShowtimeSeconds());
      }
      if (hasRoute()) {
        paramCodedOutputStreamMicro.writeMessage(4, getRoute());
      }
      if (hasGmailReference()) {
        paramCodedOutputStreamMicro.writeMessage(5, getGmailReference());
      }
      if (hasNumberOfTickets()) {
        paramCodedOutputStreamMicro.writeInt32(6, getNumberOfTickets());
      }
      if (hasConfirmationNumber()) {
        paramCodedOutputStreamMicro.writeString(7, getConfirmationNumber());
      }
      if (hasBarcode()) {
        paramCodedOutputStreamMicro.writeMessage(8, getBarcode());
      }
      if (hasHolderName()) {
        paramCodedOutputStreamMicro.writeString(9, getHolderName());
      }
      if (hasDepartureTimeMs()) {
        paramCodedOutputStreamMicro.writeInt64(10, getDepartureTimeMs());
      }
    }
  }
  
  public static final class NearbyPlacesListEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasSearchForMore;
    private boolean hasTitle;
    private Sidekick.ClickAction searchForMore_ = null;
    private String title_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ClickAction getSearchForMore()
    {
      return this.searchForMore_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasSearchForMore()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getSearchForMore());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasSearchForMore()
    {
      return this.hasSearchForMore;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public NearbyPlacesListEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
        paramCodedInputStreamMicro.readMessage(localClickAction);
        setSearchForMore(localClickAction);
      }
    }
    
    public NearbyPlacesListEntry setSearchForMore(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasSearchForMore = true;
      this.searchForMore_ = paramClickAction;
      return this;
    }
    
    public NearbyPlacesListEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasSearchForMore()) {
        paramCodedOutputStreamMicro.writeMessage(2, getSearchForMore());
      }
    }
  }
  
  public static final class NetworkDeviceInfoQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.DeviceModel deviceModel_ = null;
    private boolean hasDeviceModel;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.DeviceModel getDeviceModel()
    {
      return this.deviceModel_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasDeviceModel();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getDeviceModel());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasDeviceModel()
    {
      return this.hasDeviceModel;
    }
    
    public NetworkDeviceInfoQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.DeviceModel localDeviceModel = new Sidekick.DeviceModel();
        paramCodedInputStreamMicro.readMessage(localDeviceModel);
        setDeviceModel(localDeviceModel);
      }
    }
    
    public NetworkDeviceInfoQuery setDeviceModel(Sidekick.DeviceModel paramDeviceModel)
    {
      if (paramDeviceModel == null) {
        throw new NullPointerException();
      }
      this.hasDeviceModel = true;
      this.deviceModel_ = paramDeviceModel;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasDeviceModel()) {
        paramCodedOutputStreamMicro.writeMessage(1, getDeviceModel());
      }
    }
  }
  
  public static final class NetworkDeviceInfoResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.DetectedDevice detectedDevice_ = null;
    private boolean hasDetectedDevice;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.DetectedDevice getDetectedDevice()
    {
      return this.detectedDevice_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasDetectedDevice();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getDetectedDevice());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasDetectedDevice()
    {
      return this.hasDetectedDevice;
    }
    
    public NetworkDeviceInfoResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.DetectedDevice localDetectedDevice = new Sidekick.DetectedDevice();
        paramCodedInputStreamMicro.readMessage(localDetectedDevice);
        setDetectedDevice(localDetectedDevice);
      }
    }
    
    public NetworkDeviceInfoResponse setDetectedDevice(Sidekick.DetectedDevice paramDetectedDevice)
    {
      if (paramDetectedDevice == null) {
        throw new NullPointerException();
      }
      this.hasDetectedDevice = true;
      this.detectedDevice_ = paramDetectedDevice;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasDetectedDevice()) {
        paramCodedOutputStreamMicro.writeMessage(1, getDetectedDevice());
      }
    }
  }
  
  public static final class NewsEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasImage;
    private boolean hasMainTriggeringQuery;
    private boolean hasSnippet;
    private boolean hasSource;
    private boolean hasStoryLocation;
    private boolean hasTimestampSeconds;
    private boolean hasTitle;
    private boolean hasUrl;
    private Sidekick.Photo image_ = null;
    private String mainTriggeringQuery_ = "";
    private String snippet_ = "";
    private String source_ = "";
    private Sidekick.Location storyLocation_ = null;
    private long timestampSeconds_ = 0L;
    private String title_ = "";
    private String url_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public String getMainTriggeringQuery()
    {
      return this.mainTriggeringQuery_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasSnippet()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSnippet());
      }
      if (hasTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(3, getTimestampSeconds());
      }
      if (hasSource()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getSource());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, getImage());
      }
      if (hasUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getUrl());
      }
      if (hasMainTriggeringQuery()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getMainTriggeringQuery());
      }
      if (hasStoryLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getStoryLocation());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSnippet()
    {
      return this.snippet_;
    }
    
    public String getSource()
    {
      return this.source_;
    }
    
    public Sidekick.Location getStoryLocation()
    {
      return this.storyLocation_;
    }
    
    public long getTimestampSeconds()
    {
      return this.timestampSeconds_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public String getUrl()
    {
      return this.url_;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasMainTriggeringQuery()
    {
      return this.hasMainTriggeringQuery;
    }
    
    public boolean hasSnippet()
    {
      return this.hasSnippet;
    }
    
    public boolean hasSource()
    {
      return this.hasSource;
    }
    
    public boolean hasStoryLocation()
    {
      return this.hasStoryLocation;
    }
    
    public boolean hasTimestampSeconds()
    {
      return this.hasTimestampSeconds;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasUrl()
    {
      return this.hasUrl;
    }
    
    public NewsEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSnippet(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 34: 
          setSource(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 58: 
          setUrl(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          setMainTriggeringQuery(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.Location localLocation = new Sidekick.Location();
        paramCodedInputStreamMicro.readMessage(localLocation);
        setStoryLocation(localLocation);
      }
    }
    
    public NewsEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public NewsEntry setMainTriggeringQuery(String paramString)
    {
      this.hasMainTriggeringQuery = true;
      this.mainTriggeringQuery_ = paramString;
      return this;
    }
    
    public NewsEntry setSnippet(String paramString)
    {
      this.hasSnippet = true;
      this.snippet_ = paramString;
      return this;
    }
    
    public NewsEntry setSource(String paramString)
    {
      this.hasSource = true;
      this.source_ = paramString;
      return this;
    }
    
    public NewsEntry setStoryLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasStoryLocation = true;
      this.storyLocation_ = paramLocation;
      return this;
    }
    
    public NewsEntry setTimestampSeconds(long paramLong)
    {
      this.hasTimestampSeconds = true;
      this.timestampSeconds_ = paramLong;
      return this;
    }
    
    public NewsEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public NewsEntry setUrl(String paramString)
    {
      this.hasUrl = true;
      this.url_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasSnippet()) {
        paramCodedOutputStreamMicro.writeString(2, getSnippet());
      }
      if (hasTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(3, getTimestampSeconds());
      }
      if (hasSource()) {
        paramCodedOutputStreamMicro.writeString(4, getSource());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(6, getImage());
      }
      if (hasUrl()) {
        paramCodedOutputStreamMicro.writeString(7, getUrl());
      }
      if (hasMainTriggeringQuery()) {
        paramCodedOutputStreamMicro.writeString(8, getMainTriggeringQuery());
      }
      if (hasStoryLocation()) {
        paramCodedOutputStreamMicro.writeMessage(9, getStoryLocation());
      }
    }
  }
  
  public static final class Notification
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean doNotSuppress_ = true;
    private long expirationTimestampSeconds_ = 0L;
    private boolean hasDoNotSuppress;
    private boolean hasExpirationTimestampSeconds;
    private boolean hasLastDeliveredTimestampSeconds;
    private boolean hasNotificationBarText;
    private boolean hasTriggerCondition;
    private boolean hasType;
    private long lastDeliveredTimestampSeconds_ = 0L;
    private String notificationBarText_ = "";
    private Sidekick.TriggerCondition triggerCondition_ = null;
    private int type_ = 1;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getDoNotSuppress()
    {
      return this.doNotSuppress_;
    }
    
    public long getExpirationTimestampSeconds()
    {
      return this.expirationTimestampSeconds_;
    }
    
    public long getLastDeliveredTimestampSeconds()
    {
      return this.lastDeliveredTimestampSeconds_;
    }
    
    public String getNotificationBarText()
    {
      return this.notificationBarText_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getType());
      }
      if (hasNotificationBarText()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getNotificationBarText());
      }
      if (hasLastDeliveredTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(3, getLastDeliveredTimestampSeconds());
      }
      if (hasTriggerCondition()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getTriggerCondition());
      }
      if (hasExpirationTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(5, getExpirationTimestampSeconds());
      }
      if (hasDoNotSuppress()) {
        i += CodedOutputStreamMicro.computeBoolSize(6, getDoNotSuppress());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.TriggerCondition getTriggerCondition()
    {
      return this.triggerCondition_;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public boolean hasDoNotSuppress()
    {
      return this.hasDoNotSuppress;
    }
    
    public boolean hasExpirationTimestampSeconds()
    {
      return this.hasExpirationTimestampSeconds;
    }
    
    public boolean hasLastDeliveredTimestampSeconds()
    {
      return this.hasLastDeliveredTimestampSeconds;
    }
    
    public boolean hasNotificationBarText()
    {
      return this.hasNotificationBarText;
    }
    
    public boolean hasTriggerCondition()
    {
      return this.hasTriggerCondition;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public Notification mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        case 18: 
          setNotificationBarText(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setLastDeliveredTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 34: 
          Sidekick.TriggerCondition localTriggerCondition = new Sidekick.TriggerCondition();
          paramCodedInputStreamMicro.readMessage(localTriggerCondition);
          setTriggerCondition(localTriggerCondition);
          break;
        case 40: 
          setExpirationTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        }
        setDoNotSuppress(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public Notification setDoNotSuppress(boolean paramBoolean)
    {
      this.hasDoNotSuppress = true;
      this.doNotSuppress_ = paramBoolean;
      return this;
    }
    
    public Notification setExpirationTimestampSeconds(long paramLong)
    {
      this.hasExpirationTimestampSeconds = true;
      this.expirationTimestampSeconds_ = paramLong;
      return this;
    }
    
    public Notification setLastDeliveredTimestampSeconds(long paramLong)
    {
      this.hasLastDeliveredTimestampSeconds = true;
      this.lastDeliveredTimestampSeconds_ = paramLong;
      return this;
    }
    
    public Notification setNotificationBarText(String paramString)
    {
      this.hasNotificationBarText = true;
      this.notificationBarText_ = paramString;
      return this;
    }
    
    public Notification setTriggerCondition(Sidekick.TriggerCondition paramTriggerCondition)
    {
      if (paramTriggerCondition == null) {
        throw new NullPointerException();
      }
      this.hasTriggerCondition = true;
      this.triggerCondition_ = paramTriggerCondition;
      return this;
    }
    
    public Notification setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(1, getType());
      }
      if (hasNotificationBarText()) {
        paramCodedOutputStreamMicro.writeString(2, getNotificationBarText());
      }
      if (hasLastDeliveredTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(3, getLastDeliveredTimestampSeconds());
      }
      if (hasTriggerCondition()) {
        paramCodedOutputStreamMicro.writeMessage(4, getTriggerCondition());
      }
      if (hasExpirationTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(5, getExpirationTimestampSeconds());
      }
      if (hasDoNotSuppress()) {
        paramCodedOutputStreamMicro.writeBool(6, getDoNotSuppress());
      }
    }
  }
  
  public static final class PackageItem
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasLandingPageUrl;
    private boolean hasName;
    private boolean hasPhoto;
    private boolean hasQuantity;
    private String landingPageUrl_ = "";
    private String name_ = "";
    private Sidekick.Photo photo_ = null;
    private int quantity_ = 0;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getLandingPageUrl()
    {
      return this.landingPageUrl_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public Sidekick.Photo getPhoto()
    {
      return this.photo_;
    }
    
    public int getQuantity()
    {
      return this.quantity_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(2, getName());
      }
      if (hasQuantity()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getQuantity());
      }
      if (hasLandingPageUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getLandingPageUrl());
      }
      if (hasPhoto()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getPhoto());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasLandingPageUrl()
    {
      return this.hasLandingPageUrl;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasPhoto()
    {
      return this.hasPhoto;
    }
    
    public boolean hasQuantity()
    {
      return this.hasQuantity;
    }
    
    public PackageItem mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 18: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setQuantity(paramCodedInputStreamMicro.readInt32());
          break;
        case 34: 
          setLandingPageUrl(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.Photo localPhoto = new Sidekick.Photo();
        paramCodedInputStreamMicro.readMessage(localPhoto);
        setPhoto(localPhoto);
      }
    }
    
    public PackageItem setLandingPageUrl(String paramString)
    {
      this.hasLandingPageUrl = true;
      this.landingPageUrl_ = paramString;
      return this;
    }
    
    public PackageItem setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public PackageItem setPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasPhoto = true;
      this.photo_ = paramPhoto;
      return this;
    }
    
    public PackageItem setQuantity(int paramInt)
    {
      this.hasQuantity = true;
      this.quantity_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(2, getName());
      }
      if (hasQuantity()) {
        paramCodedOutputStreamMicro.writeInt32(3, getQuantity());
      }
      if (hasLandingPageUrl()) {
        paramCodedOutputStreamMicro.writeString(4, getLandingPageUrl());
      }
      if (hasPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(5, getPhoto());
      }
    }
  }
  
  public static final class PackageTrackingEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private long estimatedDeliverySecs_ = 0L;
    private String fromAddress_ = "";
    private List<Sidekick.GmailReference> gmailReference_ = Collections.emptyList();
    private boolean hasEstimatedDeliverySecs;
    private boolean hasFromAddress;
    private boolean hasLastUpdateTimeSecs;
    private boolean hasOrderId;
    private boolean hasPackageStatusUpdatesEnabled;
    private boolean hasPickupLocation;
    private boolean hasPickupLocationAdditionalInformation;
    private boolean hasSecondaryPageUrl;
    private boolean hasSecondaryPageUrlRequiresGaiaLogin;
    private boolean hasSecondaryPageUrlTitle;
    private boolean hasShippingCompanyLogoUrl;
    private boolean hasShippingCompanyName;
    private boolean hasShippingService;
    private boolean hasStatus;
    private boolean hasStatusCode;
    private boolean hasToAddress;
    private boolean hasTrackingButtonUrlRequiresGaiaLogin;
    private boolean hasTrackingNumber;
    private boolean hasTrackingUrl;
    private List<Sidekick.PackageItem> items_ = Collections.emptyList();
    private long lastUpdateTimeSecs_ = 0L;
    private String orderId_ = "";
    private boolean packageStatusUpdatesEnabled_ = false;
    private String pickupLocationAdditionalInformation_ = "";
    private Sidekick.Location pickupLocation_ = null;
    private boolean secondaryPageUrlRequiresGaiaLogin_ = false;
    private String secondaryPageUrlTitle_ = "";
    private String secondaryPageUrl_ = "";
    private String shippingCompanyLogoUrl_ = "";
    private String shippingCompanyName_ = "";
    private String shippingService_ = "";
    private int statusCode_ = 0;
    private String status_ = "";
    private String toAddress_ = "";
    private boolean trackingButtonUrlRequiresGaiaLogin_ = false;
    private String trackingNumber_ = "";
    private String trackingUrl_ = "";
    
    public PackageTrackingEntry addGmailReference(Sidekick.GmailReference paramGmailReference)
    {
      if (paramGmailReference == null) {
        throw new NullPointerException();
      }
      if (this.gmailReference_.isEmpty()) {
        this.gmailReference_ = new ArrayList();
      }
      this.gmailReference_.add(paramGmailReference);
      return this;
    }
    
    public PackageTrackingEntry addItems(Sidekick.PackageItem paramPackageItem)
    {
      if (paramPackageItem == null) {
        throw new NullPointerException();
      }
      if (this.items_.isEmpty()) {
        this.items_ = new ArrayList();
      }
      this.items_.add(paramPackageItem);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getEstimatedDeliverySecs()
    {
      return this.estimatedDeliverySecs_;
    }
    
    public String getFromAddress()
    {
      return this.fromAddress_;
    }
    
    public List<Sidekick.GmailReference> getGmailReferenceList()
    {
      return this.gmailReference_;
    }
    
    public Sidekick.PackageItem getItems(int paramInt)
    {
      return (Sidekick.PackageItem)this.items_.get(paramInt);
    }
    
    public int getItemsCount()
    {
      return this.items_.size();
    }
    
    public List<Sidekick.PackageItem> getItemsList()
    {
      return this.items_;
    }
    
    public long getLastUpdateTimeSecs()
    {
      return this.lastUpdateTimeSecs_;
    }
    
    public String getOrderId()
    {
      return this.orderId_;
    }
    
    public boolean getPackageStatusUpdatesEnabled()
    {
      return this.packageStatusUpdatesEnabled_;
    }
    
    public Sidekick.Location getPickupLocation()
    {
      return this.pickupLocation_;
    }
    
    public String getPickupLocationAdditionalInformation()
    {
      return this.pickupLocationAdditionalInformation_;
    }
    
    public String getSecondaryPageUrl()
    {
      return this.secondaryPageUrl_;
    }
    
    public boolean getSecondaryPageUrlRequiresGaiaLogin()
    {
      return this.secondaryPageUrlRequiresGaiaLogin_;
    }
    
    public String getSecondaryPageUrlTitle()
    {
      return this.secondaryPageUrlTitle_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasStatus();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getStatus());
      }
      if (hasStatusCode()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getStatusCode());
      }
      if (hasLastUpdateTimeSecs()) {
        i += CodedOutputStreamMicro.computeInt64Size(3, getLastUpdateTimeSecs());
      }
      if (hasShippingCompanyName()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getShippingCompanyName());
      }
      if (hasShippingCompanyLogoUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getShippingCompanyLogoUrl());
      }
      if (hasShippingService()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getShippingService());
      }
      if (hasFromAddress()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getFromAddress());
      }
      if (hasToAddress()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getToAddress());
      }
      if (hasTrackingNumber()) {
        i += CodedOutputStreamMicro.computeStringSize(9, getTrackingNumber());
      }
      if (hasTrackingUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getTrackingUrl());
      }
      Iterator localIterator1 = getGmailReferenceList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, (Sidekick.GmailReference)localIterator1.next());
      }
      Iterator localIterator2 = getItemsList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(12, (Sidekick.PackageItem)localIterator2.next());
      }
      if (hasEstimatedDeliverySecs()) {
        i += CodedOutputStreamMicro.computeInt64Size(13, getEstimatedDeliverySecs());
      }
      if (hasSecondaryPageUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(14, getSecondaryPageUrl());
      }
      if (hasSecondaryPageUrlTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(15, getSecondaryPageUrlTitle());
      }
      if (hasOrderId()) {
        i += CodedOutputStreamMicro.computeStringSize(16, getOrderId());
      }
      if (hasSecondaryPageUrlRequiresGaiaLogin()) {
        i += CodedOutputStreamMicro.computeBoolSize(17, getSecondaryPageUrlRequiresGaiaLogin());
      }
      if (hasTrackingButtonUrlRequiresGaiaLogin()) {
        i += CodedOutputStreamMicro.computeBoolSize(18, getTrackingButtonUrlRequiresGaiaLogin());
      }
      if (hasPackageStatusUpdatesEnabled()) {
        i += CodedOutputStreamMicro.computeBoolSize(19, getPackageStatusUpdatesEnabled());
      }
      if (hasPickupLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(20, getPickupLocation());
      }
      if (hasPickupLocationAdditionalInformation()) {
        i += CodedOutputStreamMicro.computeStringSize(21, getPickupLocationAdditionalInformation());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getShippingCompanyLogoUrl()
    {
      return this.shippingCompanyLogoUrl_;
    }
    
    public String getShippingCompanyName()
    {
      return this.shippingCompanyName_;
    }
    
    public String getShippingService()
    {
      return this.shippingService_;
    }
    
    public String getStatus()
    {
      return this.status_;
    }
    
    public int getStatusCode()
    {
      return this.statusCode_;
    }
    
    public String getToAddress()
    {
      return this.toAddress_;
    }
    
    public boolean getTrackingButtonUrlRequiresGaiaLogin()
    {
      return this.trackingButtonUrlRequiresGaiaLogin_;
    }
    
    public String getTrackingNumber()
    {
      return this.trackingNumber_;
    }
    
    public String getTrackingUrl()
    {
      return this.trackingUrl_;
    }
    
    public boolean hasEstimatedDeliverySecs()
    {
      return this.hasEstimatedDeliverySecs;
    }
    
    public boolean hasFromAddress()
    {
      return this.hasFromAddress;
    }
    
    public boolean hasLastUpdateTimeSecs()
    {
      return this.hasLastUpdateTimeSecs;
    }
    
    public boolean hasOrderId()
    {
      return this.hasOrderId;
    }
    
    public boolean hasPackageStatusUpdatesEnabled()
    {
      return this.hasPackageStatusUpdatesEnabled;
    }
    
    public boolean hasPickupLocation()
    {
      return this.hasPickupLocation;
    }
    
    public boolean hasPickupLocationAdditionalInformation()
    {
      return this.hasPickupLocationAdditionalInformation;
    }
    
    public boolean hasSecondaryPageUrl()
    {
      return this.hasSecondaryPageUrl;
    }
    
    public boolean hasSecondaryPageUrlRequiresGaiaLogin()
    {
      return this.hasSecondaryPageUrlRequiresGaiaLogin;
    }
    
    public boolean hasSecondaryPageUrlTitle()
    {
      return this.hasSecondaryPageUrlTitle;
    }
    
    public boolean hasShippingCompanyLogoUrl()
    {
      return this.hasShippingCompanyLogoUrl;
    }
    
    public boolean hasShippingCompanyName()
    {
      return this.hasShippingCompanyName;
    }
    
    public boolean hasShippingService()
    {
      return this.hasShippingService;
    }
    
    public boolean hasStatus()
    {
      return this.hasStatus;
    }
    
    public boolean hasStatusCode()
    {
      return this.hasStatusCode;
    }
    
    public boolean hasToAddress()
    {
      return this.hasToAddress;
    }
    
    public boolean hasTrackingButtonUrlRequiresGaiaLogin()
    {
      return this.hasTrackingButtonUrlRequiresGaiaLogin;
    }
    
    public boolean hasTrackingNumber()
    {
      return this.hasTrackingNumber;
    }
    
    public boolean hasTrackingUrl()
    {
      return this.hasTrackingUrl;
    }
    
    public PackageTrackingEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setStatus(paramCodedInputStreamMicro.readString());
          break;
        case 16: 
          setStatusCode(paramCodedInputStreamMicro.readInt32());
          break;
        case 24: 
          setLastUpdateTimeSecs(paramCodedInputStreamMicro.readInt64());
          break;
        case 34: 
          setShippingCompanyName(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          setShippingCompanyLogoUrl(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setShippingService(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          setFromAddress(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          setToAddress(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          setTrackingNumber(paramCodedInputStreamMicro.readString());
          break;
        case 82: 
          setTrackingUrl(paramCodedInputStreamMicro.readString());
          break;
        case 90: 
          Sidekick.GmailReference localGmailReference = new Sidekick.GmailReference();
          paramCodedInputStreamMicro.readMessage(localGmailReference);
          addGmailReference(localGmailReference);
          break;
        case 98: 
          Sidekick.PackageItem localPackageItem = new Sidekick.PackageItem();
          paramCodedInputStreamMicro.readMessage(localPackageItem);
          addItems(localPackageItem);
          break;
        case 104: 
          setEstimatedDeliverySecs(paramCodedInputStreamMicro.readInt64());
          break;
        case 114: 
          setSecondaryPageUrl(paramCodedInputStreamMicro.readString());
          break;
        case 122: 
          setSecondaryPageUrlTitle(paramCodedInputStreamMicro.readString());
          break;
        case 130: 
          setOrderId(paramCodedInputStreamMicro.readString());
          break;
        case 136: 
          setSecondaryPageUrlRequiresGaiaLogin(paramCodedInputStreamMicro.readBool());
          break;
        case 144: 
          setTrackingButtonUrlRequiresGaiaLogin(paramCodedInputStreamMicro.readBool());
          break;
        case 152: 
          setPackageStatusUpdatesEnabled(paramCodedInputStreamMicro.readBool());
          break;
        case 162: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setPickupLocation(localLocation);
          break;
        }
        setPickupLocationAdditionalInformation(paramCodedInputStreamMicro.readString());
      }
    }
    
    public PackageTrackingEntry setEstimatedDeliverySecs(long paramLong)
    {
      this.hasEstimatedDeliverySecs = true;
      this.estimatedDeliverySecs_ = paramLong;
      return this;
    }
    
    public PackageTrackingEntry setFromAddress(String paramString)
    {
      this.hasFromAddress = true;
      this.fromAddress_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setLastUpdateTimeSecs(long paramLong)
    {
      this.hasLastUpdateTimeSecs = true;
      this.lastUpdateTimeSecs_ = paramLong;
      return this;
    }
    
    public PackageTrackingEntry setOrderId(String paramString)
    {
      this.hasOrderId = true;
      this.orderId_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setPackageStatusUpdatesEnabled(boolean paramBoolean)
    {
      this.hasPackageStatusUpdatesEnabled = true;
      this.packageStatusUpdatesEnabled_ = paramBoolean;
      return this;
    }
    
    public PackageTrackingEntry setPickupLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasPickupLocation = true;
      this.pickupLocation_ = paramLocation;
      return this;
    }
    
    public PackageTrackingEntry setPickupLocationAdditionalInformation(String paramString)
    {
      this.hasPickupLocationAdditionalInformation = true;
      this.pickupLocationAdditionalInformation_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setSecondaryPageUrl(String paramString)
    {
      this.hasSecondaryPageUrl = true;
      this.secondaryPageUrl_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setSecondaryPageUrlRequiresGaiaLogin(boolean paramBoolean)
    {
      this.hasSecondaryPageUrlRequiresGaiaLogin = true;
      this.secondaryPageUrlRequiresGaiaLogin_ = paramBoolean;
      return this;
    }
    
    public PackageTrackingEntry setSecondaryPageUrlTitle(String paramString)
    {
      this.hasSecondaryPageUrlTitle = true;
      this.secondaryPageUrlTitle_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setShippingCompanyLogoUrl(String paramString)
    {
      this.hasShippingCompanyLogoUrl = true;
      this.shippingCompanyLogoUrl_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setShippingCompanyName(String paramString)
    {
      this.hasShippingCompanyName = true;
      this.shippingCompanyName_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setShippingService(String paramString)
    {
      this.hasShippingService = true;
      this.shippingService_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setStatus(String paramString)
    {
      this.hasStatus = true;
      this.status_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setStatusCode(int paramInt)
    {
      this.hasStatusCode = true;
      this.statusCode_ = paramInt;
      return this;
    }
    
    public PackageTrackingEntry setToAddress(String paramString)
    {
      this.hasToAddress = true;
      this.toAddress_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setTrackingButtonUrlRequiresGaiaLogin(boolean paramBoolean)
    {
      this.hasTrackingButtonUrlRequiresGaiaLogin = true;
      this.trackingButtonUrlRequiresGaiaLogin_ = paramBoolean;
      return this;
    }
    
    public PackageTrackingEntry setTrackingNumber(String paramString)
    {
      this.hasTrackingNumber = true;
      this.trackingNumber_ = paramString;
      return this;
    }
    
    public PackageTrackingEntry setTrackingUrl(String paramString)
    {
      this.hasTrackingUrl = true;
      this.trackingUrl_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasStatus()) {
        paramCodedOutputStreamMicro.writeString(1, getStatus());
      }
      if (hasStatusCode()) {
        paramCodedOutputStreamMicro.writeInt32(2, getStatusCode());
      }
      if (hasLastUpdateTimeSecs()) {
        paramCodedOutputStreamMicro.writeInt64(3, getLastUpdateTimeSecs());
      }
      if (hasShippingCompanyName()) {
        paramCodedOutputStreamMicro.writeString(4, getShippingCompanyName());
      }
      if (hasShippingCompanyLogoUrl()) {
        paramCodedOutputStreamMicro.writeString(5, getShippingCompanyLogoUrl());
      }
      if (hasShippingService()) {
        paramCodedOutputStreamMicro.writeString(6, getShippingService());
      }
      if (hasFromAddress()) {
        paramCodedOutputStreamMicro.writeString(7, getFromAddress());
      }
      if (hasToAddress()) {
        paramCodedOutputStreamMicro.writeString(8, getToAddress());
      }
      if (hasTrackingNumber()) {
        paramCodedOutputStreamMicro.writeString(9, getTrackingNumber());
      }
      if (hasTrackingUrl()) {
        paramCodedOutputStreamMicro.writeString(10, getTrackingUrl());
      }
      Iterator localIterator1 = getGmailReferenceList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(11, (Sidekick.GmailReference)localIterator1.next());
      }
      Iterator localIterator2 = getItemsList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(12, (Sidekick.PackageItem)localIterator2.next());
      }
      if (hasEstimatedDeliverySecs()) {
        paramCodedOutputStreamMicro.writeInt64(13, getEstimatedDeliverySecs());
      }
      if (hasSecondaryPageUrl()) {
        paramCodedOutputStreamMicro.writeString(14, getSecondaryPageUrl());
      }
      if (hasSecondaryPageUrlTitle()) {
        paramCodedOutputStreamMicro.writeString(15, getSecondaryPageUrlTitle());
      }
      if (hasOrderId()) {
        paramCodedOutputStreamMicro.writeString(16, getOrderId());
      }
      if (hasSecondaryPageUrlRequiresGaiaLogin()) {
        paramCodedOutputStreamMicro.writeBool(17, getSecondaryPageUrlRequiresGaiaLogin());
      }
      if (hasTrackingButtonUrlRequiresGaiaLogin()) {
        paramCodedOutputStreamMicro.writeBool(18, getTrackingButtonUrlRequiresGaiaLogin());
      }
      if (hasPackageStatusUpdatesEnabled()) {
        paramCodedOutputStreamMicro.writeBool(19, getPackageStatusUpdatesEnabled());
      }
      if (hasPickupLocation()) {
        paramCodedOutputStreamMicro.writeMessage(20, getPickupLocation());
      }
      if (hasPickupLocationAdditionalInformation()) {
        paramCodedOutputStreamMicro.writeString(21, getPickupLocationAdditionalInformation());
      }
    }
  }
  
  public static final class PhoneNumber
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.ContactType contactType_ = null;
    private boolean hasContactType;
    private boolean hasValue;
    private String value_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ContactType getContactType()
    {
      return this.contactType_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasValue();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getValue());
      }
      if (hasContactType()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getContactType());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getValue()
    {
      return this.value_;
    }
    
    public boolean hasContactType()
    {
      return this.hasContactType;
    }
    
    public boolean hasValue()
    {
      return this.hasValue;
    }
    
    public PhoneNumber mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setValue(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.ContactType localContactType = new Sidekick.ContactType();
        paramCodedInputStreamMicro.readMessage(localContactType);
        setContactType(localContactType);
      }
    }
    
    public PhoneNumber setContactType(Sidekick.ContactType paramContactType)
    {
      if (paramContactType == null) {
        throw new NullPointerException();
      }
      this.hasContactType = true;
      this.contactType_ = paramContactType;
      return this;
    }
    
    public PhoneNumber setValue(String paramString)
    {
      this.hasValue = true;
      this.value_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasValue()) {
        paramCodedOutputStreamMicro.writeString(1, getValue());
      }
      if (hasContactType()) {
        paramCodedOutputStreamMicro.writeMessage(2, getContactType());
      }
    }
  }
  
  public static final class Photo
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.ClickAction clickAction_ = null;
    private boolean hasClickAction;
    private boolean hasHeight;
    private boolean hasInfoUrl;
    private boolean hasPhotoAttribution;
    private boolean hasUrl;
    private boolean hasUrlType;
    private boolean hasWidth;
    private int height_ = 0;
    private String infoUrl_ = "";
    private Sidekick.Attribution photoAttribution_ = null;
    private int urlType_ = 0;
    private String url_ = "";
    private int width_ = 0;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ClickAction getClickAction()
    {
      return this.clickAction_;
    }
    
    public int getHeight()
    {
      return this.height_;
    }
    
    public String getInfoUrl()
    {
      return this.infoUrl_;
    }
    
    public Sidekick.Attribution getPhotoAttribution()
    {
      return this.photoAttribution_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasUrl();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getUrl());
      }
      if (hasWidth()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getWidth());
      }
      if (hasHeight()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getHeight());
      }
      if (hasUrlType()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getUrlType());
      }
      if (hasInfoUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getInfoUrl());
      }
      if (hasPhotoAttribution()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, getPhotoAttribution());
      }
      if (hasClickAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getClickAction());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getUrl()
    {
      return this.url_;
    }
    
    public int getUrlType()
    {
      return this.urlType_;
    }
    
    public int getWidth()
    {
      return this.width_;
    }
    
    public boolean hasClickAction()
    {
      return this.hasClickAction;
    }
    
    public boolean hasHeight()
    {
      return this.hasHeight;
    }
    
    public boolean hasInfoUrl()
    {
      return this.hasInfoUrl;
    }
    
    public boolean hasPhotoAttribution()
    {
      return this.hasPhotoAttribution;
    }
    
    public boolean hasUrl()
    {
      return this.hasUrl;
    }
    
    public boolean hasUrlType()
    {
      return this.hasUrlType;
    }
    
    public boolean hasWidth()
    {
      return this.hasWidth;
    }
    
    public Photo mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setUrl(paramCodedInputStreamMicro.readString());
          break;
        case 16: 
          setWidth(paramCodedInputStreamMicro.readInt32());
          break;
        case 24: 
          setHeight(paramCodedInputStreamMicro.readInt32());
          break;
        case 40: 
          setUrlType(paramCodedInputStreamMicro.readInt32());
          break;
        case 58: 
          setInfoUrl(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          Sidekick.Attribution localAttribution = new Sidekick.Attribution();
          paramCodedInputStreamMicro.readMessage(localAttribution);
          setPhotoAttribution(localAttribution);
          break;
        }
        Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
        paramCodedInputStreamMicro.readMessage(localClickAction);
        setClickAction(localClickAction);
      }
    }
    
    public Photo setClickAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasClickAction = true;
      this.clickAction_ = paramClickAction;
      return this;
    }
    
    public Photo setHeight(int paramInt)
    {
      this.hasHeight = true;
      this.height_ = paramInt;
      return this;
    }
    
    public Photo setInfoUrl(String paramString)
    {
      this.hasInfoUrl = true;
      this.infoUrl_ = paramString;
      return this;
    }
    
    public Photo setPhotoAttribution(Sidekick.Attribution paramAttribution)
    {
      if (paramAttribution == null) {
        throw new NullPointerException();
      }
      this.hasPhotoAttribution = true;
      this.photoAttribution_ = paramAttribution;
      return this;
    }
    
    public Photo setUrl(String paramString)
    {
      this.hasUrl = true;
      this.url_ = paramString;
      return this;
    }
    
    public Photo setUrlType(int paramInt)
    {
      this.hasUrlType = true;
      this.urlType_ = paramInt;
      return this;
    }
    
    public Photo setWidth(int paramInt)
    {
      this.hasWidth = true;
      this.width_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasUrl()) {
        paramCodedOutputStreamMicro.writeString(1, getUrl());
      }
      if (hasWidth()) {
        paramCodedOutputStreamMicro.writeInt32(2, getWidth());
      }
      if (hasHeight()) {
        paramCodedOutputStreamMicro.writeInt32(3, getHeight());
      }
      if (hasUrlType()) {
        paramCodedOutputStreamMicro.writeInt32(5, getUrlType());
      }
      if (hasInfoUrl()) {
        paramCodedOutputStreamMicro.writeString(7, getInfoUrl());
      }
      if (hasPhotoAttribution()) {
        paramCodedOutputStreamMicro.writeMessage(8, getPhotoAttribution());
      }
      if (hasClickAction()) {
        paramCodedOutputStreamMicro.writeMessage(10, getClickAction());
      }
    }
  }
  
  public static final class PhotoSpotEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasLocation;
    private boolean hasWalkingTimeSeconds;
    private Sidekick.Location location_ = null;
    private List<Sidekick.GeoLocatedPhoto> photo_ = Collections.emptyList();
    private int walkingTimeSeconds_ = 0;
    
    public PhotoSpotEntry addPhoto(Sidekick.GeoLocatedPhoto paramGeoLocatedPhoto)
    {
      if (paramGeoLocatedPhoto == null) {
        throw new NullPointerException();
      }
      if (this.photo_.isEmpty()) {
        this.photo_ = new ArrayList();
      }
      this.photo_.add(paramGeoLocatedPhoto);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public Sidekick.GeoLocatedPhoto getPhoto(int paramInt)
    {
      return (Sidekick.GeoLocatedPhoto)this.photo_.get(paramInt);
    }
    
    public List<Sidekick.GeoLocatedPhoto> getPhotoList()
    {
      return this.photo_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLocation();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getLocation());
      }
      if (hasWalkingTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getWalkingTimeSeconds());
      }
      Iterator localIterator = getPhotoList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.GeoLocatedPhoto)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getWalkingTimeSeconds()
    {
      return this.walkingTimeSeconds_;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasWalkingTimeSeconds()
    {
      return this.hasWalkingTimeSeconds;
    }
    
    public PhotoSpotEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 16: 
          setWalkingTimeSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        }
        Sidekick.GeoLocatedPhoto localGeoLocatedPhoto = new Sidekick.GeoLocatedPhoto();
        paramCodedInputStreamMicro.readMessage(localGeoLocatedPhoto);
        addPhoto(localGeoLocatedPhoto);
      }
    }
    
    public PhotoSpotEntry setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public PhotoSpotEntry setWalkingTimeSeconds(int paramInt)
    {
      this.hasWalkingTimeSeconds = true;
      this.walkingTimeSeconds_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(1, getLocation());
      }
      if (hasWalkingTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(2, getWalkingTimeSeconds());
      }
      Iterator localIterator = getPhotoList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.GeoLocatedPhoto)localIterator.next());
      }
    }
  }
  
  public static final class PlaceAutocompleteQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasQuery;
    private String query_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getQuery()
    {
      return this.query_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasQuery();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getQuery());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasQuery()
    {
      return this.hasQuery;
    }
    
    public PlaceAutocompleteQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setQuery(paramCodedInputStreamMicro.readString());
      }
    }
    
    public PlaceAutocompleteQuery setQuery(String paramString)
    {
      this.hasQuery = true;
      this.query_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasQuery()) {
        paramCodedOutputStreamMicro.writeString(1, getQuery());
      }
    }
  }
  
  public static final class PlaceAutocompleteResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Sidekick.PlaceSuggestion> suggestion_ = Collections.emptyList();
    
    public PlaceAutocompleteResponse addSuggestion(Sidekick.PlaceSuggestion paramPlaceSuggestion)
    {
      if (paramPlaceSuggestion == null) {
        throw new NullPointerException();
      }
      if (this.suggestion_.isEmpty()) {
        this.suggestion_ = new ArrayList();
      }
      this.suggestion_.add(paramPlaceSuggestion);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getSuggestionList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.PlaceSuggestion)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public List<Sidekick.PlaceSuggestion> getSuggestionList()
    {
      return this.suggestion_;
    }
    
    public PlaceAutocompleteResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.PlaceSuggestion localPlaceSuggestion = new Sidekick.PlaceSuggestion();
        paramCodedInputStreamMicro.readMessage(localPlaceSuggestion);
        addSuggestion(localPlaceSuggestion);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getSuggestionList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.PlaceSuggestion)localIterator.next());
      }
    }
  }
  
  public static final class PlaceClusterData
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.Location centroid_ = null;
    private boolean hasCentroid;
    private List<Sidekick.Location> location_ = Collections.emptyList();
    
    public PlaceClusterData addLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      if (this.location_.isEmpty()) {
        this.location_ = new ArrayList();
      }
      this.location_.add(paramLocation);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Location getCentroid()
    {
      return this.centroid_;
    }
    
    public List<Sidekick.Location> getLocationList()
    {
      return this.location_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasCentroid();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getCentroid());
      }
      Iterator localIterator = getLocationList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.Location)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasCentroid()
    {
      return this.hasCentroid;
    }
    
    public PlaceClusterData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Location localLocation2 = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation2);
          setCentroid(localLocation2);
          break;
        }
        Sidekick.Location localLocation1 = new Sidekick.Location();
        paramCodedInputStreamMicro.readMessage(localLocation1);
        addLocation(localLocation1);
      }
    }
    
    public PlaceClusterData setCentroid(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasCentroid = true;
      this.centroid_ = paramLocation;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasCentroid()) {
        paramCodedOutputStreamMicro.writeMessage(1, getCentroid());
      }
      Iterator localIterator = getLocationList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.Location)localIterator.next());
      }
    }
  }
  
  public static final class PlaceData
    extends MessageMicro
  {
    private Sidekick.BusinessData businessData_ = null;
    private int cachedSize = -1;
    private Sidekick.ContactData contactData_ = null;
    private String displayName_ = "";
    private boolean hasBusinessData;
    private boolean hasContactData;
    private boolean hasDisplayName;
    private boolean hasPlaceClusterData;
    private Sidekick.PlaceClusterData placeClusterData_ = null;
    
    public Sidekick.BusinessData getBusinessData()
    {
      return this.businessData_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ContactData getContactData()
    {
      return this.contactData_;
    }
    
    public String getDisplayName()
    {
      return this.displayName_;
    }
    
    public Sidekick.PlaceClusterData getPlaceClusterData()
    {
      return this.placeClusterData_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasDisplayName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getDisplayName());
      }
      if (hasContactData()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getContactData());
      }
      if (hasBusinessData()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getBusinessData());
      }
      if (hasPlaceClusterData()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getPlaceClusterData());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasBusinessData()
    {
      return this.hasBusinessData;
    }
    
    public boolean hasContactData()
    {
      return this.hasContactData;
    }
    
    public boolean hasDisplayName()
    {
      return this.hasDisplayName;
    }
    
    public boolean hasPlaceClusterData()
    {
      return this.hasPlaceClusterData;
    }
    
    public PlaceData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setDisplayName(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          Sidekick.ContactData localContactData = new Sidekick.ContactData();
          paramCodedInputStreamMicro.readMessage(localContactData);
          setContactData(localContactData);
          break;
        case 26: 
          Sidekick.BusinessData localBusinessData = new Sidekick.BusinessData();
          paramCodedInputStreamMicro.readMessage(localBusinessData);
          setBusinessData(localBusinessData);
          break;
        }
        Sidekick.PlaceClusterData localPlaceClusterData = new Sidekick.PlaceClusterData();
        paramCodedInputStreamMicro.readMessage(localPlaceClusterData);
        setPlaceClusterData(localPlaceClusterData);
      }
    }
    
    public PlaceData setBusinessData(Sidekick.BusinessData paramBusinessData)
    {
      if (paramBusinessData == null) {
        throw new NullPointerException();
      }
      this.hasBusinessData = true;
      this.businessData_ = paramBusinessData;
      return this;
    }
    
    public PlaceData setContactData(Sidekick.ContactData paramContactData)
    {
      if (paramContactData == null) {
        throw new NullPointerException();
      }
      this.hasContactData = true;
      this.contactData_ = paramContactData;
      return this;
    }
    
    public PlaceData setDisplayName(String paramString)
    {
      this.hasDisplayName = true;
      this.displayName_ = paramString;
      return this;
    }
    
    public PlaceData setPlaceClusterData(Sidekick.PlaceClusterData paramPlaceClusterData)
    {
      if (paramPlaceClusterData == null) {
        throw new NullPointerException();
      }
      this.hasPlaceClusterData = true;
      this.placeClusterData_ = paramPlaceClusterData;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasDisplayName()) {
        paramCodedOutputStreamMicro.writeString(1, getDisplayName());
      }
      if (hasContactData()) {
        paramCodedOutputStreamMicro.writeMessage(2, getContactData());
      }
      if (hasBusinessData()) {
        paramCodedOutputStreamMicro.writeMessage(3, getBusinessData());
      }
      if (hasPlaceClusterData()) {
        paramCodedOutputStreamMicro.writeMessage(4, getPlaceClusterData());
      }
    }
  }
  
  public static final class PlaceDetailsQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasReference;
    private Sidekick.PlaceReference reference_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.PlaceReference getReference()
    {
      return this.reference_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasReference();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getReference());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasReference()
    {
      return this.hasReference;
    }
    
    public PlaceDetailsQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.PlaceReference localPlaceReference = new Sidekick.PlaceReference();
        paramCodedInputStreamMicro.readMessage(localPlaceReference);
        setReference(localPlaceReference);
      }
    }
    
    public PlaceDetailsQuery setReference(Sidekick.PlaceReference paramPlaceReference)
    {
      if (paramPlaceReference == null) {
        throw new NullPointerException();
      }
      this.hasReference = true;
      this.reference_ = paramPlaceReference;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasReference()) {
        paramCodedOutputStreamMicro.writeMessage(1, getReference());
      }
    }
  }
  
  public static final class PlaceDetailsResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasLocation;
    private Sidekick.Location location_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLocation();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getLocation());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public PlaceDetailsResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.Location localLocation = new Sidekick.Location();
        paramCodedInputStreamMicro.readMessage(localLocation);
        setLocation(localLocation);
      }
    }
    
    public PlaceDetailsResponse setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(1, getLocation());
      }
    }
  }
  
  public static final class PlaceReference
    extends MessageMicro
  {
    private int cachedSize = -1;
    private ByteStringMicro encodedServerPayload_ = ByteStringMicro.EMPTY;
    private boolean hasEncodedServerPayload;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public ByteStringMicro getEncodedServerPayload()
    {
      return this.encodedServerPayload_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasEncodedServerPayload();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeBytesSize(1, getEncodedServerPayload());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasEncodedServerPayload()
    {
      return this.hasEncodedServerPayload;
    }
    
    public PlaceReference mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setEncodedServerPayload(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public PlaceReference setEncodedServerPayload(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedServerPayload = true;
      this.encodedServerPayload_ = paramByteStringMicro;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasEncodedServerPayload()) {
        paramCodedOutputStreamMicro.writeBytes(1, getEncodedServerPayload());
      }
    }
  }
  
  public static final class PlaceSuggestion
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.Chain chain_ = null;
    private String description_ = "";
    private boolean hasChain;
    private boolean hasDescription;
    private boolean hasReference;
    private boolean hasSubDescription;
    private Sidekick.PlaceReference reference_ = null;
    private String subDescription_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Chain getChain()
    {
      return this.chain_;
    }
    
    public String getDescription()
    {
      return this.description_;
    }
    
    public Sidekick.PlaceReference getReference()
    {
      return this.reference_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasDescription();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getDescription());
      }
      if (hasSubDescription()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSubDescription());
      }
      if (hasReference()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getReference());
      }
      if (hasChain()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getChain());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSubDescription()
    {
      return this.subDescription_;
    }
    
    public boolean hasChain()
    {
      return this.hasChain;
    }
    
    public boolean hasDescription()
    {
      return this.hasDescription;
    }
    
    public boolean hasReference()
    {
      return this.hasReference;
    }
    
    public boolean hasSubDescription()
    {
      return this.hasSubDescription;
    }
    
    public PlaceSuggestion mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setDescription(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSubDescription(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.PlaceReference localPlaceReference = new Sidekick.PlaceReference();
          paramCodedInputStreamMicro.readMessage(localPlaceReference);
          setReference(localPlaceReference);
          break;
        }
        Sidekick.Chain localChain = new Sidekick.Chain();
        paramCodedInputStreamMicro.readMessage(localChain);
        setChain(localChain);
      }
    }
    
    public PlaceSuggestion setChain(Sidekick.Chain paramChain)
    {
      if (paramChain == null) {
        throw new NullPointerException();
      }
      this.hasChain = true;
      this.chain_ = paramChain;
      return this;
    }
    
    public PlaceSuggestion setDescription(String paramString)
    {
      this.hasDescription = true;
      this.description_ = paramString;
      return this;
    }
    
    public PlaceSuggestion setReference(Sidekick.PlaceReference paramPlaceReference)
    {
      if (paramPlaceReference == null) {
        throw new NullPointerException();
      }
      this.hasReference = true;
      this.reference_ = paramPlaceReference;
      return this;
    }
    
    public PlaceSuggestion setSubDescription(String paramString)
    {
      this.hasSubDescription = true;
      this.subDescription_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasDescription()) {
        paramCodedOutputStreamMicro.writeString(1, getDescription());
      }
      if (hasSubDescription()) {
        paramCodedOutputStreamMicro.writeString(2, getSubDescription());
      }
      if (hasReference()) {
        paramCodedOutputStreamMicro.writeMessage(3, getReference());
      }
      if (hasChain()) {
        paramCodedOutputStreamMicro.writeMessage(4, getChain());
      }
    }
  }
  
  public static final class PlacevaultConfiguration
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasLocationHistoryRecording;
    private boolean hasOptedInToLocationHistory;
    private boolean locationHistoryRecording_ = true;
    private boolean optedInToLocationHistory_ = true;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getLocationHistoryRecording()
    {
      return this.locationHistoryRecording_;
    }
    
    public boolean getOptedInToLocationHistory()
    {
      return this.optedInToLocationHistory_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasOptedInToLocationHistory();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getOptedInToLocationHistory());
      }
      if (hasLocationHistoryRecording()) {
        i += CodedOutputStreamMicro.computeBoolSize(3, getLocationHistoryRecording());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasLocationHistoryRecording()
    {
      return this.hasLocationHistoryRecording;
    }
    
    public boolean hasOptedInToLocationHistory()
    {
      return this.hasOptedInToLocationHistory;
    }
    
    public PlacevaultConfiguration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setOptedInToLocationHistory(paramCodedInputStreamMicro.readBool());
          break;
        }
        setLocationHistoryRecording(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public PlacevaultConfiguration setLocationHistoryRecording(boolean paramBoolean)
    {
      this.hasLocationHistoryRecording = true;
      this.locationHistoryRecording_ = paramBoolean;
      return this;
    }
    
    public PlacevaultConfiguration setOptedInToLocationHistory(boolean paramBoolean)
    {
      this.hasOptedInToLocationHistory = true;
      this.optedInToLocationHistory_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasOptedInToLocationHistory()) {
        paramCodedOutputStreamMicro.writeBool(1, getOptedInToLocationHistory());
      }
      if (hasLocationHistoryRecording()) {
        paramCodedOutputStreamMicro.writeBool(3, getLocationHistoryRecording());
      }
    }
  }
  
  public static final class PrecacheDirective
    extends MessageMicro
  {
    private List<Sidekick.Location> bounds_ = Collections.emptyList();
    private int cachedSize = -1;
    private Sidekick.Location centroid_ = null;
    private boolean hasCentroid;
    
    public PrecacheDirective addBounds(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      if (this.bounds_.isEmpty()) {
        this.bounds_ = new ArrayList();
      }
      this.bounds_.add(paramLocation);
      return this;
    }
    
    public Sidekick.Location getBounds(int paramInt)
    {
      return (Sidekick.Location)this.bounds_.get(paramInt);
    }
    
    public int getBoundsCount()
    {
      return this.bounds_.size();
    }
    
    public List<Sidekick.Location> getBoundsList()
    {
      return this.bounds_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Location getCentroid()
    {
      return this.centroid_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasCentroid();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getCentroid());
      }
      Iterator localIterator = getBoundsList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.Location)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasCentroid()
    {
      return this.hasCentroid;
    }
    
    public PrecacheDirective mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Location localLocation2 = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation2);
          setCentroid(localLocation2);
          break;
        }
        Sidekick.Location localLocation1 = new Sidekick.Location();
        paramCodedInputStreamMicro.readMessage(localLocation1);
        addBounds(localLocation1);
      }
    }
    
    public PrecacheDirective setCentroid(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasCentroid = true;
      this.centroid_ = paramLocation;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasCentroid()) {
        paramCodedOutputStreamMicro.writeMessage(1, getCentroid());
      }
      Iterator localIterator = getBoundsList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.Location)localIterator.next());
      }
    }
  }
  
  public static final class PrototypeEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Long> dismissedEntriesId_ = Collections.emptyList();
    private boolean hasType;
    private List<Sidekick.Entry> prototype_ = Collections.emptyList();
    private int type_ = 48;
    
    public PrototypeEntry addDismissedEntriesId(long paramLong)
    {
      if (this.dismissedEntriesId_.isEmpty()) {
        this.dismissedEntriesId_ = new ArrayList();
      }
      this.dismissedEntriesId_.add(Long.valueOf(paramLong));
      return this;
    }
    
    public PrototypeEntry addPrototype(Sidekick.Entry paramEntry)
    {
      if (paramEntry == null) {
        throw new NullPointerException();
      }
      if (this.prototype_.isEmpty()) {
        this.prototype_ = new ArrayList();
      }
      this.prototype_.add(paramEntry);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public List<Long> getDismissedEntriesIdList()
    {
      return this.dismissedEntriesId_;
    }
    
    public List<Sidekick.Entry> getPrototypeList()
    {
      return this.prototype_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasType();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getType());
      }
      int j = 0;
      Iterator localIterator1 = getDismissedEntriesIdList().iterator();
      while (localIterator1.hasNext()) {
        j += CodedOutputStreamMicro.computeInt64SizeNoTag(((Long)localIterator1.next()).longValue());
      }
      int k = i + j + 1 * getDismissedEntriesIdList().size();
      Iterator localIterator2 = getPrototypeList().iterator();
      while (localIterator2.hasNext()) {
        k += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.Entry)localIterator2.next());
      }
      this.cachedSize = k;
      return k;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public PrototypeEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        case 16: 
          addDismissedEntriesId(paramCodedInputStreamMicro.readInt64());
          break;
        }
        Sidekick.Entry localEntry = new Sidekick.Entry();
        paramCodedInputStreamMicro.readMessage(localEntry);
        addPrototype(localEntry);
      }
    }
    
    public PrototypeEntry setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(1, getType());
      }
      Iterator localIterator1 = getDismissedEntriesIdList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeInt64(2, ((Long)localIterator1.next()).longValue());
      }
      Iterator localIterator2 = getPrototypeList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.Entry)localIterator2.next());
      }
    }
  }
  
  public static final class PublicAlertEntry
    extends MessageMicro
  {
    private String alertUrlLabel_ = "";
    private String alertUrl_ = "";
    private int cachedSize = -1;
    private boolean hasAlertUrl;
    private boolean hasAlertUrlLabel;
    private boolean hasImage;
    private boolean hasIssuedTimeSec;
    private boolean hasLocation;
    private boolean hasPublisher;
    private boolean hasText;
    private boolean hasTimePublisher;
    private boolean hasTitle;
    private Sidekick.Photo image_ = null;
    private long issuedTimeSec_ = 0L;
    private Sidekick.Location location_ = null;
    private String publisher_ = "";
    private String text_ = "";
    private String timePublisher_ = "";
    private String title_ = "";
    
    public String getAlertUrl()
    {
      return this.alertUrl_;
    }
    
    public String getAlertUrlLabel()
    {
      return this.alertUrlLabel_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public long getIssuedTimeSec()
    {
      return this.issuedTimeSec_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public String getPublisher()
    {
      return this.publisher_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasText()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getText());
      }
      if (hasAlertUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getAlertUrl());
      }
      if (hasAlertUrlLabel()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getAlertUrlLabel());
      }
      if (hasLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getLocation());
      }
      if (hasTimePublisher()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getTimePublisher());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, getImage());
      }
      if (hasPublisher()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getPublisher());
      }
      if (hasIssuedTimeSec()) {
        i += CodedOutputStreamMicro.computeUInt64Size(9, getIssuedTimeSec());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getText()
    {
      return this.text_;
    }
    
    public String getTimePublisher()
    {
      return this.timePublisher_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasAlertUrl()
    {
      return this.hasAlertUrl;
    }
    
    public boolean hasAlertUrlLabel()
    {
      return this.hasAlertUrlLabel;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasIssuedTimeSec()
    {
      return this.hasIssuedTimeSec;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasPublisher()
    {
      return this.hasPublisher;
    }
    
    public boolean hasText()
    {
      return this.hasText;
    }
    
    public boolean hasTimePublisher()
    {
      return this.hasTimePublisher;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public PublicAlertEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setText(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setAlertUrl(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setAlertUrlLabel(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 50: 
          setTimePublisher(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 66: 
          setPublisher(paramCodedInputStreamMicro.readString());
          break;
        }
        setIssuedTimeSec(paramCodedInputStreamMicro.readUInt64());
      }
    }
    
    public PublicAlertEntry setAlertUrl(String paramString)
    {
      this.hasAlertUrl = true;
      this.alertUrl_ = paramString;
      return this;
    }
    
    public PublicAlertEntry setAlertUrlLabel(String paramString)
    {
      this.hasAlertUrlLabel = true;
      this.alertUrlLabel_ = paramString;
      return this;
    }
    
    public PublicAlertEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public PublicAlertEntry setIssuedTimeSec(long paramLong)
    {
      this.hasIssuedTimeSec = true;
      this.issuedTimeSec_ = paramLong;
      return this;
    }
    
    public PublicAlertEntry setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public PublicAlertEntry setPublisher(String paramString)
    {
      this.hasPublisher = true;
      this.publisher_ = paramString;
      return this;
    }
    
    public PublicAlertEntry setText(String paramString)
    {
      this.hasText = true;
      this.text_ = paramString;
      return this;
    }
    
    public PublicAlertEntry setTimePublisher(String paramString)
    {
      this.hasTimePublisher = true;
      this.timePublisher_ = paramString;
      return this;
    }
    
    public PublicAlertEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasText()) {
        paramCodedOutputStreamMicro.writeString(2, getText());
      }
      if (hasAlertUrl()) {
        paramCodedOutputStreamMicro.writeString(3, getAlertUrl());
      }
      if (hasAlertUrlLabel()) {
        paramCodedOutputStreamMicro.writeString(4, getAlertUrlLabel());
      }
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(5, getLocation());
      }
      if (hasTimePublisher()) {
        paramCodedOutputStreamMicro.writeString(6, getTimePublisher());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(7, getImage());
      }
      if (hasPublisher()) {
        paramCodedOutputStreamMicro.writeString(8, getPublisher());
      }
      if (hasIssuedTimeSec()) {
        paramCodedOutputStreamMicro.writeUInt64(9, getIssuedTimeSec());
      }
    }
  }
  
  public static final class PushRegistration
    extends MessageMicro
  {
    private String accountHash_ = "";
    private int cachedSize = -1;
    private boolean hasAccountHash;
    private boolean hasProtocol;
    private boolean hasRegistrationId;
    private boolean hasUnregister;
    private int protocol_ = 1;
    private String registrationId_ = "";
    private boolean unregister_ = false;
    
    public String getAccountHash()
    {
      return this.accountHash_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getProtocol()
    {
      return this.protocol_;
    }
    
    public String getRegistrationId()
    {
      return this.registrationId_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasRegistrationId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getRegistrationId());
      }
      if (hasUnregister()) {
        i += CodedOutputStreamMicro.computeBoolSize(2, getUnregister());
      }
      if (hasAccountHash()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getAccountHash());
      }
      if (hasProtocol()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getProtocol());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean getUnregister()
    {
      return this.unregister_;
    }
    
    public boolean hasAccountHash()
    {
      return this.hasAccountHash;
    }
    
    public boolean hasProtocol()
    {
      return this.hasProtocol;
    }
    
    public boolean hasRegistrationId()
    {
      return this.hasRegistrationId;
    }
    
    public boolean hasUnregister()
    {
      return this.hasUnregister;
    }
    
    public PushRegistration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setRegistrationId(paramCodedInputStreamMicro.readString());
          break;
        case 16: 
          setUnregister(paramCodedInputStreamMicro.readBool());
          break;
        case 26: 
          setAccountHash(paramCodedInputStreamMicro.readString());
          break;
        }
        setProtocol(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public PushRegistration setAccountHash(String paramString)
    {
      this.hasAccountHash = true;
      this.accountHash_ = paramString;
      return this;
    }
    
    public PushRegistration setProtocol(int paramInt)
    {
      this.hasProtocol = true;
      this.protocol_ = paramInt;
      return this;
    }
    
    public PushRegistration setRegistrationId(String paramString)
    {
      this.hasRegistrationId = true;
      this.registrationId_ = paramString;
      return this;
    }
    
    public PushRegistration setUnregister(boolean paramBoolean)
    {
      this.hasUnregister = true;
      this.unregister_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasRegistrationId()) {
        paramCodedOutputStreamMicro.writeString(1, getRegistrationId());
      }
      if (hasUnregister()) {
        paramCodedOutputStreamMicro.writeBool(2, getUnregister());
      }
      if (hasAccountHash()) {
        paramCodedOutputStreamMicro.writeString(3, getAccountHash());
      }
      if (hasProtocol()) {
        paramCodedOutputStreamMicro.writeInt32(4, getProtocol());
      }
    }
  }
  
  public static final class Question
    extends MessageMicro
  {
    private List<Sidekick.Action> action_ = Collections.emptyList();
    private long answerTimestampMillis_ = 0L;
    private Answer answer_ = null;
    private int cachedSize = -1;
    private ByteStringMicro encodedServerPayload_ = ByteStringMicro.EMPTY;
    private ByteStringMicro fingerprint_ = ByteStringMicro.EMPTY;
    private boolean hasAnswer;
    private boolean hasAnswerTimestampMillis;
    private boolean hasEncodedServerPayload;
    private boolean hasFingerprint;
    private boolean hasTemplateId;
    private List<Entity> justificationParameter_ = Collections.emptyList();
    private List<Entity> parameter_ = Collections.emptyList();
    private long templateId_ = 0L;
    
    public static Question parseFrom(byte[] paramArrayOfByte)
      throws InvalidProtocolBufferMicroException
    {
      return (Question)new Question().mergeFrom(paramArrayOfByte);
    }
    
    public Question addAction(Sidekick.Action paramAction)
    {
      if (paramAction == null) {
        throw new NullPointerException();
      }
      if (this.action_.isEmpty()) {
        this.action_ = new ArrayList();
      }
      this.action_.add(paramAction);
      return this;
    }
    
    public Question addJustificationParameter(Entity paramEntity)
    {
      if (paramEntity == null) {
        throw new NullPointerException();
      }
      if (this.justificationParameter_.isEmpty()) {
        this.justificationParameter_ = new ArrayList();
      }
      this.justificationParameter_.add(paramEntity);
      return this;
    }
    
    public Question addParameter(Entity paramEntity)
    {
      if (paramEntity == null) {
        throw new NullPointerException();
      }
      if (this.parameter_.isEmpty()) {
        this.parameter_ = new ArrayList();
      }
      this.parameter_.add(paramEntity);
      return this;
    }
    
    public List<Sidekick.Action> getActionList()
    {
      return this.action_;
    }
    
    public Answer getAnswer()
    {
      return this.answer_;
    }
    
    public long getAnswerTimestampMillis()
    {
      return this.answerTimestampMillis_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public ByteStringMicro getEncodedServerPayload()
    {
      return this.encodedServerPayload_;
    }
    
    public ByteStringMicro getFingerprint()
    {
      return this.fingerprint_;
    }
    
    public List<Entity> getJustificationParameterList()
    {
      return this.justificationParameter_;
    }
    
    public Entity getParameter(int paramInt)
    {
      return (Entity)this.parameter_.get(paramInt);
    }
    
    public int getParameterCount()
    {
      return this.parameter_.size();
    }
    
    public List<Entity> getParameterList()
    {
      return this.parameter_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTemplateId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getTemplateId());
      }
      Iterator localIterator1 = getParameterList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Entity)localIterator1.next());
      }
      if (hasAnswer()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getAnswer());
      }
      Iterator localIterator2 = getJustificationParameterList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, (Entity)localIterator2.next());
      }
      Iterator localIterator3 = getActionList().iterator();
      while (localIterator3.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, (Sidekick.Action)localIterator3.next());
      }
      if (hasFingerprint()) {
        i += CodedOutputStreamMicro.computeBytesSize(6, getFingerprint());
      }
      if (hasAnswerTimestampMillis()) {
        i += CodedOutputStreamMicro.computeInt64Size(7, getAnswerTimestampMillis());
      }
      if (hasEncodedServerPayload()) {
        i += CodedOutputStreamMicro.computeBytesSize(8, getEncodedServerPayload());
      }
      this.cachedSize = i;
      return i;
    }
    
    public long getTemplateId()
    {
      return this.templateId_;
    }
    
    public boolean hasAnswer()
    {
      return this.hasAnswer;
    }
    
    public boolean hasAnswerTimestampMillis()
    {
      return this.hasAnswerTimestampMillis;
    }
    
    public boolean hasEncodedServerPayload()
    {
      return this.hasEncodedServerPayload;
    }
    
    public boolean hasFingerprint()
    {
      return this.hasFingerprint;
    }
    
    public boolean hasTemplateId()
    {
      return this.hasTemplateId;
    }
    
    public Question mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setTemplateId(paramCodedInputStreamMicro.readInt64());
          break;
        case 18: 
          Entity localEntity2 = new Entity();
          paramCodedInputStreamMicro.readMessage(localEntity2);
          addParameter(localEntity2);
          break;
        case 26: 
          Answer localAnswer = new Answer();
          paramCodedInputStreamMicro.readMessage(localAnswer);
          setAnswer(localAnswer);
          break;
        case 34: 
          Entity localEntity1 = new Entity();
          paramCodedInputStreamMicro.readMessage(localEntity1);
          addJustificationParameter(localEntity1);
          break;
        case 42: 
          Sidekick.Action localAction = new Sidekick.Action();
          paramCodedInputStreamMicro.readMessage(localAction);
          addAction(localAction);
          break;
        case 50: 
          setFingerprint(paramCodedInputStreamMicro.readBytes());
          break;
        case 56: 
          setAnswerTimestampMillis(paramCodedInputStreamMicro.readInt64());
          break;
        }
        setEncodedServerPayload(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public Question setAnswer(Answer paramAnswer)
    {
      if (paramAnswer == null) {
        throw new NullPointerException();
      }
      this.hasAnswer = true;
      this.answer_ = paramAnswer;
      return this;
    }
    
    public Question setAnswerTimestampMillis(long paramLong)
    {
      this.hasAnswerTimestampMillis = true;
      this.answerTimestampMillis_ = paramLong;
      return this;
    }
    
    public Question setEncodedServerPayload(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedServerPayload = true;
      this.encodedServerPayload_ = paramByteStringMicro;
      return this;
    }
    
    public Question setFingerprint(ByteStringMicro paramByteStringMicro)
    {
      this.hasFingerprint = true;
      this.fingerprint_ = paramByteStringMicro;
      return this;
    }
    
    public Question setParameter(int paramInt, Entity paramEntity)
    {
      if (paramEntity == null) {
        throw new NullPointerException();
      }
      this.parameter_.set(paramInt, paramEntity);
      return this;
    }
    
    public Question setTemplateId(long paramLong)
    {
      this.hasTemplateId = true;
      this.templateId_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTemplateId()) {
        paramCodedOutputStreamMicro.writeInt64(1, getTemplateId());
      }
      Iterator localIterator1 = getParameterList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Entity)localIterator1.next());
      }
      if (hasAnswer()) {
        paramCodedOutputStreamMicro.writeMessage(3, getAnswer());
      }
      Iterator localIterator2 = getJustificationParameterList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(4, (Entity)localIterator2.next());
      }
      Iterator localIterator3 = getActionList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(5, (Sidekick.Action)localIterator3.next());
      }
      if (hasFingerprint()) {
        paramCodedOutputStreamMicro.writeBytes(6, getFingerprint());
      }
      if (hasAnswerTimestampMillis()) {
        paramCodedOutputStreamMicro.writeInt64(7, getAnswerTimestampMillis());
      }
      if (hasEncodedServerPayload()) {
        paramCodedOutputStreamMicro.writeBytes(8, getEncodedServerPayload());
      }
    }
    
    public static final class Answer
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasMultipleChoiceAnswer;
      private boolean hasYesNoAnswer;
      private int multipleChoiceAnswer_ = 0;
      private boolean yesNoAnswer_ = false;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getMultipleChoiceAnswer()
      {
        return this.multipleChoiceAnswer_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasYesNoAnswer();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(2, getYesNoAnswer());
        }
        if (hasMultipleChoiceAnswer()) {
          i += CodedOutputStreamMicro.computeInt32Size(3, getMultipleChoiceAnswer());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getYesNoAnswer()
      {
        return this.yesNoAnswer_;
      }
      
      public boolean hasMultipleChoiceAnswer()
      {
        return this.hasMultipleChoiceAnswer;
      }
      
      public boolean hasYesNoAnswer()
      {
        return this.hasYesNoAnswer;
      }
      
      public Answer mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 16: 
            setYesNoAnswer(paramCodedInputStreamMicro.readBool());
            break;
          }
          setMultipleChoiceAnswer(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public Answer setMultipleChoiceAnswer(int paramInt)
      {
        this.hasMultipleChoiceAnswer = true;
        this.multipleChoiceAnswer_ = paramInt;
        return this;
      }
      
      public Answer setYesNoAnswer(boolean paramBoolean)
      {
        this.hasYesNoAnswer = true;
        this.yesNoAnswer_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasYesNoAnswer()) {
          paramCodedOutputStreamMicro.writeBool(2, getYesNoAnswer());
        }
        if (hasMultipleChoiceAnswer()) {
          paramCodedOutputStreamMicro.writeInt32(3, getMultipleChoiceAnswer());
        }
      }
    }
    
    public static final class Entity
      extends MessageMicro
    {
      private int cachedSize = -1;
      private String calendarAccountHash_ = "";
      private boolean hasCalendarAccountHash;
      private boolean hasInternalApiClientId;
      private boolean hasLocationSharingContact;
      private boolean hasProgramProviderId;
      private boolean hasReminderSubscriptionId;
      private boolean hasSource;
      private boolean hasSportTeamPlayer;
      private boolean hasStockData;
      private boolean hasTvProgramId;
      private boolean hasValue;
      private boolean hasWebsiteInterest;
      private int internalApiClientId_ = 0;
      private Sidekick.SidekickConfiguration.TrafficCardSharing.LocationSharingContact locationSharingContact_ = null;
      private String programProviderId_ = "";
      private String reminderSubscriptionId_ = "";
      private int source_ = 1;
      private Sidekick.SidekickConfiguration.Sports.SportTeamPlayer sportTeamPlayer_ = null;
      private Sidekick.SidekickConfiguration.StockQuotes.StockData stockData_ = null;
      private String tvProgramId_ = "";
      private String value_ = "";
      private Sidekick.SidekickConfiguration.WebsiteUpdate.WebsiteInterest websiteInterest_ = null;
      
      public Entity clearValue()
      {
        this.hasValue = false;
        this.value_ = "";
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public String getCalendarAccountHash()
      {
        return this.calendarAccountHash_;
      }
      
      public int getInternalApiClientId()
      {
        return this.internalApiClientId_;
      }
      
      public Sidekick.SidekickConfiguration.TrafficCardSharing.LocationSharingContact getLocationSharingContact()
      {
        return this.locationSharingContact_;
      }
      
      public String getProgramProviderId()
      {
        return this.programProviderId_;
      }
      
      public String getReminderSubscriptionId()
      {
        return this.reminderSubscriptionId_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasValue();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getValue());
        }
        if (hasSportTeamPlayer()) {
          i += CodedOutputStreamMicro.computeMessageSize(2, getSportTeamPlayer());
        }
        if (hasStockData()) {
          i += CodedOutputStreamMicro.computeMessageSize(3, getStockData());
        }
        if (hasLocationSharingContact()) {
          i += CodedOutputStreamMicro.computeMessageSize(4, getLocationSharingContact());
        }
        if (hasReminderSubscriptionId()) {
          i += CodedOutputStreamMicro.computeStringSize(5, getReminderSubscriptionId());
        }
        if (hasSource()) {
          i += CodedOutputStreamMicro.computeInt32Size(7, getSource());
        }
        if (hasInternalApiClientId()) {
          i += CodedOutputStreamMicro.computeInt32Size(8, getInternalApiClientId());
        }
        if (hasCalendarAccountHash()) {
          i += CodedOutputStreamMicro.computeStringSize(9, getCalendarAccountHash());
        }
        if (hasTvProgramId()) {
          i += CodedOutputStreamMicro.computeStringSize(10, getTvProgramId());
        }
        if (hasProgramProviderId()) {
          i += CodedOutputStreamMicro.computeStringSize(11, getProgramProviderId());
        }
        if (hasWebsiteInterest()) {
          i += CodedOutputStreamMicro.computeMessageSize(12, getWebsiteInterest());
        }
        this.cachedSize = i;
        return i;
      }
      
      public int getSource()
      {
        return this.source_;
      }
      
      public Sidekick.SidekickConfiguration.Sports.SportTeamPlayer getSportTeamPlayer()
      {
        return this.sportTeamPlayer_;
      }
      
      public Sidekick.SidekickConfiguration.StockQuotes.StockData getStockData()
      {
        return this.stockData_;
      }
      
      public String getTvProgramId()
      {
        return this.tvProgramId_;
      }
      
      public String getValue()
      {
        return this.value_;
      }
      
      public Sidekick.SidekickConfiguration.WebsiteUpdate.WebsiteInterest getWebsiteInterest()
      {
        return this.websiteInterest_;
      }
      
      public boolean hasCalendarAccountHash()
      {
        return this.hasCalendarAccountHash;
      }
      
      public boolean hasInternalApiClientId()
      {
        return this.hasInternalApiClientId;
      }
      
      public boolean hasLocationSharingContact()
      {
        return this.hasLocationSharingContact;
      }
      
      public boolean hasProgramProviderId()
      {
        return this.hasProgramProviderId;
      }
      
      public boolean hasReminderSubscriptionId()
      {
        return this.hasReminderSubscriptionId;
      }
      
      public boolean hasSource()
      {
        return this.hasSource;
      }
      
      public boolean hasSportTeamPlayer()
      {
        return this.hasSportTeamPlayer;
      }
      
      public boolean hasStockData()
      {
        return this.hasStockData;
      }
      
      public boolean hasTvProgramId()
      {
        return this.hasTvProgramId;
      }
      
      public boolean hasValue()
      {
        return this.hasValue;
      }
      
      public boolean hasWebsiteInterest()
      {
        return this.hasWebsiteInterest;
      }
      
      public Entity mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setValue(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            Sidekick.SidekickConfiguration.Sports.SportTeamPlayer localSportTeamPlayer = new Sidekick.SidekickConfiguration.Sports.SportTeamPlayer();
            paramCodedInputStreamMicro.readMessage(localSportTeamPlayer);
            setSportTeamPlayer(localSportTeamPlayer);
            break;
          case 26: 
            Sidekick.SidekickConfiguration.StockQuotes.StockData localStockData = new Sidekick.SidekickConfiguration.StockQuotes.StockData();
            paramCodedInputStreamMicro.readMessage(localStockData);
            setStockData(localStockData);
            break;
          case 34: 
            Sidekick.SidekickConfiguration.TrafficCardSharing.LocationSharingContact localLocationSharingContact = new Sidekick.SidekickConfiguration.TrafficCardSharing.LocationSharingContact();
            paramCodedInputStreamMicro.readMessage(localLocationSharingContact);
            setLocationSharingContact(localLocationSharingContact);
            break;
          case 42: 
            setReminderSubscriptionId(paramCodedInputStreamMicro.readString());
            break;
          case 56: 
            setSource(paramCodedInputStreamMicro.readInt32());
            break;
          case 64: 
            setInternalApiClientId(paramCodedInputStreamMicro.readInt32());
            break;
          case 74: 
            setCalendarAccountHash(paramCodedInputStreamMicro.readString());
            break;
          case 82: 
            setTvProgramId(paramCodedInputStreamMicro.readString());
            break;
          case 90: 
            setProgramProviderId(paramCodedInputStreamMicro.readString());
            break;
          }
          Sidekick.SidekickConfiguration.WebsiteUpdate.WebsiteInterest localWebsiteInterest = new Sidekick.SidekickConfiguration.WebsiteUpdate.WebsiteInterest();
          paramCodedInputStreamMicro.readMessage(localWebsiteInterest);
          setWebsiteInterest(localWebsiteInterest);
        }
      }
      
      public Entity setCalendarAccountHash(String paramString)
      {
        this.hasCalendarAccountHash = true;
        this.calendarAccountHash_ = paramString;
        return this;
      }
      
      public Entity setInternalApiClientId(int paramInt)
      {
        this.hasInternalApiClientId = true;
        this.internalApiClientId_ = paramInt;
        return this;
      }
      
      public Entity setLocationSharingContact(Sidekick.SidekickConfiguration.TrafficCardSharing.LocationSharingContact paramLocationSharingContact)
      {
        if (paramLocationSharingContact == null) {
          throw new NullPointerException();
        }
        this.hasLocationSharingContact = true;
        this.locationSharingContact_ = paramLocationSharingContact;
        return this;
      }
      
      public Entity setProgramProviderId(String paramString)
      {
        this.hasProgramProviderId = true;
        this.programProviderId_ = paramString;
        return this;
      }
      
      public Entity setReminderSubscriptionId(String paramString)
      {
        this.hasReminderSubscriptionId = true;
        this.reminderSubscriptionId_ = paramString;
        return this;
      }
      
      public Entity setSource(int paramInt)
      {
        this.hasSource = true;
        this.source_ = paramInt;
        return this;
      }
      
      public Entity setSportTeamPlayer(Sidekick.SidekickConfiguration.Sports.SportTeamPlayer paramSportTeamPlayer)
      {
        if (paramSportTeamPlayer == null) {
          throw new NullPointerException();
        }
        this.hasSportTeamPlayer = true;
        this.sportTeamPlayer_ = paramSportTeamPlayer;
        return this;
      }
      
      public Entity setStockData(Sidekick.SidekickConfiguration.StockQuotes.StockData paramStockData)
      {
        if (paramStockData == null) {
          throw new NullPointerException();
        }
        this.hasStockData = true;
        this.stockData_ = paramStockData;
        return this;
      }
      
      public Entity setTvProgramId(String paramString)
      {
        this.hasTvProgramId = true;
        this.tvProgramId_ = paramString;
        return this;
      }
      
      public Entity setValue(String paramString)
      {
        this.hasValue = true;
        this.value_ = paramString;
        return this;
      }
      
      public Entity setWebsiteInterest(Sidekick.SidekickConfiguration.WebsiteUpdate.WebsiteInterest paramWebsiteInterest)
      {
        if (paramWebsiteInterest == null) {
          throw new NullPointerException();
        }
        this.hasWebsiteInterest = true;
        this.websiteInterest_ = paramWebsiteInterest;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasValue()) {
          paramCodedOutputStreamMicro.writeString(1, getValue());
        }
        if (hasSportTeamPlayer()) {
          paramCodedOutputStreamMicro.writeMessage(2, getSportTeamPlayer());
        }
        if (hasStockData()) {
          paramCodedOutputStreamMicro.writeMessage(3, getStockData());
        }
        if (hasLocationSharingContact()) {
          paramCodedOutputStreamMicro.writeMessage(4, getLocationSharingContact());
        }
        if (hasReminderSubscriptionId()) {
          paramCodedOutputStreamMicro.writeString(5, getReminderSubscriptionId());
        }
        if (hasSource()) {
          paramCodedOutputStreamMicro.writeInt32(7, getSource());
        }
        if (hasInternalApiClientId()) {
          paramCodedOutputStreamMicro.writeInt32(8, getInternalApiClientId());
        }
        if (hasCalendarAccountHash()) {
          paramCodedOutputStreamMicro.writeString(9, getCalendarAccountHash());
        }
        if (hasTvProgramId()) {
          paramCodedOutputStreamMicro.writeString(10, getTvProgramId());
        }
        if (hasProgramProviderId()) {
          paramCodedOutputStreamMicro.writeString(11, getProgramProviderId());
        }
        if (hasWebsiteInterest()) {
          paramCodedOutputStreamMicro.writeMessage(12, getWebsiteInterest());
        }
      }
    }
  }
  
  public static final class QuestionEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasQuestionNode;
    private Sidekick.QuestionNode questionNode_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.QuestionNode getQuestionNode()
    {
      return this.questionNode_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasQuestionNode();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(2, getQuestionNode());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasQuestionNode()
    {
      return this.hasQuestionNode;
    }
    
    public QuestionEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.QuestionNode localQuestionNode = new Sidekick.QuestionNode();
        paramCodedInputStreamMicro.readMessage(localQuestionNode);
        setQuestionNode(localQuestionNode);
      }
    }
    
    public QuestionEntry setQuestionNode(Sidekick.QuestionNode paramQuestionNode)
    {
      if (paramQuestionNode == null) {
        throw new NullPointerException();
      }
      this.hasQuestionNode = true;
      this.questionNode_ = paramQuestionNode;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasQuestionNode()) {
        paramCodedOutputStreamMicro.writeMessage(2, getQuestionNode());
      }
    }
  }
  
  public static final class QuestionNode
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<QuestionNode> child_ = Collections.emptyList();
    private boolean hasQuestion;
    private List<Sidekick.Question.Answer> parentQuestionAnswerMatch_ = Collections.emptyList();
    private Sidekick.Question question_ = null;
    
    public QuestionNode addChild(QuestionNode paramQuestionNode)
    {
      if (paramQuestionNode == null) {
        throw new NullPointerException();
      }
      if (this.child_.isEmpty()) {
        this.child_ = new ArrayList();
      }
      this.child_.add(paramQuestionNode);
      return this;
    }
    
    public QuestionNode addParentQuestionAnswerMatch(Sidekick.Question.Answer paramAnswer)
    {
      if (paramAnswer == null) {
        throw new NullPointerException();
      }
      if (this.parentQuestionAnswerMatch_.isEmpty()) {
        this.parentQuestionAnswerMatch_ = new ArrayList();
      }
      this.parentQuestionAnswerMatch_.add(paramAnswer);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public List<QuestionNode> getChildList()
    {
      return this.child_;
    }
    
    public List<Sidekick.Question.Answer> getParentQuestionAnswerMatchList()
    {
      return this.parentQuestionAnswerMatch_;
    }
    
    public Sidekick.Question getQuestion()
    {
      return this.question_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasQuestion();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getQuestion());
      }
      Iterator localIterator1 = getChildList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (QuestionNode)localIterator1.next());
      }
      Iterator localIterator2 = getParentQuestionAnswerMatchList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.Question.Answer)localIterator2.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasQuestion()
    {
      return this.hasQuestion;
    }
    
    public QuestionNode mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Question localQuestion = new Sidekick.Question();
          paramCodedInputStreamMicro.readMessage(localQuestion);
          setQuestion(localQuestion);
          break;
        case 18: 
          QuestionNode localQuestionNode = new QuestionNode();
          paramCodedInputStreamMicro.readMessage(localQuestionNode);
          addChild(localQuestionNode);
          break;
        }
        Sidekick.Question.Answer localAnswer = new Sidekick.Question.Answer();
        paramCodedInputStreamMicro.readMessage(localAnswer);
        addParentQuestionAnswerMatch(localAnswer);
      }
    }
    
    public QuestionNode setQuestion(Sidekick.Question paramQuestion)
    {
      if (paramQuestion == null) {
        throw new NullPointerException();
      }
      this.hasQuestion = true;
      this.question_ = paramQuestion;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasQuestion()) {
        paramCodedOutputStreamMicro.writeMessage(1, getQuestion());
      }
      Iterator localIterator1 = getChildList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (QuestionNode)localIterator1.next());
      }
      Iterator localIterator2 = getParentQuestionAnswerMatchList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.Question.Answer)localIterator2.next());
      }
    }
  }
  
  public static final class QuestionTemplate
    extends MessageMicro
  {
    private List<ClientActionWithIcon> actionCompanion_ = Collections.emptyList();
    private List<Integer> attribute_ = Collections.emptyList();
    private int cachedSize = -1;
    private List<ClientActionWithIcon> clientOnlyAction_ = Collections.emptyList();
    private int fulfillAction_ = 1;
    private boolean hasFulfillAction;
    private boolean hasId;
    private boolean hasJustificationStringKey;
    private boolean hasQuestionStringKey;
    private boolean hasType;
    private boolean hasYesNoQuestionClientAction;
    private long id_ = 0L;
    private String justificationStringKey_ = "";
    private List<ClientActionWithIcon> multipleChoiceAnswer_ = Collections.emptyList();
    private String questionStringKey_ = "";
    private int type_ = 1;
    private YesNoQuestionClientAction yesNoQuestionClientAction_ = null;
    
    public QuestionTemplate addActionCompanion(ClientActionWithIcon paramClientActionWithIcon)
    {
      if (paramClientActionWithIcon == null) {
        throw new NullPointerException();
      }
      if (this.actionCompanion_.isEmpty()) {
        this.actionCompanion_ = new ArrayList();
      }
      this.actionCompanion_.add(paramClientActionWithIcon);
      return this;
    }
    
    public QuestionTemplate addAttribute(int paramInt)
    {
      if (this.attribute_.isEmpty()) {
        this.attribute_ = new ArrayList();
      }
      this.attribute_.add(Integer.valueOf(paramInt));
      return this;
    }
    
    public QuestionTemplate addClientOnlyAction(ClientActionWithIcon paramClientActionWithIcon)
    {
      if (paramClientActionWithIcon == null) {
        throw new NullPointerException();
      }
      if (this.clientOnlyAction_.isEmpty()) {
        this.clientOnlyAction_ = new ArrayList();
      }
      this.clientOnlyAction_.add(paramClientActionWithIcon);
      return this;
    }
    
    public QuestionTemplate addMultipleChoiceAnswer(ClientActionWithIcon paramClientActionWithIcon)
    {
      if (paramClientActionWithIcon == null) {
        throw new NullPointerException();
      }
      if (this.multipleChoiceAnswer_.isEmpty()) {
        this.multipleChoiceAnswer_ = new ArrayList();
      }
      this.multipleChoiceAnswer_.add(paramClientActionWithIcon);
      return this;
    }
    
    public List<ClientActionWithIcon> getActionCompanionList()
    {
      return this.actionCompanion_;
    }
    
    public List<Integer> getAttributeList()
    {
      return this.attribute_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getClientOnlyActionCount()
    {
      return this.clientOnlyAction_.size();
    }
    
    public List<ClientActionWithIcon> getClientOnlyActionList()
    {
      return this.clientOnlyAction_;
    }
    
    public int getFulfillAction()
    {
      return this.fulfillAction_;
    }
    
    public long getId()
    {
      return this.id_;
    }
    
    public String getJustificationStringKey()
    {
      return this.justificationStringKey_;
    }
    
    public ClientActionWithIcon getMultipleChoiceAnswer(int paramInt)
    {
      return (ClientActionWithIcon)this.multipleChoiceAnswer_.get(paramInt);
    }
    
    public int getMultipleChoiceAnswerCount()
    {
      return this.multipleChoiceAnswer_.size();
    }
    
    public List<ClientActionWithIcon> getMultipleChoiceAnswerList()
    {
      return this.multipleChoiceAnswer_;
    }
    
    public String getQuestionStringKey()
    {
      return this.questionStringKey_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getId());
      }
      if (hasType()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getType());
      }
      if (hasQuestionStringKey()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getQuestionStringKey());
      }
      if (hasJustificationStringKey()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getJustificationStringKey());
      }
      if (hasYesNoQuestionClientAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getYesNoQuestionClientAction());
      }
      Iterator localIterator1 = getMultipleChoiceAnswerList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, (ClientActionWithIcon)localIterator1.next());
      }
      int j = 0;
      Iterator localIterator2 = getAttributeList().iterator();
      while (localIterator2.hasNext()) {
        j += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator2.next()).intValue());
      }
      int k = i + j + 1 * getAttributeList().size();
      if (hasFulfillAction()) {
        k += CodedOutputStreamMicro.computeInt32Size(9, getFulfillAction());
      }
      Iterator localIterator3 = getClientOnlyActionList().iterator();
      while (localIterator3.hasNext()) {
        k += CodedOutputStreamMicro.computeMessageSize(10, (ClientActionWithIcon)localIterator3.next());
      }
      Iterator localIterator4 = getActionCompanionList().iterator();
      while (localIterator4.hasNext()) {
        k += CodedOutputStreamMicro.computeMessageSize(11, (ClientActionWithIcon)localIterator4.next());
      }
      this.cachedSize = k;
      return k;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public YesNoQuestionClientAction getYesNoQuestionClientAction()
    {
      return this.yesNoQuestionClientAction_;
    }
    
    public boolean hasFulfillAction()
    {
      return this.hasFulfillAction;
    }
    
    public boolean hasId()
    {
      return this.hasId;
    }
    
    public boolean hasJustificationStringKey()
    {
      return this.hasJustificationStringKey;
    }
    
    public boolean hasQuestionStringKey()
    {
      return this.hasQuestionStringKey;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public boolean hasYesNoQuestionClientAction()
    {
      return this.hasYesNoQuestionClientAction;
    }
    
    public QuestionTemplate mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setId(paramCodedInputStreamMicro.readInt64());
          break;
        case 16: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        case 26: 
          setQuestionStringKey(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setJustificationStringKey(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          YesNoQuestionClientAction localYesNoQuestionClientAction = new YesNoQuestionClientAction();
          paramCodedInputStreamMicro.readMessage(localYesNoQuestionClientAction);
          setYesNoQuestionClientAction(localYesNoQuestionClientAction);
          break;
        case 50: 
          ClientActionWithIcon localClientActionWithIcon3 = new ClientActionWithIcon();
          paramCodedInputStreamMicro.readMessage(localClientActionWithIcon3);
          addMultipleChoiceAnswer(localClientActionWithIcon3);
          break;
        case 64: 
          addAttribute(paramCodedInputStreamMicro.readInt32());
          break;
        case 72: 
          setFulfillAction(paramCodedInputStreamMicro.readInt32());
          break;
        case 82: 
          ClientActionWithIcon localClientActionWithIcon2 = new ClientActionWithIcon();
          paramCodedInputStreamMicro.readMessage(localClientActionWithIcon2);
          addClientOnlyAction(localClientActionWithIcon2);
          break;
        }
        ClientActionWithIcon localClientActionWithIcon1 = new ClientActionWithIcon();
        paramCodedInputStreamMicro.readMessage(localClientActionWithIcon1);
        addActionCompanion(localClientActionWithIcon1);
      }
    }
    
    public QuestionTemplate setFulfillAction(int paramInt)
    {
      this.hasFulfillAction = true;
      this.fulfillAction_ = paramInt;
      return this;
    }
    
    public QuestionTemplate setId(long paramLong)
    {
      this.hasId = true;
      this.id_ = paramLong;
      return this;
    }
    
    public QuestionTemplate setJustificationStringKey(String paramString)
    {
      this.hasJustificationStringKey = true;
      this.justificationStringKey_ = paramString;
      return this;
    }
    
    public QuestionTemplate setQuestionStringKey(String paramString)
    {
      this.hasQuestionStringKey = true;
      this.questionStringKey_ = paramString;
      return this;
    }
    
    public QuestionTemplate setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public QuestionTemplate setYesNoQuestionClientAction(YesNoQuestionClientAction paramYesNoQuestionClientAction)
    {
      if (paramYesNoQuestionClientAction == null) {
        throw new NullPointerException();
      }
      this.hasYesNoQuestionClientAction = true;
      this.yesNoQuestionClientAction_ = paramYesNoQuestionClientAction;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasId()) {
        paramCodedOutputStreamMicro.writeInt64(1, getId());
      }
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(2, getType());
      }
      if (hasQuestionStringKey()) {
        paramCodedOutputStreamMicro.writeString(3, getQuestionStringKey());
      }
      if (hasJustificationStringKey()) {
        paramCodedOutputStreamMicro.writeString(4, getJustificationStringKey());
      }
      if (hasYesNoQuestionClientAction()) {
        paramCodedOutputStreamMicro.writeMessage(5, getYesNoQuestionClientAction());
      }
      Iterator localIterator1 = getMultipleChoiceAnswerList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(6, (ClientActionWithIcon)localIterator1.next());
      }
      Iterator localIterator2 = getAttributeList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeInt32(8, ((Integer)localIterator2.next()).intValue());
      }
      if (hasFulfillAction()) {
        paramCodedOutputStreamMicro.writeInt32(9, getFulfillAction());
      }
      Iterator localIterator3 = getClientOnlyActionList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(10, (ClientActionWithIcon)localIterator3.next());
      }
      Iterator localIterator4 = getActionCompanionList().iterator();
      while (localIterator4.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(11, (ClientActionWithIcon)localIterator4.next());
      }
    }
    
    public static final class ClientActionWithIcon
      extends MessageMicro
    {
      private int cachedSize = -1;
      private int clientAction_ = 1;
      private String displayStringKey_ = "";
      private boolean hasClientAction;
      private boolean hasDisplayStringKey;
      private boolean hasIcon;
      private int icon_ = 1;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getClientAction()
      {
        return this.clientAction_;
      }
      
      public String getDisplayStringKey()
      {
        return this.displayStringKey_;
      }
      
      public int getIcon()
      {
        return this.icon_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasDisplayStringKey();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getDisplayStringKey());
        }
        if (hasIcon()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getIcon());
        }
        if (hasClientAction()) {
          i += CodedOutputStreamMicro.computeInt32Size(3, getClientAction());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasClientAction()
      {
        return this.hasClientAction;
      }
      
      public boolean hasDisplayStringKey()
      {
        return this.hasDisplayStringKey;
      }
      
      public boolean hasIcon()
      {
        return this.hasIcon;
      }
      
      public ClientActionWithIcon mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setDisplayStringKey(paramCodedInputStreamMicro.readString());
            break;
          case 16: 
            setIcon(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setClientAction(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public ClientActionWithIcon setClientAction(int paramInt)
      {
        this.hasClientAction = true;
        this.clientAction_ = paramInt;
        return this;
      }
      
      public ClientActionWithIcon setDisplayStringKey(String paramString)
      {
        this.hasDisplayStringKey = true;
        this.displayStringKey_ = paramString;
        return this;
      }
      
      public ClientActionWithIcon setIcon(int paramInt)
      {
        this.hasIcon = true;
        this.icon_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasDisplayStringKey()) {
          paramCodedOutputStreamMicro.writeString(1, getDisplayStringKey());
        }
        if (hasIcon()) {
          paramCodedOutputStreamMicro.writeInt32(2, getIcon());
        }
        if (hasClientAction()) {
          paramCodedOutputStreamMicro.writeInt32(3, getClientAction());
        }
      }
    }
    
    public static final class YesNoQuestionClientAction
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNoAction;
      private boolean hasYesAction;
      private int noAction_ = 1;
      private int yesAction_ = 1;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getNoAction()
      {
        return this.noAction_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasYesAction();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getYesAction());
        }
        if (hasNoAction()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getNoAction());
        }
        this.cachedSize = i;
        return i;
      }
      
      public int getYesAction()
      {
        return this.yesAction_;
      }
      
      public boolean hasNoAction()
      {
        return this.hasNoAction;
      }
      
      public boolean hasYesAction()
      {
        return this.hasYesAction;
      }
      
      public YesNoQuestionClientAction mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setYesAction(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setNoAction(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public YesNoQuestionClientAction setNoAction(int paramInt)
      {
        this.hasNoAction = true;
        this.noAction_ = paramInt;
        return this;
      }
      
      public YesNoQuestionClientAction setYesAction(int paramInt)
      {
        this.hasYesAction = true;
        this.yesAction_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasYesAction()) {
          paramCodedOutputStreamMicro.writeInt32(1, getYesAction());
        }
        if (hasNoAction()) {
          paramCodedOutputStreamMicro.writeInt32(2, getNoAction());
        }
      }
    }
  }
  
  public static final class QuestionTemplates
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasMetadata;
    private Sidekick.QuestionTemplatesMetadata metadata_ = null;
    private List<Sidekick.QuestionTemplate> template_ = Collections.emptyList();
    
    public QuestionTemplates addTemplate(Sidekick.QuestionTemplate paramQuestionTemplate)
    {
      if (paramQuestionTemplate == null) {
        throw new NullPointerException();
      }
      if (this.template_.isEmpty()) {
        this.template_ = new ArrayList();
      }
      this.template_.add(paramQuestionTemplate);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.QuestionTemplatesMetadata getMetadata()
    {
      return this.metadata_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasMetadata();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getMetadata());
      }
      Iterator localIterator = getTemplateList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.QuestionTemplate)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public List<Sidekick.QuestionTemplate> getTemplateList()
    {
      return this.template_;
    }
    
    public boolean hasMetadata()
    {
      return this.hasMetadata;
    }
    
    public QuestionTemplates mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.QuestionTemplatesMetadata localQuestionTemplatesMetadata = new Sidekick.QuestionTemplatesMetadata();
          paramCodedInputStreamMicro.readMessage(localQuestionTemplatesMetadata);
          setMetadata(localQuestionTemplatesMetadata);
          break;
        }
        Sidekick.QuestionTemplate localQuestionTemplate = new Sidekick.QuestionTemplate();
        paramCodedInputStreamMicro.readMessage(localQuestionTemplate);
        addTemplate(localQuestionTemplate);
      }
    }
    
    public QuestionTemplates setMetadata(Sidekick.QuestionTemplatesMetadata paramQuestionTemplatesMetadata)
    {
      if (paramQuestionTemplatesMetadata == null) {
        throw new NullPointerException();
      }
      this.hasMetadata = true;
      this.metadata_ = paramQuestionTemplatesMetadata;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasMetadata()) {
        paramCodedOutputStreamMicro.writeMessage(1, getMetadata());
      }
      Iterator localIterator = getTemplateList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.QuestionTemplate)localIterator.next());
      }
    }
  }
  
  public static final class QuestionTemplatesMetadata
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasHash;
    private long hash_ = 0L;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getHash()
    {
      return this.hash_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasHash();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getHash());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasHash()
    {
      return this.hasHash;
    }
    
    public QuestionTemplatesMetadata mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setHash(paramCodedInputStreamMicro.readInt64());
      }
    }
    
    public QuestionTemplatesMetadata setHash(long paramLong)
    {
      this.hasHash = true;
      this.hash_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasHash()) {
        paramCodedOutputStreamMicro.writeInt64(1, getHash());
      }
    }
  }
  
  public static final class Rating
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int freshness_ = 0;
    private boolean hasFreshness;
    private boolean hasNumRatingStarsE3;
    private boolean hasNumReviews;
    private boolean hasRating;
    private boolean hasSource;
    private boolean hasUrl;
    private int numRatingStarsE3_ = 0;
    private int numReviews_ = 0;
    private String rating_ = "";
    private int source_ = 1;
    private String url_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getFreshness()
    {
      return this.freshness_;
    }
    
    public int getNumRatingStarsE3()
    {
      return this.numRatingStarsE3_;
    }
    
    public int getNumReviews()
    {
      return this.numReviews_;
    }
    
    public String getRating()
    {
      return this.rating_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSource();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getSource());
      }
      if (hasRating()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getRating());
      }
      if (hasUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getUrl());
      }
      if (hasFreshness()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getFreshness());
      }
      if (hasNumRatingStarsE3()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getNumRatingStarsE3());
      }
      if (hasNumReviews()) {
        i += CodedOutputStreamMicro.computeInt32Size(6, getNumReviews());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getSource()
    {
      return this.source_;
    }
    
    public String getUrl()
    {
      return this.url_;
    }
    
    public boolean hasFreshness()
    {
      return this.hasFreshness;
    }
    
    public boolean hasNumRatingStarsE3()
    {
      return this.hasNumRatingStarsE3;
    }
    
    public boolean hasNumReviews()
    {
      return this.hasNumReviews;
    }
    
    public boolean hasRating()
    {
      return this.hasRating;
    }
    
    public boolean hasSource()
    {
      return this.hasSource;
    }
    
    public boolean hasUrl()
    {
      return this.hasUrl;
    }
    
    public Rating mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setSource(paramCodedInputStreamMicro.readInt32());
          break;
        case 18: 
          setRating(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setUrl(paramCodedInputStreamMicro.readString());
          break;
        case 32: 
          setFreshness(paramCodedInputStreamMicro.readInt32());
          break;
        case 40: 
          setNumRatingStarsE3(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setNumReviews(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public Rating setFreshness(int paramInt)
    {
      this.hasFreshness = true;
      this.freshness_ = paramInt;
      return this;
    }
    
    public Rating setNumRatingStarsE3(int paramInt)
    {
      this.hasNumRatingStarsE3 = true;
      this.numRatingStarsE3_ = paramInt;
      return this;
    }
    
    public Rating setNumReviews(int paramInt)
    {
      this.hasNumReviews = true;
      this.numReviews_ = paramInt;
      return this;
    }
    
    public Rating setRating(String paramString)
    {
      this.hasRating = true;
      this.rating_ = paramString;
      return this;
    }
    
    public Rating setSource(int paramInt)
    {
      this.hasSource = true;
      this.source_ = paramInt;
      return this;
    }
    
    public Rating setUrl(String paramString)
    {
      this.hasUrl = true;
      this.url_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSource()) {
        paramCodedOutputStreamMicro.writeInt32(1, getSource());
      }
      if (hasRating()) {
        paramCodedOutputStreamMicro.writeString(2, getRating());
      }
      if (hasUrl()) {
        paramCodedOutputStreamMicro.writeString(3, getUrl());
      }
      if (hasFreshness()) {
        paramCodedOutputStreamMicro.writeInt32(4, getFreshness());
      }
      if (hasNumRatingStarsE3()) {
        paramCodedOutputStreamMicro.writeInt32(5, getNumRatingStarsE3());
      }
      if (hasNumReviews()) {
        paramCodedOutputStreamMicro.writeInt32(6, getNumReviews());
      }
    }
  }
  
  public static final class RealEstateEntry
    extends MessageMicro
  {
    private List<String> address_ = Collections.emptyList();
    private int cachedSize = -1;
    private String detailsUrl_ = "";
    private String forSaleSimilarListingsUrl_ = "";
    private boolean hasDetailsUrl;
    private boolean hasForSaleSimilarListingsUrl;
    private boolean hasListingTimestamp;
    private boolean hasLivingArea;
    private boolean hasLotSize;
    private boolean hasNextOpenHouseTimestamp;
    private boolean hasNumBedroomsAndBathrooms;
    private boolean hasPrice;
    private boolean hasRecentlySoldSimilarListingsUrl;
    private boolean hasSubtype;
    private boolean hasType;
    private boolean hasYearBuilt;
    private long listingTimestamp_ = 0L;
    private String livingArea_ = "";
    private String lotSize_ = "";
    private long nextOpenHouseTimestamp_ = 0L;
    private String numBedroomsAndBathrooms_ = "";
    private List<Sidekick.Photo> photo_ = Collections.emptyList();
    private String price_ = "";
    private String recentlySoldSimilarListingsUrl_ = "";
    private String subtype_ = "";
    private String type_ = "";
    private int yearBuilt_ = 0;
    
    public RealEstateEntry addAddress(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.address_.isEmpty()) {
        this.address_ = new ArrayList();
      }
      this.address_.add(paramString);
      return this;
    }
    
    public RealEstateEntry addPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      if (this.photo_.isEmpty()) {
        this.photo_ = new ArrayList();
      }
      this.photo_.add(paramPhoto);
      return this;
    }
    
    public String getAddress(int paramInt)
    {
      return (String)this.address_.get(paramInt);
    }
    
    public int getAddressCount()
    {
      return this.address_.size();
    }
    
    public List<String> getAddressList()
    {
      return this.address_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getDetailsUrl()
    {
      return this.detailsUrl_;
    }
    
    public String getForSaleSimilarListingsUrl()
    {
      return this.forSaleSimilarListingsUrl_;
    }
    
    public long getListingTimestamp()
    {
      return this.listingTimestamp_;
    }
    
    public String getLivingArea()
    {
      return this.livingArea_;
    }
    
    public String getLotSize()
    {
      return this.lotSize_;
    }
    
    public long getNextOpenHouseTimestamp()
    {
      return this.nextOpenHouseTimestamp_;
    }
    
    public String getNumBedroomsAndBathrooms()
    {
      return this.numBedroomsAndBathrooms_;
    }
    
    public Sidekick.Photo getPhoto(int paramInt)
    {
      return (Sidekick.Photo)this.photo_.get(paramInt);
    }
    
    public int getPhotoCount()
    {
      return this.photo_.size();
    }
    
    public List<Sidekick.Photo> getPhotoList()
    {
      return this.photo_;
    }
    
    public String getPrice()
    {
      return this.price_;
    }
    
    public String getRecentlySoldSimilarListingsUrl()
    {
      return this.recentlySoldSimilarListingsUrl_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator1 = getAddressList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator1.next());
      }
      int j = 0 + i + 1 * getAddressList().size();
      Iterator localIterator2 = getPhotoList().iterator();
      while (localIterator2.hasNext()) {
        j += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.Photo)localIterator2.next());
      }
      if (hasType()) {
        j += CodedOutputStreamMicro.computeStringSize(3, getType());
      }
      if (hasSubtype()) {
        j += CodedOutputStreamMicro.computeStringSize(4, getSubtype());
      }
      if (hasYearBuilt()) {
        j += CodedOutputStreamMicro.computeInt32Size(5, getYearBuilt());
      }
      if (hasLivingArea()) {
        j += CodedOutputStreamMicro.computeStringSize(6, getLivingArea());
      }
      if (hasLotSize()) {
        j += CodedOutputStreamMicro.computeStringSize(7, getLotSize());
      }
      if (hasNumBedroomsAndBathrooms()) {
        j += CodedOutputStreamMicro.computeStringSize(8, getNumBedroomsAndBathrooms());
      }
      if (hasDetailsUrl()) {
        j += CodedOutputStreamMicro.computeStringSize(9, getDetailsUrl());
      }
      if (hasPrice()) {
        j += CodedOutputStreamMicro.computeStringSize(10, getPrice());
      }
      if (hasListingTimestamp()) {
        j += CodedOutputStreamMicro.computeInt64Size(11, getListingTimestamp());
      }
      if (hasNextOpenHouseTimestamp()) {
        j += CodedOutputStreamMicro.computeInt64Size(12, getNextOpenHouseTimestamp());
      }
      if (hasForSaleSimilarListingsUrl()) {
        j += CodedOutputStreamMicro.computeStringSize(13, getForSaleSimilarListingsUrl());
      }
      if (hasRecentlySoldSimilarListingsUrl()) {
        j += CodedOutputStreamMicro.computeStringSize(14, getRecentlySoldSimilarListingsUrl());
      }
      this.cachedSize = j;
      return j;
    }
    
    public String getSubtype()
    {
      return this.subtype_;
    }
    
    public String getType()
    {
      return this.type_;
    }
    
    public int getYearBuilt()
    {
      return this.yearBuilt_;
    }
    
    public boolean hasDetailsUrl()
    {
      return this.hasDetailsUrl;
    }
    
    public boolean hasForSaleSimilarListingsUrl()
    {
      return this.hasForSaleSimilarListingsUrl;
    }
    
    public boolean hasListingTimestamp()
    {
      return this.hasListingTimestamp;
    }
    
    public boolean hasLivingArea()
    {
      return this.hasLivingArea;
    }
    
    public boolean hasLotSize()
    {
      return this.hasLotSize;
    }
    
    public boolean hasNextOpenHouseTimestamp()
    {
      return this.hasNextOpenHouseTimestamp;
    }
    
    public boolean hasNumBedroomsAndBathrooms()
    {
      return this.hasNumBedroomsAndBathrooms;
    }
    
    public boolean hasPrice()
    {
      return this.hasPrice;
    }
    
    public boolean hasRecentlySoldSimilarListingsUrl()
    {
      return this.hasRecentlySoldSimilarListingsUrl;
    }
    
    public boolean hasSubtype()
    {
      return this.hasSubtype;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public boolean hasYearBuilt()
    {
      return this.hasYearBuilt;
    }
    
    public RealEstateEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          addAddress(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          addPhoto(localPhoto);
          break;
        case 26: 
          setType(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setSubtype(paramCodedInputStreamMicro.readString());
          break;
        case 40: 
          setYearBuilt(paramCodedInputStreamMicro.readInt32());
          break;
        case 50: 
          setLivingArea(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          setLotSize(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          setNumBedroomsAndBathrooms(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          setDetailsUrl(paramCodedInputStreamMicro.readString());
          break;
        case 82: 
          setPrice(paramCodedInputStreamMicro.readString());
          break;
        case 88: 
          setListingTimestamp(paramCodedInputStreamMicro.readInt64());
          break;
        case 96: 
          setNextOpenHouseTimestamp(paramCodedInputStreamMicro.readInt64());
          break;
        case 106: 
          setForSaleSimilarListingsUrl(paramCodedInputStreamMicro.readString());
          break;
        }
        setRecentlySoldSimilarListingsUrl(paramCodedInputStreamMicro.readString());
      }
    }
    
    public RealEstateEntry setDetailsUrl(String paramString)
    {
      this.hasDetailsUrl = true;
      this.detailsUrl_ = paramString;
      return this;
    }
    
    public RealEstateEntry setForSaleSimilarListingsUrl(String paramString)
    {
      this.hasForSaleSimilarListingsUrl = true;
      this.forSaleSimilarListingsUrl_ = paramString;
      return this;
    }
    
    public RealEstateEntry setListingTimestamp(long paramLong)
    {
      this.hasListingTimestamp = true;
      this.listingTimestamp_ = paramLong;
      return this;
    }
    
    public RealEstateEntry setLivingArea(String paramString)
    {
      this.hasLivingArea = true;
      this.livingArea_ = paramString;
      return this;
    }
    
    public RealEstateEntry setLotSize(String paramString)
    {
      this.hasLotSize = true;
      this.lotSize_ = paramString;
      return this;
    }
    
    public RealEstateEntry setNextOpenHouseTimestamp(long paramLong)
    {
      this.hasNextOpenHouseTimestamp = true;
      this.nextOpenHouseTimestamp_ = paramLong;
      return this;
    }
    
    public RealEstateEntry setNumBedroomsAndBathrooms(String paramString)
    {
      this.hasNumBedroomsAndBathrooms = true;
      this.numBedroomsAndBathrooms_ = paramString;
      return this;
    }
    
    public RealEstateEntry setPrice(String paramString)
    {
      this.hasPrice = true;
      this.price_ = paramString;
      return this;
    }
    
    public RealEstateEntry setRecentlySoldSimilarListingsUrl(String paramString)
    {
      this.hasRecentlySoldSimilarListingsUrl = true;
      this.recentlySoldSimilarListingsUrl_ = paramString;
      return this;
    }
    
    public RealEstateEntry setSubtype(String paramString)
    {
      this.hasSubtype = true;
      this.subtype_ = paramString;
      return this;
    }
    
    public RealEstateEntry setType(String paramString)
    {
      this.hasType = true;
      this.type_ = paramString;
      return this;
    }
    
    public RealEstateEntry setYearBuilt(int paramInt)
    {
      this.hasYearBuilt = true;
      this.yearBuilt_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator1 = getAddressList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeString(1, (String)localIterator1.next());
      }
      Iterator localIterator2 = getPhotoList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.Photo)localIterator2.next());
      }
      if (hasType()) {
        paramCodedOutputStreamMicro.writeString(3, getType());
      }
      if (hasSubtype()) {
        paramCodedOutputStreamMicro.writeString(4, getSubtype());
      }
      if (hasYearBuilt()) {
        paramCodedOutputStreamMicro.writeInt32(5, getYearBuilt());
      }
      if (hasLivingArea()) {
        paramCodedOutputStreamMicro.writeString(6, getLivingArea());
      }
      if (hasLotSize()) {
        paramCodedOutputStreamMicro.writeString(7, getLotSize());
      }
      if (hasNumBedroomsAndBathrooms()) {
        paramCodedOutputStreamMicro.writeString(8, getNumBedroomsAndBathrooms());
      }
      if (hasDetailsUrl()) {
        paramCodedOutputStreamMicro.writeString(9, getDetailsUrl());
      }
      if (hasPrice()) {
        paramCodedOutputStreamMicro.writeString(10, getPrice());
      }
      if (hasListingTimestamp()) {
        paramCodedOutputStreamMicro.writeInt64(11, getListingTimestamp());
      }
      if (hasNextOpenHouseTimestamp()) {
        paramCodedOutputStreamMicro.writeInt64(12, getNextOpenHouseTimestamp());
      }
      if (hasForSaleSimilarListingsUrl()) {
        paramCodedOutputStreamMicro.writeString(13, getForSaleSimilarListingsUrl());
      }
      if (hasRecentlySoldSimilarListingsUrl()) {
        paramCodedOutputStreamMicro.writeString(14, getRecentlySoldSimilarListingsUrl());
      }
    }
  }
  
  public static final class RecognizedName
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasMatchConfidence;
    private boolean hasValue;
    private float matchConfidence_ = 0.0F;
    private String value_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public float getMatchConfidence()
    {
      return this.matchConfidence_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasValue();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getValue());
      }
      if (hasMatchConfidence()) {
        i += CodedOutputStreamMicro.computeFloatSize(2, getMatchConfidence());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getValue()
    {
      return this.value_;
    }
    
    public boolean hasMatchConfidence()
    {
      return this.hasMatchConfidence;
    }
    
    public boolean hasValue()
    {
      return this.hasValue;
    }
    
    public RecognizedName mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setValue(paramCodedInputStreamMicro.readString());
          break;
        }
        setMatchConfidence(paramCodedInputStreamMicro.readFloat());
      }
    }
    
    public RecognizedName setMatchConfidence(float paramFloat)
    {
      this.hasMatchConfidence = true;
      this.matchConfidence_ = paramFloat;
      return this;
    }
    
    public RecognizedName setValue(String paramString)
    {
      this.hasValue = true;
      this.value_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasValue()) {
        paramCodedOutputStreamMicro.writeString(1, getValue());
      }
      if (hasMatchConfidence()) {
        paramCodedOutputStreamMicro.writeFloat(2, getMatchConfidence());
      }
    }
  }
  
  public static final class RelevantWebsiteEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasImage;
    private boolean hasTitle;
    private boolean hasUrl;
    private Sidekick.Photo image_ = null;
    private String title_ = "";
    private String url_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getUrl());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getImage());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public String getUrl()
    {
      return this.url_;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasUrl()
    {
      return this.hasUrl;
    }
    
    public RelevantWebsiteEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setUrl(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.Photo localPhoto = new Sidekick.Photo();
        paramCodedInputStreamMicro.readMessage(localPhoto);
        setImage(localPhoto);
      }
    }
    
    public RelevantWebsiteEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public RelevantWebsiteEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public RelevantWebsiteEntry setUrl(String paramString)
    {
      this.hasUrl = true;
      this.url_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasUrl()) {
        paramCodedOutputStreamMicro.writeString(2, getUrl());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(3, getImage());
      }
    }
  }
  
  public static final class ReminderData
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String formattedEventDate_ = "";
    private boolean hasFormattedEventDate;
    private boolean hasReminderMessage;
    private boolean hasSnoozeMessage;
    private boolean hasTaskId;
    private String reminderMessage_ = "";
    private List<SmartActionData> smartActionData_ = Collections.emptyList();
    private String snoozeMessage_ = "";
    private String taskId_ = "";
    
    public ReminderData addSmartActionData(SmartActionData paramSmartActionData)
    {
      if (paramSmartActionData == null) {
        throw new NullPointerException();
      }
      if (this.smartActionData_.isEmpty()) {
        this.smartActionData_ = new ArrayList();
      }
      this.smartActionData_.add(paramSmartActionData);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getFormattedEventDate()
    {
      return this.formattedEventDate_;
    }
    
    public String getReminderMessage()
    {
      return this.reminderMessage_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTaskId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTaskId());
      }
      if (hasFormattedEventDate()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getFormattedEventDate());
      }
      if (hasReminderMessage()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getReminderMessage());
      }
      if (hasSnoozeMessage()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getSnoozeMessage());
      }
      Iterator localIterator = getSmartActionDataList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, (SmartActionData)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getSmartActionDataCount()
    {
      return this.smartActionData_.size();
    }
    
    public List<SmartActionData> getSmartActionDataList()
    {
      return this.smartActionData_;
    }
    
    public String getSnoozeMessage()
    {
      return this.snoozeMessage_;
    }
    
    public String getTaskId()
    {
      return this.taskId_;
    }
    
    public boolean hasFormattedEventDate()
    {
      return this.hasFormattedEventDate;
    }
    
    public boolean hasReminderMessage()
    {
      return this.hasReminderMessage;
    }
    
    public boolean hasSnoozeMessage()
    {
      return this.hasSnoozeMessage;
    }
    
    public boolean hasTaskId()
    {
      return this.hasTaskId;
    }
    
    public ReminderData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTaskId(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setFormattedEventDate(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setReminderMessage(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setSnoozeMessage(paramCodedInputStreamMicro.readString());
          break;
        }
        SmartActionData localSmartActionData = new SmartActionData();
        paramCodedInputStreamMicro.readMessage(localSmartActionData);
        addSmartActionData(localSmartActionData);
      }
    }
    
    public ReminderData setFormattedEventDate(String paramString)
    {
      this.hasFormattedEventDate = true;
      this.formattedEventDate_ = paramString;
      return this;
    }
    
    public ReminderData setReminderMessage(String paramString)
    {
      this.hasReminderMessage = true;
      this.reminderMessage_ = paramString;
      return this;
    }
    
    public ReminderData setSnoozeMessage(String paramString)
    {
      this.hasSnoozeMessage = true;
      this.snoozeMessage_ = paramString;
      return this;
    }
    
    public ReminderData setTaskId(String paramString)
    {
      this.hasTaskId = true;
      this.taskId_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTaskId()) {
        paramCodedOutputStreamMicro.writeString(1, getTaskId());
      }
      if (hasFormattedEventDate()) {
        paramCodedOutputStreamMicro.writeString(2, getFormattedEventDate());
      }
      if (hasReminderMessage()) {
        paramCodedOutputStreamMicro.writeString(3, getReminderMessage());
      }
      if (hasSnoozeMessage()) {
        paramCodedOutputStreamMicro.writeString(4, getSnoozeMessage());
      }
      Iterator localIterator = getSmartActionDataList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(5, (SmartActionData)localIterator.next());
      }
    }
    
    public static final class SmartActionData
      extends MessageMicro
    {
      private int cachedSize = -1;
      private Sidekick.ContactReference contactReference_ = null;
      private boolean hasContactReference;
      private boolean hasQuery;
      private boolean hasType;
      private String query_ = "";
      private int type_ = 1;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.ContactReference getContactReference()
      {
        return this.contactReference_;
      }
      
      public String getQuery()
      {
        return this.query_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasType();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getType());
        }
        if (hasContactReference()) {
          i += CodedOutputStreamMicro.computeMessageSize(2, getContactReference());
        }
        if (hasQuery()) {
          i += CodedOutputStreamMicro.computeStringSize(3, getQuery());
        }
        this.cachedSize = i;
        return i;
      }
      
      public int getType()
      {
        return this.type_;
      }
      
      public boolean hasContactReference()
      {
        return this.hasContactReference;
      }
      
      public boolean hasQuery()
      {
        return this.hasQuery;
      }
      
      public boolean hasType()
      {
        return this.hasType;
      }
      
      public SmartActionData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setType(paramCodedInputStreamMicro.readInt32());
            break;
          case 18: 
            Sidekick.ContactReference localContactReference = new Sidekick.ContactReference();
            paramCodedInputStreamMicro.readMessage(localContactReference);
            setContactReference(localContactReference);
            break;
          }
          setQuery(paramCodedInputStreamMicro.readString());
        }
      }
      
      public SmartActionData setContactReference(Sidekick.ContactReference paramContactReference)
      {
        if (paramContactReference == null) {
          throw new NullPointerException();
        }
        this.hasContactReference = true;
        this.contactReference_ = paramContactReference;
        return this;
      }
      
      public SmartActionData setQuery(String paramString)
      {
        this.hasQuery = true;
        this.query_ = paramString;
        return this;
      }
      
      public SmartActionData setType(int paramInt)
      {
        this.hasType = true;
        this.type_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasType()) {
          paramCodedOutputStreamMicro.writeInt32(1, getType());
        }
        if (hasContactReference()) {
          paramCodedOutputStreamMicro.writeMessage(2, getContactReference());
        }
        if (hasQuery()) {
          paramCodedOutputStreamMicro.writeString(3, getQuery());
        }
      }
    }
  }
  
  public static final class ReminderEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private int dayPart_ = 1;
    private boolean hasDayPart;
    private boolean hasImage;
    private boolean hasLocation;
    private boolean hasRecurrenceInfo;
    private boolean hasReminderMessage;
    private boolean hasResolution;
    private boolean hasState;
    private boolean hasSubtitle;
    private boolean hasTaskId;
    private boolean hasTriggerTimeSeconds;
    private boolean hasTriggeringMessage;
    private Sidekick.Photo image_ = null;
    private Sidekick.Location location_ = null;
    private RecurrenceInfo recurrenceInfo_ = null;
    private String reminderMessage_ = "";
    private int resolution_ = 1;
    private int state_ = 1;
    private String subtitle_ = "";
    private String taskId_ = "";
    private long triggerTimeSeconds_ = 0L;
    private String triggeringMessage_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getDayPart()
    {
      return this.dayPart_;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public RecurrenceInfo getRecurrenceInfo()
    {
      return this.recurrenceInfo_;
    }
    
    public String getReminderMessage()
    {
      return this.reminderMessage_;
    }
    
    public int getResolution()
    {
      return this.resolution_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTaskId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTaskId());
      }
      if (hasReminderMessage()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getReminderMessage());
      }
      if (hasTriggeringMessage()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getTriggeringMessage());
      }
      if (hasTriggerTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(4, getTriggerTimeSeconds());
      }
      if (hasResolution()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getResolution());
      }
      if (hasDayPart()) {
        i += CodedOutputStreamMicro.computeInt32Size(6, getDayPart());
      }
      if (hasState()) {
        i += CodedOutputStreamMicro.computeInt32Size(7, getState());
      }
      if (hasSubtitle()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getSubtitle());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getImage());
      }
      if (hasLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getLocation());
      }
      if (hasRecurrenceInfo()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, getRecurrenceInfo());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getState()
    {
      return this.state_;
    }
    
    public String getSubtitle()
    {
      return this.subtitle_;
    }
    
    public String getTaskId()
    {
      return this.taskId_;
    }
    
    public long getTriggerTimeSeconds()
    {
      return this.triggerTimeSeconds_;
    }
    
    public String getTriggeringMessage()
    {
      return this.triggeringMessage_;
    }
    
    public boolean hasDayPart()
    {
      return this.hasDayPart;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasRecurrenceInfo()
    {
      return this.hasRecurrenceInfo;
    }
    
    public boolean hasReminderMessage()
    {
      return this.hasReminderMessage;
    }
    
    public boolean hasResolution()
    {
      return this.hasResolution;
    }
    
    public boolean hasState()
    {
      return this.hasState;
    }
    
    public boolean hasSubtitle()
    {
      return this.hasSubtitle;
    }
    
    public boolean hasTaskId()
    {
      return this.hasTaskId;
    }
    
    public boolean hasTriggerTimeSeconds()
    {
      return this.hasTriggerTimeSeconds;
    }
    
    public boolean hasTriggeringMessage()
    {
      return this.hasTriggeringMessage;
    }
    
    public ReminderEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTaskId(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setReminderMessage(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setTriggeringMessage(paramCodedInputStreamMicro.readString());
          break;
        case 32: 
          setTriggerTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 40: 
          setResolution(paramCodedInputStreamMicro.readInt32());
          break;
        case 48: 
          setDayPart(paramCodedInputStreamMicro.readInt32());
          break;
        case 56: 
          setState(paramCodedInputStreamMicro.readInt32());
          break;
        case 66: 
          setSubtitle(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 82: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        }
        RecurrenceInfo localRecurrenceInfo = new RecurrenceInfo();
        paramCodedInputStreamMicro.readMessage(localRecurrenceInfo);
        setRecurrenceInfo(localRecurrenceInfo);
      }
    }
    
    public ReminderEntry setDayPart(int paramInt)
    {
      this.hasDayPart = true;
      this.dayPart_ = paramInt;
      return this;
    }
    
    public ReminderEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public ReminderEntry setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public ReminderEntry setRecurrenceInfo(RecurrenceInfo paramRecurrenceInfo)
    {
      if (paramRecurrenceInfo == null) {
        throw new NullPointerException();
      }
      this.hasRecurrenceInfo = true;
      this.recurrenceInfo_ = paramRecurrenceInfo;
      return this;
    }
    
    public ReminderEntry setReminderMessage(String paramString)
    {
      this.hasReminderMessage = true;
      this.reminderMessage_ = paramString;
      return this;
    }
    
    public ReminderEntry setResolution(int paramInt)
    {
      this.hasResolution = true;
      this.resolution_ = paramInt;
      return this;
    }
    
    public ReminderEntry setState(int paramInt)
    {
      this.hasState = true;
      this.state_ = paramInt;
      return this;
    }
    
    public ReminderEntry setSubtitle(String paramString)
    {
      this.hasSubtitle = true;
      this.subtitle_ = paramString;
      return this;
    }
    
    public ReminderEntry setTaskId(String paramString)
    {
      this.hasTaskId = true;
      this.taskId_ = paramString;
      return this;
    }
    
    public ReminderEntry setTriggerTimeSeconds(long paramLong)
    {
      this.hasTriggerTimeSeconds = true;
      this.triggerTimeSeconds_ = paramLong;
      return this;
    }
    
    public ReminderEntry setTriggeringMessage(String paramString)
    {
      this.hasTriggeringMessage = true;
      this.triggeringMessage_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTaskId()) {
        paramCodedOutputStreamMicro.writeString(1, getTaskId());
      }
      if (hasReminderMessage()) {
        paramCodedOutputStreamMicro.writeString(2, getReminderMessage());
      }
      if (hasTriggeringMessage()) {
        paramCodedOutputStreamMicro.writeString(3, getTriggeringMessage());
      }
      if (hasTriggerTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(4, getTriggerTimeSeconds());
      }
      if (hasResolution()) {
        paramCodedOutputStreamMicro.writeInt32(5, getResolution());
      }
      if (hasDayPart()) {
        paramCodedOutputStreamMicro.writeInt32(6, getDayPart());
      }
      if (hasState()) {
        paramCodedOutputStreamMicro.writeInt32(7, getState());
      }
      if (hasSubtitle()) {
        paramCodedOutputStreamMicro.writeString(8, getSubtitle());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(9, getImage());
      }
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(10, getLocation());
      }
      if (hasRecurrenceInfo()) {
        paramCodedOutputStreamMicro.writeMessage(11, getRecurrenceInfo());
      }
    }
    
    public static final class RecurrenceInfo
      extends MessageMicro
    {
      private int cachedSize = -1;
      private DailyPattern dailyPattern_ = null;
      private long endMillis_ = 0L;
      private int every_ = 1;
      private int frequency_ = 0;
      private boolean hasDailyPattern;
      private boolean hasEndMillis;
      private boolean hasEvery;
      private boolean hasFrequency;
      private boolean hasMonthlyPattern;
      private boolean hasNumOccurrences;
      private boolean hasRecurrenceId;
      private boolean hasStartMillis;
      private boolean hasWeeklyPattern;
      private boolean hasYearlyPattern;
      private MonthlyPattern monthlyPattern_ = null;
      private int numOccurrences_ = 0;
      private String recurrenceId_ = "";
      private long startMillis_ = 0L;
      private WeeklyPattern weeklyPattern_ = null;
      private YearlyPattern yearlyPattern_ = null;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public DailyPattern getDailyPattern()
      {
        return this.dailyPattern_;
      }
      
      public long getEndMillis()
      {
        return this.endMillis_;
      }
      
      public int getEvery()
      {
        return this.every_;
      }
      
      public int getFrequency()
      {
        return this.frequency_;
      }
      
      public MonthlyPattern getMonthlyPattern()
      {
        return this.monthlyPattern_;
      }
      
      public int getNumOccurrences()
      {
        return this.numOccurrences_;
      }
      
      public String getRecurrenceId()
      {
        return this.recurrenceId_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasRecurrenceId();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getRecurrenceId());
        }
        if (hasFrequency()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getFrequency());
        }
        if (hasEvery()) {
          i += CodedOutputStreamMicro.computeInt32Size(3, getEvery());
        }
        if (hasStartMillis()) {
          i += CodedOutputStreamMicro.computeInt64Size(4, getStartMillis());
        }
        if (hasEndMillis()) {
          i += CodedOutputStreamMicro.computeInt64Size(5, getEndMillis());
        }
        if (hasNumOccurrences()) {
          i += CodedOutputStreamMicro.computeInt32Size(6, getNumOccurrences());
        }
        if (hasDailyPattern()) {
          i += CodedOutputStreamMicro.computeMessageSize(7, getDailyPattern());
        }
        if (hasWeeklyPattern()) {
          i += CodedOutputStreamMicro.computeMessageSize(8, getWeeklyPattern());
        }
        if (hasMonthlyPattern()) {
          i += CodedOutputStreamMicro.computeMessageSize(9, getMonthlyPattern());
        }
        if (hasYearlyPattern()) {
          i += CodedOutputStreamMicro.computeMessageSize(10, getYearlyPattern());
        }
        this.cachedSize = i;
        return i;
      }
      
      public long getStartMillis()
      {
        return this.startMillis_;
      }
      
      public WeeklyPattern getWeeklyPattern()
      {
        return this.weeklyPattern_;
      }
      
      public YearlyPattern getYearlyPattern()
      {
        return this.yearlyPattern_;
      }
      
      public boolean hasDailyPattern()
      {
        return this.hasDailyPattern;
      }
      
      public boolean hasEndMillis()
      {
        return this.hasEndMillis;
      }
      
      public boolean hasEvery()
      {
        return this.hasEvery;
      }
      
      public boolean hasFrequency()
      {
        return this.hasFrequency;
      }
      
      public boolean hasMonthlyPattern()
      {
        return this.hasMonthlyPattern;
      }
      
      public boolean hasNumOccurrences()
      {
        return this.hasNumOccurrences;
      }
      
      public boolean hasRecurrenceId()
      {
        return this.hasRecurrenceId;
      }
      
      public boolean hasStartMillis()
      {
        return this.hasStartMillis;
      }
      
      public boolean hasWeeklyPattern()
      {
        return this.hasWeeklyPattern;
      }
      
      public boolean hasYearlyPattern()
      {
        return this.hasYearlyPattern;
      }
      
      public RecurrenceInfo mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setRecurrenceId(paramCodedInputStreamMicro.readString());
            break;
          case 16: 
            setFrequency(paramCodedInputStreamMicro.readInt32());
            break;
          case 24: 
            setEvery(paramCodedInputStreamMicro.readInt32());
            break;
          case 32: 
            setStartMillis(paramCodedInputStreamMicro.readInt64());
            break;
          case 40: 
            setEndMillis(paramCodedInputStreamMicro.readInt64());
            break;
          case 48: 
            setNumOccurrences(paramCodedInputStreamMicro.readInt32());
            break;
          case 58: 
            DailyPattern localDailyPattern = new DailyPattern();
            paramCodedInputStreamMicro.readMessage(localDailyPattern);
            setDailyPattern(localDailyPattern);
            break;
          case 66: 
            WeeklyPattern localWeeklyPattern = new WeeklyPattern();
            paramCodedInputStreamMicro.readMessage(localWeeklyPattern);
            setWeeklyPattern(localWeeklyPattern);
            break;
          case 74: 
            MonthlyPattern localMonthlyPattern = new MonthlyPattern();
            paramCodedInputStreamMicro.readMessage(localMonthlyPattern);
            setMonthlyPattern(localMonthlyPattern);
            break;
          }
          YearlyPattern localYearlyPattern = new YearlyPattern();
          paramCodedInputStreamMicro.readMessage(localYearlyPattern);
          setYearlyPattern(localYearlyPattern);
        }
      }
      
      public RecurrenceInfo setDailyPattern(DailyPattern paramDailyPattern)
      {
        if (paramDailyPattern == null) {
          throw new NullPointerException();
        }
        this.hasDailyPattern = true;
        this.dailyPattern_ = paramDailyPattern;
        return this;
      }
      
      public RecurrenceInfo setEndMillis(long paramLong)
      {
        this.hasEndMillis = true;
        this.endMillis_ = paramLong;
        return this;
      }
      
      public RecurrenceInfo setEvery(int paramInt)
      {
        this.hasEvery = true;
        this.every_ = paramInt;
        return this;
      }
      
      public RecurrenceInfo setFrequency(int paramInt)
      {
        this.hasFrequency = true;
        this.frequency_ = paramInt;
        return this;
      }
      
      public RecurrenceInfo setMonthlyPattern(MonthlyPattern paramMonthlyPattern)
      {
        if (paramMonthlyPattern == null) {
          throw new NullPointerException();
        }
        this.hasMonthlyPattern = true;
        this.monthlyPattern_ = paramMonthlyPattern;
        return this;
      }
      
      public RecurrenceInfo setNumOccurrences(int paramInt)
      {
        this.hasNumOccurrences = true;
        this.numOccurrences_ = paramInt;
        return this;
      }
      
      public RecurrenceInfo setRecurrenceId(String paramString)
      {
        this.hasRecurrenceId = true;
        this.recurrenceId_ = paramString;
        return this;
      }
      
      public RecurrenceInfo setStartMillis(long paramLong)
      {
        this.hasStartMillis = true;
        this.startMillis_ = paramLong;
        return this;
      }
      
      public RecurrenceInfo setWeeklyPattern(WeeklyPattern paramWeeklyPattern)
      {
        if (paramWeeklyPattern == null) {
          throw new NullPointerException();
        }
        this.hasWeeklyPattern = true;
        this.weeklyPattern_ = paramWeeklyPattern;
        return this;
      }
      
      public RecurrenceInfo setYearlyPattern(YearlyPattern paramYearlyPattern)
      {
        if (paramYearlyPattern == null) {
          throw new NullPointerException();
        }
        this.hasYearlyPattern = true;
        this.yearlyPattern_ = paramYearlyPattern;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasRecurrenceId()) {
          paramCodedOutputStreamMicro.writeString(1, getRecurrenceId());
        }
        if (hasFrequency()) {
          paramCodedOutputStreamMicro.writeInt32(2, getFrequency());
        }
        if (hasEvery()) {
          paramCodedOutputStreamMicro.writeInt32(3, getEvery());
        }
        if (hasStartMillis()) {
          paramCodedOutputStreamMicro.writeInt64(4, getStartMillis());
        }
        if (hasEndMillis()) {
          paramCodedOutputStreamMicro.writeInt64(5, getEndMillis());
        }
        if (hasNumOccurrences()) {
          paramCodedOutputStreamMicro.writeInt32(6, getNumOccurrences());
        }
        if (hasDailyPattern()) {
          paramCodedOutputStreamMicro.writeMessage(7, getDailyPattern());
        }
        if (hasWeeklyPattern()) {
          paramCodedOutputStreamMicro.writeMessage(8, getWeeklyPattern());
        }
        if (hasMonthlyPattern()) {
          paramCodedOutputStreamMicro.writeMessage(9, getMonthlyPattern());
        }
        if (hasYearlyPattern()) {
          paramCodedOutputStreamMicro.writeMessage(10, getYearlyPattern());
        }
      }
      
      public static final class DailyPattern
        extends MessageMicro
      {
        private int cachedSize = -1;
        private int dayPart_ = 1;
        private boolean hasDayPart;
        private boolean hasHour;
        private boolean hasMinute;
        private boolean hasSecond;
        private int hour_ = 0;
        private int minute_ = 0;
        private int second_ = 0;
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public int getDayPart()
        {
          return this.dayPart_;
        }
        
        public int getHour()
        {
          return this.hour_;
        }
        
        public int getMinute()
        {
          return this.minute_;
        }
        
        public int getSecond()
        {
          return this.second_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasHour();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getHour());
          }
          if (hasMinute()) {
            i += CodedOutputStreamMicro.computeInt32Size(2, getMinute());
          }
          if (hasSecond()) {
            i += CodedOutputStreamMicro.computeInt32Size(3, getSecond());
          }
          if (hasDayPart()) {
            i += CodedOutputStreamMicro.computeInt32Size(4, getDayPart());
          }
          this.cachedSize = i;
          return i;
        }
        
        public boolean hasDayPart()
        {
          return this.hasDayPart;
        }
        
        public boolean hasHour()
        {
          return this.hasHour;
        }
        
        public boolean hasMinute()
        {
          return this.hasMinute;
        }
        
        public boolean hasSecond()
        {
          return this.hasSecond;
        }
        
        public DailyPattern mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 8: 
              setHour(paramCodedInputStreamMicro.readInt32());
              break;
            case 16: 
              setMinute(paramCodedInputStreamMicro.readInt32());
              break;
            case 24: 
              setSecond(paramCodedInputStreamMicro.readInt32());
              break;
            }
            setDayPart(paramCodedInputStreamMicro.readInt32());
          }
        }
        
        public DailyPattern setDayPart(int paramInt)
        {
          this.hasDayPart = true;
          this.dayPart_ = paramInt;
          return this;
        }
        
        public DailyPattern setHour(int paramInt)
        {
          this.hasHour = true;
          this.hour_ = paramInt;
          return this;
        }
        
        public DailyPattern setMinute(int paramInt)
        {
          this.hasMinute = true;
          this.minute_ = paramInt;
          return this;
        }
        
        public DailyPattern setSecond(int paramInt)
        {
          this.hasSecond = true;
          this.second_ = paramInt;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasHour()) {
            paramCodedOutputStreamMicro.writeInt32(1, getHour());
          }
          if (hasMinute()) {
            paramCodedOutputStreamMicro.writeInt32(2, getMinute());
          }
          if (hasSecond()) {
            paramCodedOutputStreamMicro.writeInt32(3, getSecond());
          }
          if (hasDayPart()) {
            paramCodedOutputStreamMicro.writeInt32(4, getDayPart());
          }
        }
      }
      
      public static final class MonthlyPattern
        extends MessageMicro
      {
        private int cachedSize = -1;
        private boolean hasLastDay;
        private boolean hasLastWeek;
        private boolean hasWeekDay;
        private boolean hasWeekDayNumber;
        private boolean lastDay_ = false;
        private boolean lastWeek_ = false;
        private List<Integer> monthDay_ = Collections.emptyList();
        private int weekDayNumber_ = 0;
        private int weekDay_ = 1;
        
        public MonthlyPattern addMonthDay(int paramInt)
        {
          if (this.monthDay_.isEmpty()) {
            this.monthDay_ = new ArrayList();
          }
          this.monthDay_.add(Integer.valueOf(paramInt));
          return this;
        }
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public boolean getLastDay()
        {
          return this.lastDay_;
        }
        
        public boolean getLastWeek()
        {
          return this.lastWeek_;
        }
        
        public int getMonthDay(int paramInt)
        {
          return ((Integer)this.monthDay_.get(paramInt)).intValue();
        }
        
        public int getMonthDayCount()
        {
          return this.monthDay_.size();
        }
        
        public List<Integer> getMonthDayList()
        {
          return this.monthDay_;
        }
        
        public int getSerializedSize()
        {
          int i = 0;
          Iterator localIterator = getMonthDayList().iterator();
          while (localIterator.hasNext()) {
            i += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator.next()).intValue());
          }
          int j = 0 + i + 1 * getMonthDayList().size();
          if (hasLastDay()) {
            j += CodedOutputStreamMicro.computeBoolSize(2, getLastDay());
          }
          if (hasWeekDay()) {
            j += CodedOutputStreamMicro.computeInt32Size(3, getWeekDay());
          }
          if (hasWeekDayNumber()) {
            j += CodedOutputStreamMicro.computeInt32Size(4, getWeekDayNumber());
          }
          if (hasLastWeek()) {
            j += CodedOutputStreamMicro.computeBoolSize(5, getLastWeek());
          }
          this.cachedSize = j;
          return j;
        }
        
        public int getWeekDay()
        {
          return this.weekDay_;
        }
        
        public int getWeekDayNumber()
        {
          return this.weekDayNumber_;
        }
        
        public boolean hasLastDay()
        {
          return this.hasLastDay;
        }
        
        public boolean hasLastWeek()
        {
          return this.hasLastWeek;
        }
        
        public boolean hasWeekDay()
        {
          return this.hasWeekDay;
        }
        
        public boolean hasWeekDayNumber()
        {
          return this.hasWeekDayNumber;
        }
        
        public MonthlyPattern mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 8: 
              addMonthDay(paramCodedInputStreamMicro.readInt32());
              break;
            case 16: 
              setLastDay(paramCodedInputStreamMicro.readBool());
              break;
            case 24: 
              setWeekDay(paramCodedInputStreamMicro.readInt32());
              break;
            case 32: 
              setWeekDayNumber(paramCodedInputStreamMicro.readInt32());
              break;
            }
            setLastWeek(paramCodedInputStreamMicro.readBool());
          }
        }
        
        public MonthlyPattern setLastDay(boolean paramBoolean)
        {
          this.hasLastDay = true;
          this.lastDay_ = paramBoolean;
          return this;
        }
        
        public MonthlyPattern setLastWeek(boolean paramBoolean)
        {
          this.hasLastWeek = true;
          this.lastWeek_ = paramBoolean;
          return this;
        }
        
        public MonthlyPattern setWeekDay(int paramInt)
        {
          this.hasWeekDay = true;
          this.weekDay_ = paramInt;
          return this;
        }
        
        public MonthlyPattern setWeekDayNumber(int paramInt)
        {
          this.hasWeekDayNumber = true;
          this.weekDayNumber_ = paramInt;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          Iterator localIterator = getMonthDayList().iterator();
          while (localIterator.hasNext()) {
            paramCodedOutputStreamMicro.writeInt32(1, ((Integer)localIterator.next()).intValue());
          }
          if (hasLastDay()) {
            paramCodedOutputStreamMicro.writeBool(2, getLastDay());
          }
          if (hasWeekDay()) {
            paramCodedOutputStreamMicro.writeInt32(3, getWeekDay());
          }
          if (hasWeekDayNumber()) {
            paramCodedOutputStreamMicro.writeInt32(4, getWeekDayNumber());
          }
          if (hasLastWeek()) {
            paramCodedOutputStreamMicro.writeBool(5, getLastWeek());
          }
        }
      }
      
      public static final class WeeklyPattern
        extends MessageMicro
      {
        private int cachedSize = -1;
        private List<Integer> weekDay_ = Collections.emptyList();
        
        public WeeklyPattern addWeekDay(int paramInt)
        {
          if (this.weekDay_.isEmpty()) {
            this.weekDay_ = new ArrayList();
          }
          this.weekDay_.add(Integer.valueOf(paramInt));
          return this;
        }
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public int getSerializedSize()
        {
          int i = 0;
          Iterator localIterator = getWeekDayList().iterator();
          while (localIterator.hasNext()) {
            i += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator.next()).intValue());
          }
          int j = 0 + i + 1 * getWeekDayList().size();
          this.cachedSize = j;
          return j;
        }
        
        public int getWeekDay(int paramInt)
        {
          return ((Integer)this.weekDay_.get(paramInt)).intValue();
        }
        
        public int getWeekDayCount()
        {
          return this.weekDay_.size();
        }
        
        public List<Integer> getWeekDayList()
        {
          return this.weekDay_;
        }
        
        public WeeklyPattern mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            }
            addWeekDay(paramCodedInputStreamMicro.readInt32());
          }
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          Iterator localIterator = getWeekDayList().iterator();
          while (localIterator.hasNext()) {
            paramCodedOutputStreamMicro.writeInt32(1, ((Integer)localIterator.next()).intValue());
          }
        }
      }
      
      public static final class YearlyPattern
        extends MessageMicro
      {
        private int cachedSize = -1;
        private boolean hasMonthlyPattern;
        private Sidekick.ReminderEntry.RecurrenceInfo.MonthlyPattern monthlyPattern_ = null;
        private List<Integer> yearMonth_ = Collections.emptyList();
        
        public YearlyPattern addYearMonth(int paramInt)
        {
          if (this.yearMonth_.isEmpty()) {
            this.yearMonth_ = new ArrayList();
          }
          this.yearMonth_.add(Integer.valueOf(paramInt));
          return this;
        }
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public Sidekick.ReminderEntry.RecurrenceInfo.MonthlyPattern getMonthlyPattern()
        {
          return this.monthlyPattern_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasMonthlyPattern();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getMonthlyPattern());
          }
          int j = 0;
          Iterator localIterator = getYearMonthList().iterator();
          while (localIterator.hasNext()) {
            j += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator.next()).intValue());
          }
          int k = i + j + 1 * getYearMonthList().size();
          this.cachedSize = k;
          return k;
        }
        
        public int getYearMonth(int paramInt)
        {
          return ((Integer)this.yearMonth_.get(paramInt)).intValue();
        }
        
        public int getYearMonthCount()
        {
          return this.yearMonth_.size();
        }
        
        public List<Integer> getYearMonthList()
        {
          return this.yearMonth_;
        }
        
        public boolean hasMonthlyPattern()
        {
          return this.hasMonthlyPattern;
        }
        
        public YearlyPattern mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 10: 
              Sidekick.ReminderEntry.RecurrenceInfo.MonthlyPattern localMonthlyPattern = new Sidekick.ReminderEntry.RecurrenceInfo.MonthlyPattern();
              paramCodedInputStreamMicro.readMessage(localMonthlyPattern);
              setMonthlyPattern(localMonthlyPattern);
              break;
            }
            addYearMonth(paramCodedInputStreamMicro.readInt32());
          }
        }
        
        public YearlyPattern setMonthlyPattern(Sidekick.ReminderEntry.RecurrenceInfo.MonthlyPattern paramMonthlyPattern)
        {
          if (paramMonthlyPattern == null) {
            throw new NullPointerException();
          }
          this.hasMonthlyPattern = true;
          this.monthlyPattern_ = paramMonthlyPattern;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasMonthlyPattern()) {
            paramCodedOutputStreamMicro.writeMessage(1, getMonthlyPattern());
          }
          Iterator localIterator = getYearMonthList().iterator();
          while (localIterator.hasNext()) {
            paramCodedOutputStreamMicro.writeInt32(2, ((Integer)localIterator.next()).intValue());
          }
        }
      }
    }
  }
  
  public static final class RequestPayload
    extends MessageMicro
  {
    private Sidekick.ActionsQuery actionsQuery_ = null;
    private int cachedSize = -1;
    private Sidekick.Configuration configurationQuery_ = null;
    private boolean enableExperimentalApiClients_ = false;
    private Sidekick.EntryQuery entryQuery_ = null;
    private Sidekick.ExperimentOverrides experimentOverrides_ = null;
    private Sidekick.FetchConfigurationQuery fetchConfigurationQuery_ = null;
    private Sidekick.FetchStaticEntitiesQuery fetchStaticEntitiesQuery_ = null;
    private boolean hasActionsQuery;
    private boolean hasConfigurationQuery;
    private boolean hasEnableExperimentalApiClients;
    private boolean hasEntryQuery;
    private boolean hasExperimentOverrides;
    private boolean hasFetchConfigurationQuery;
    private boolean hasFetchStaticEntitiesQuery;
    private boolean hasNetworkDeviceInfoQuery;
    private boolean hasPlaceAutocompleteQuery;
    private boolean hasPlaceDetailsQuery;
    private boolean hasPushRegistration;
    private boolean hasSaveCallLog;
    private boolean hasSensorSignals;
    private boolean hasStateChangeQuery;
    private boolean hasStaticMapQuery;
    private boolean hasTrainingModeClosetQuery;
    private boolean hasTrainingModeDataQuery;
    private boolean hasTranslateInPlaceQuery;
    private Sidekick.NetworkDeviceInfoQuery networkDeviceInfoQuery_ = null;
    private Sidekick.PlaceAutocompleteQuery placeAutocompleteQuery_ = null;
    private Sidekick.PlaceDetailsQuery placeDetailsQuery_ = null;
    private List<Sidekick.ClientLatency> previousClientLatency_ = Collections.emptyList();
    private Sidekick.PushRegistration pushRegistration_ = null;
    private boolean saveCallLog_ = false;
    private Sidekick.SensorSignals sensorSignals_ = null;
    private Sidekick.StateChanges stateChangeQuery_ = null;
    private Sidekick.StaticMapQuery staticMapQuery_ = null;
    private Sidekick.TrainingModeClosetQuery trainingModeClosetQuery_ = null;
    private Sidekick.TrainingModeDataQuery trainingModeDataQuery_ = null;
    private Sidekick.TranslateInPlaceQuery translateInPlaceQuery_ = null;
    
    public RequestPayload addPreviousClientLatency(Sidekick.ClientLatency paramClientLatency)
    {
      if (paramClientLatency == null) {
        throw new NullPointerException();
      }
      if (this.previousClientLatency_.isEmpty()) {
        this.previousClientLatency_ = new ArrayList();
      }
      this.previousClientLatency_.add(paramClientLatency);
      return this;
    }
    
    public Sidekick.ActionsQuery getActionsQuery()
    {
      return this.actionsQuery_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Configuration getConfigurationQuery()
    {
      return this.configurationQuery_;
    }
    
    public boolean getEnableExperimentalApiClients()
    {
      return this.enableExperimentalApiClients_;
    }
    
    public Sidekick.EntryQuery getEntryQuery()
    {
      return this.entryQuery_;
    }
    
    public Sidekick.ExperimentOverrides getExperimentOverrides()
    {
      return this.experimentOverrides_;
    }
    
    public Sidekick.FetchConfigurationQuery getFetchConfigurationQuery()
    {
      return this.fetchConfigurationQuery_;
    }
    
    public Sidekick.FetchStaticEntitiesQuery getFetchStaticEntitiesQuery()
    {
      return this.fetchStaticEntitiesQuery_;
    }
    
    public Sidekick.NetworkDeviceInfoQuery getNetworkDeviceInfoQuery()
    {
      return this.networkDeviceInfoQuery_;
    }
    
    public Sidekick.PlaceAutocompleteQuery getPlaceAutocompleteQuery()
    {
      return this.placeAutocompleteQuery_;
    }
    
    public Sidekick.PlaceDetailsQuery getPlaceDetailsQuery()
    {
      return this.placeDetailsQuery_;
    }
    
    public Sidekick.ClientLatency getPreviousClientLatency(int paramInt)
    {
      return (Sidekick.ClientLatency)this.previousClientLatency_.get(paramInt);
    }
    
    public int getPreviousClientLatencyCount()
    {
      return this.previousClientLatency_.size();
    }
    
    public List<Sidekick.ClientLatency> getPreviousClientLatencyList()
    {
      return this.previousClientLatency_;
    }
    
    public Sidekick.PushRegistration getPushRegistration()
    {
      return this.pushRegistration_;
    }
    
    public boolean getSaveCallLog()
    {
      return this.saveCallLog_;
    }
    
    public Sidekick.SensorSignals getSensorSignals()
    {
      return this.sensorSignals_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasConfigurationQuery();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(9, getConfigurationQuery());
      }
      if (hasEntryQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getEntryQuery());
      }
      if (hasActionsQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, getActionsQuery());
      }
      if (hasStaticMapQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(13, getStaticMapQuery());
      }
      if (hasFetchConfigurationQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(14, getFetchConfigurationQuery());
      }
      if (hasSensorSignals()) {
        i += CodedOutputStreamMicro.computeMessageSize(15, getSensorSignals());
      }
      if (hasFetchStaticEntitiesQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(16, getFetchStaticEntitiesQuery());
      }
      if (hasStateChangeQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(17, getStateChangeQuery());
      }
      if (hasExperimentOverrides()) {
        i += CodedOutputStreamMicro.computeMessageSize(18, getExperimentOverrides());
      }
      if (hasPushRegistration()) {
        i += CodedOutputStreamMicro.computeMessageSize(19, getPushRegistration());
      }
      if (hasEnableExperimentalApiClients()) {
        i += CodedOutputStreamMicro.computeBoolSize(20, getEnableExperimentalApiClients());
      }
      if (hasNetworkDeviceInfoQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(21, getNetworkDeviceInfoQuery());
      }
      if (hasPlaceAutocompleteQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(22, getPlaceAutocompleteQuery());
      }
      if (hasPlaceDetailsQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(23, getPlaceDetailsQuery());
      }
      if (hasSaveCallLog()) {
        i += CodedOutputStreamMicro.computeBoolSize(24, getSaveCallLog());
      }
      if (hasTrainingModeDataQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(25, getTrainingModeDataQuery());
      }
      if (hasTrainingModeClosetQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(26, getTrainingModeClosetQuery());
      }
      if (hasTranslateInPlaceQuery()) {
        i += CodedOutputStreamMicro.computeMessageSize(27, getTranslateInPlaceQuery());
      }
      Iterator localIterator = getPreviousClientLatencyList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(28, (Sidekick.ClientLatency)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.StateChanges getStateChangeQuery()
    {
      return this.stateChangeQuery_;
    }
    
    public Sidekick.StaticMapQuery getStaticMapQuery()
    {
      return this.staticMapQuery_;
    }
    
    public Sidekick.TrainingModeClosetQuery getTrainingModeClosetQuery()
    {
      return this.trainingModeClosetQuery_;
    }
    
    public Sidekick.TrainingModeDataQuery getTrainingModeDataQuery()
    {
      return this.trainingModeDataQuery_;
    }
    
    public Sidekick.TranslateInPlaceQuery getTranslateInPlaceQuery()
    {
      return this.translateInPlaceQuery_;
    }
    
    public boolean hasActionsQuery()
    {
      return this.hasActionsQuery;
    }
    
    public boolean hasConfigurationQuery()
    {
      return this.hasConfigurationQuery;
    }
    
    public boolean hasEnableExperimentalApiClients()
    {
      return this.hasEnableExperimentalApiClients;
    }
    
    public boolean hasEntryQuery()
    {
      return this.hasEntryQuery;
    }
    
    public boolean hasExperimentOverrides()
    {
      return this.hasExperimentOverrides;
    }
    
    public boolean hasFetchConfigurationQuery()
    {
      return this.hasFetchConfigurationQuery;
    }
    
    public boolean hasFetchStaticEntitiesQuery()
    {
      return this.hasFetchStaticEntitiesQuery;
    }
    
    public boolean hasNetworkDeviceInfoQuery()
    {
      return this.hasNetworkDeviceInfoQuery;
    }
    
    public boolean hasPlaceAutocompleteQuery()
    {
      return this.hasPlaceAutocompleteQuery;
    }
    
    public boolean hasPlaceDetailsQuery()
    {
      return this.hasPlaceDetailsQuery;
    }
    
    public boolean hasPushRegistration()
    {
      return this.hasPushRegistration;
    }
    
    public boolean hasSaveCallLog()
    {
      return this.hasSaveCallLog;
    }
    
    public boolean hasSensorSignals()
    {
      return this.hasSensorSignals;
    }
    
    public boolean hasStateChangeQuery()
    {
      return this.hasStateChangeQuery;
    }
    
    public boolean hasStaticMapQuery()
    {
      return this.hasStaticMapQuery;
    }
    
    public boolean hasTrainingModeClosetQuery()
    {
      return this.hasTrainingModeClosetQuery;
    }
    
    public boolean hasTrainingModeDataQuery()
    {
      return this.hasTrainingModeDataQuery;
    }
    
    public boolean hasTranslateInPlaceQuery()
    {
      return this.hasTranslateInPlaceQuery;
    }
    
    public RequestPayload mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 74: 
          Sidekick.Configuration localConfiguration = new Sidekick.Configuration();
          paramCodedInputStreamMicro.readMessage(localConfiguration);
          setConfigurationQuery(localConfiguration);
          break;
        case 82: 
          Sidekick.EntryQuery localEntryQuery = new Sidekick.EntryQuery();
          paramCodedInputStreamMicro.readMessage(localEntryQuery);
          setEntryQuery(localEntryQuery);
          break;
        case 90: 
          Sidekick.ActionsQuery localActionsQuery = new Sidekick.ActionsQuery();
          paramCodedInputStreamMicro.readMessage(localActionsQuery);
          setActionsQuery(localActionsQuery);
          break;
        case 106: 
          Sidekick.StaticMapQuery localStaticMapQuery = new Sidekick.StaticMapQuery();
          paramCodedInputStreamMicro.readMessage(localStaticMapQuery);
          setStaticMapQuery(localStaticMapQuery);
          break;
        case 114: 
          Sidekick.FetchConfigurationQuery localFetchConfigurationQuery = new Sidekick.FetchConfigurationQuery();
          paramCodedInputStreamMicro.readMessage(localFetchConfigurationQuery);
          setFetchConfigurationQuery(localFetchConfigurationQuery);
          break;
        case 122: 
          Sidekick.SensorSignals localSensorSignals = new Sidekick.SensorSignals();
          paramCodedInputStreamMicro.readMessage(localSensorSignals);
          setSensorSignals(localSensorSignals);
          break;
        case 130: 
          Sidekick.FetchStaticEntitiesQuery localFetchStaticEntitiesQuery = new Sidekick.FetchStaticEntitiesQuery();
          paramCodedInputStreamMicro.readMessage(localFetchStaticEntitiesQuery);
          setFetchStaticEntitiesQuery(localFetchStaticEntitiesQuery);
          break;
        case 138: 
          Sidekick.StateChanges localStateChanges = new Sidekick.StateChanges();
          paramCodedInputStreamMicro.readMessage(localStateChanges);
          setStateChangeQuery(localStateChanges);
          break;
        case 146: 
          Sidekick.ExperimentOverrides localExperimentOverrides = new Sidekick.ExperimentOverrides();
          paramCodedInputStreamMicro.readMessage(localExperimentOverrides);
          setExperimentOverrides(localExperimentOverrides);
          break;
        case 154: 
          Sidekick.PushRegistration localPushRegistration = new Sidekick.PushRegistration();
          paramCodedInputStreamMicro.readMessage(localPushRegistration);
          setPushRegistration(localPushRegistration);
          break;
        case 160: 
          setEnableExperimentalApiClients(paramCodedInputStreamMicro.readBool());
          break;
        case 170: 
          Sidekick.NetworkDeviceInfoQuery localNetworkDeviceInfoQuery = new Sidekick.NetworkDeviceInfoQuery();
          paramCodedInputStreamMicro.readMessage(localNetworkDeviceInfoQuery);
          setNetworkDeviceInfoQuery(localNetworkDeviceInfoQuery);
          break;
        case 178: 
          Sidekick.PlaceAutocompleteQuery localPlaceAutocompleteQuery = new Sidekick.PlaceAutocompleteQuery();
          paramCodedInputStreamMicro.readMessage(localPlaceAutocompleteQuery);
          setPlaceAutocompleteQuery(localPlaceAutocompleteQuery);
          break;
        case 186: 
          Sidekick.PlaceDetailsQuery localPlaceDetailsQuery = new Sidekick.PlaceDetailsQuery();
          paramCodedInputStreamMicro.readMessage(localPlaceDetailsQuery);
          setPlaceDetailsQuery(localPlaceDetailsQuery);
          break;
        case 192: 
          setSaveCallLog(paramCodedInputStreamMicro.readBool());
          break;
        case 202: 
          Sidekick.TrainingModeDataQuery localTrainingModeDataQuery = new Sidekick.TrainingModeDataQuery();
          paramCodedInputStreamMicro.readMessage(localTrainingModeDataQuery);
          setTrainingModeDataQuery(localTrainingModeDataQuery);
          break;
        case 210: 
          Sidekick.TrainingModeClosetQuery localTrainingModeClosetQuery = new Sidekick.TrainingModeClosetQuery();
          paramCodedInputStreamMicro.readMessage(localTrainingModeClosetQuery);
          setTrainingModeClosetQuery(localTrainingModeClosetQuery);
          break;
        case 218: 
          Sidekick.TranslateInPlaceQuery localTranslateInPlaceQuery = new Sidekick.TranslateInPlaceQuery();
          paramCodedInputStreamMicro.readMessage(localTranslateInPlaceQuery);
          setTranslateInPlaceQuery(localTranslateInPlaceQuery);
          break;
        }
        Sidekick.ClientLatency localClientLatency = new Sidekick.ClientLatency();
        paramCodedInputStreamMicro.readMessage(localClientLatency);
        addPreviousClientLatency(localClientLatency);
      }
    }
    
    public RequestPayload setActionsQuery(Sidekick.ActionsQuery paramActionsQuery)
    {
      if (paramActionsQuery == null) {
        throw new NullPointerException();
      }
      this.hasActionsQuery = true;
      this.actionsQuery_ = paramActionsQuery;
      return this;
    }
    
    public RequestPayload setConfigurationQuery(Sidekick.Configuration paramConfiguration)
    {
      if (paramConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasConfigurationQuery = true;
      this.configurationQuery_ = paramConfiguration;
      return this;
    }
    
    public RequestPayload setEnableExperimentalApiClients(boolean paramBoolean)
    {
      this.hasEnableExperimentalApiClients = true;
      this.enableExperimentalApiClients_ = paramBoolean;
      return this;
    }
    
    public RequestPayload setEntryQuery(Sidekick.EntryQuery paramEntryQuery)
    {
      if (paramEntryQuery == null) {
        throw new NullPointerException();
      }
      this.hasEntryQuery = true;
      this.entryQuery_ = paramEntryQuery;
      return this;
    }
    
    public RequestPayload setExperimentOverrides(Sidekick.ExperimentOverrides paramExperimentOverrides)
    {
      if (paramExperimentOverrides == null) {
        throw new NullPointerException();
      }
      this.hasExperimentOverrides = true;
      this.experimentOverrides_ = paramExperimentOverrides;
      return this;
    }
    
    public RequestPayload setFetchConfigurationQuery(Sidekick.FetchConfigurationQuery paramFetchConfigurationQuery)
    {
      if (paramFetchConfigurationQuery == null) {
        throw new NullPointerException();
      }
      this.hasFetchConfigurationQuery = true;
      this.fetchConfigurationQuery_ = paramFetchConfigurationQuery;
      return this;
    }
    
    public RequestPayload setFetchStaticEntitiesQuery(Sidekick.FetchStaticEntitiesQuery paramFetchStaticEntitiesQuery)
    {
      if (paramFetchStaticEntitiesQuery == null) {
        throw new NullPointerException();
      }
      this.hasFetchStaticEntitiesQuery = true;
      this.fetchStaticEntitiesQuery_ = paramFetchStaticEntitiesQuery;
      return this;
    }
    
    public RequestPayload setNetworkDeviceInfoQuery(Sidekick.NetworkDeviceInfoQuery paramNetworkDeviceInfoQuery)
    {
      if (paramNetworkDeviceInfoQuery == null) {
        throw new NullPointerException();
      }
      this.hasNetworkDeviceInfoQuery = true;
      this.networkDeviceInfoQuery_ = paramNetworkDeviceInfoQuery;
      return this;
    }
    
    public RequestPayload setPlaceAutocompleteQuery(Sidekick.PlaceAutocompleteQuery paramPlaceAutocompleteQuery)
    {
      if (paramPlaceAutocompleteQuery == null) {
        throw new NullPointerException();
      }
      this.hasPlaceAutocompleteQuery = true;
      this.placeAutocompleteQuery_ = paramPlaceAutocompleteQuery;
      return this;
    }
    
    public RequestPayload setPlaceDetailsQuery(Sidekick.PlaceDetailsQuery paramPlaceDetailsQuery)
    {
      if (paramPlaceDetailsQuery == null) {
        throw new NullPointerException();
      }
      this.hasPlaceDetailsQuery = true;
      this.placeDetailsQuery_ = paramPlaceDetailsQuery;
      return this;
    }
    
    public RequestPayload setPushRegistration(Sidekick.PushRegistration paramPushRegistration)
    {
      if (paramPushRegistration == null) {
        throw new NullPointerException();
      }
      this.hasPushRegistration = true;
      this.pushRegistration_ = paramPushRegistration;
      return this;
    }
    
    public RequestPayload setSaveCallLog(boolean paramBoolean)
    {
      this.hasSaveCallLog = true;
      this.saveCallLog_ = paramBoolean;
      return this;
    }
    
    public RequestPayload setSensorSignals(Sidekick.SensorSignals paramSensorSignals)
    {
      if (paramSensorSignals == null) {
        throw new NullPointerException();
      }
      this.hasSensorSignals = true;
      this.sensorSignals_ = paramSensorSignals;
      return this;
    }
    
    public RequestPayload setStateChangeQuery(Sidekick.StateChanges paramStateChanges)
    {
      if (paramStateChanges == null) {
        throw new NullPointerException();
      }
      this.hasStateChangeQuery = true;
      this.stateChangeQuery_ = paramStateChanges;
      return this;
    }
    
    public RequestPayload setStaticMapQuery(Sidekick.StaticMapQuery paramStaticMapQuery)
    {
      if (paramStaticMapQuery == null) {
        throw new NullPointerException();
      }
      this.hasStaticMapQuery = true;
      this.staticMapQuery_ = paramStaticMapQuery;
      return this;
    }
    
    public RequestPayload setTrainingModeClosetQuery(Sidekick.TrainingModeClosetQuery paramTrainingModeClosetQuery)
    {
      if (paramTrainingModeClosetQuery == null) {
        throw new NullPointerException();
      }
      this.hasTrainingModeClosetQuery = true;
      this.trainingModeClosetQuery_ = paramTrainingModeClosetQuery;
      return this;
    }
    
    public RequestPayload setTrainingModeDataQuery(Sidekick.TrainingModeDataQuery paramTrainingModeDataQuery)
    {
      if (paramTrainingModeDataQuery == null) {
        throw new NullPointerException();
      }
      this.hasTrainingModeDataQuery = true;
      this.trainingModeDataQuery_ = paramTrainingModeDataQuery;
      return this;
    }
    
    public RequestPayload setTranslateInPlaceQuery(Sidekick.TranslateInPlaceQuery paramTranslateInPlaceQuery)
    {
      if (paramTranslateInPlaceQuery == null) {
        throw new NullPointerException();
      }
      this.hasTranslateInPlaceQuery = true;
      this.translateInPlaceQuery_ = paramTranslateInPlaceQuery;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasConfigurationQuery()) {
        paramCodedOutputStreamMicro.writeMessage(9, getConfigurationQuery());
      }
      if (hasEntryQuery()) {
        paramCodedOutputStreamMicro.writeMessage(10, getEntryQuery());
      }
      if (hasActionsQuery()) {
        paramCodedOutputStreamMicro.writeMessage(11, getActionsQuery());
      }
      if (hasStaticMapQuery()) {
        paramCodedOutputStreamMicro.writeMessage(13, getStaticMapQuery());
      }
      if (hasFetchConfigurationQuery()) {
        paramCodedOutputStreamMicro.writeMessage(14, getFetchConfigurationQuery());
      }
      if (hasSensorSignals()) {
        paramCodedOutputStreamMicro.writeMessage(15, getSensorSignals());
      }
      if (hasFetchStaticEntitiesQuery()) {
        paramCodedOutputStreamMicro.writeMessage(16, getFetchStaticEntitiesQuery());
      }
      if (hasStateChangeQuery()) {
        paramCodedOutputStreamMicro.writeMessage(17, getStateChangeQuery());
      }
      if (hasExperimentOverrides()) {
        paramCodedOutputStreamMicro.writeMessage(18, getExperimentOverrides());
      }
      if (hasPushRegistration()) {
        paramCodedOutputStreamMicro.writeMessage(19, getPushRegistration());
      }
      if (hasEnableExperimentalApiClients()) {
        paramCodedOutputStreamMicro.writeBool(20, getEnableExperimentalApiClients());
      }
      if (hasNetworkDeviceInfoQuery()) {
        paramCodedOutputStreamMicro.writeMessage(21, getNetworkDeviceInfoQuery());
      }
      if (hasPlaceAutocompleteQuery()) {
        paramCodedOutputStreamMicro.writeMessage(22, getPlaceAutocompleteQuery());
      }
      if (hasPlaceDetailsQuery()) {
        paramCodedOutputStreamMicro.writeMessage(23, getPlaceDetailsQuery());
      }
      if (hasSaveCallLog()) {
        paramCodedOutputStreamMicro.writeBool(24, getSaveCallLog());
      }
      if (hasTrainingModeDataQuery()) {
        paramCodedOutputStreamMicro.writeMessage(25, getTrainingModeDataQuery());
      }
      if (hasTrainingModeClosetQuery()) {
        paramCodedOutputStreamMicro.writeMessage(26, getTrainingModeClosetQuery());
      }
      if (hasTranslateInPlaceQuery()) {
        paramCodedOutputStreamMicro.writeMessage(27, getTranslateInPlaceQuery());
      }
      Iterator localIterator = getPreviousClientLatencyList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(28, (Sidekick.ClientLatency)localIterator.next());
      }
    }
  }
  
  public static final class ResearchPageEntry
    extends MessageMicro
  {
    private String author_ = "";
    private int cachedSize = -1;
    private String category_ = "";
    private String description_ = "";
    private boolean hasAuthor;
    private boolean hasCategory;
    private boolean hasDescription;
    private boolean hasImage;
    private boolean hasJustification;
    private boolean hasLandingPageDomain;
    private boolean hasLandingSiteDisplayName;
    private boolean hasPublishTimestampSeconds;
    private boolean hasSecondaryPageHeader;
    private boolean hasTitle;
    private boolean hasUrl;
    private boolean hasViewTimestampSeconds;
    private Sidekick.Photo image_ = null;
    private String justification_ = "";
    private String landingPageDomain_ = "";
    private String landingSiteDisplayName_ = "";
    private long publishTimestampSeconds_ = 0L;
    private Sidekick.SecondaryPageHeaderDescriptor secondaryPageHeader_ = null;
    private String title_ = "";
    private String url_ = "";
    private long viewTimestampSeconds_ = 0L;
    
    public String getAuthor()
    {
      return this.author_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getCategory()
    {
      return this.category_;
    }
    
    public String getDescription()
    {
      return this.description_;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public String getJustification()
    {
      return this.justification_;
    }
    
    public String getLandingPageDomain()
    {
      return this.landingPageDomain_;
    }
    
    public String getLandingSiteDisplayName()
    {
      return this.landingSiteDisplayName_;
    }
    
    public long getPublishTimestampSeconds()
    {
      return this.publishTimestampSeconds_;
    }
    
    public Sidekick.SecondaryPageHeaderDescriptor getSecondaryPageHeader()
    {
      return this.secondaryPageHeader_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasDescription()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getDescription());
      }
      if (hasUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getUrl());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getImage());
      }
      if (hasLandingPageDomain()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getLandingPageDomain());
      }
      if (hasAuthor()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getAuthor());
      }
      if (hasPublishTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(7, getPublishTimestampSeconds());
      }
      if (hasViewTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(8, getViewTimestampSeconds());
      }
      if (hasLandingSiteDisplayName()) {
        i += CodedOutputStreamMicro.computeStringSize(9, getLandingSiteDisplayName());
      }
      if (hasSecondaryPageHeader()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getSecondaryPageHeader());
      }
      if (hasCategory()) {
        i += CodedOutputStreamMicro.computeStringSize(11, getCategory());
      }
      if (hasJustification()) {
        i += CodedOutputStreamMicro.computeStringSize(12, getJustification());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public String getUrl()
    {
      return this.url_;
    }
    
    public long getViewTimestampSeconds()
    {
      return this.viewTimestampSeconds_;
    }
    
    public boolean hasAuthor()
    {
      return this.hasAuthor;
    }
    
    public boolean hasCategory()
    {
      return this.hasCategory;
    }
    
    public boolean hasDescription()
    {
      return this.hasDescription;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasJustification()
    {
      return this.hasJustification;
    }
    
    public boolean hasLandingPageDomain()
    {
      return this.hasLandingPageDomain;
    }
    
    public boolean hasLandingSiteDisplayName()
    {
      return this.hasLandingSiteDisplayName;
    }
    
    public boolean hasPublishTimestampSeconds()
    {
      return this.hasPublishTimestampSeconds;
    }
    
    public boolean hasSecondaryPageHeader()
    {
      return this.hasSecondaryPageHeader;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasUrl()
    {
      return this.hasUrl;
    }
    
    public boolean hasViewTimestampSeconds()
    {
      return this.hasViewTimestampSeconds;
    }
    
    public ResearchPageEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setDescription(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setUrl(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 42: 
          setLandingPageDomain(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setAuthor(paramCodedInputStreamMicro.readString());
          break;
        case 56: 
          setPublishTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 64: 
          setViewTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 74: 
          setLandingSiteDisplayName(paramCodedInputStreamMicro.readString());
          break;
        case 82: 
          Sidekick.SecondaryPageHeaderDescriptor localSecondaryPageHeaderDescriptor = new Sidekick.SecondaryPageHeaderDescriptor();
          paramCodedInputStreamMicro.readMessage(localSecondaryPageHeaderDescriptor);
          setSecondaryPageHeader(localSecondaryPageHeaderDescriptor);
          break;
        case 90: 
          setCategory(paramCodedInputStreamMicro.readString());
          break;
        }
        setJustification(paramCodedInputStreamMicro.readString());
      }
    }
    
    public ResearchPageEntry setAuthor(String paramString)
    {
      this.hasAuthor = true;
      this.author_ = paramString;
      return this;
    }
    
    public ResearchPageEntry setCategory(String paramString)
    {
      this.hasCategory = true;
      this.category_ = paramString;
      return this;
    }
    
    public ResearchPageEntry setDescription(String paramString)
    {
      this.hasDescription = true;
      this.description_ = paramString;
      return this;
    }
    
    public ResearchPageEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public ResearchPageEntry setJustification(String paramString)
    {
      this.hasJustification = true;
      this.justification_ = paramString;
      return this;
    }
    
    public ResearchPageEntry setLandingPageDomain(String paramString)
    {
      this.hasLandingPageDomain = true;
      this.landingPageDomain_ = paramString;
      return this;
    }
    
    public ResearchPageEntry setLandingSiteDisplayName(String paramString)
    {
      this.hasLandingSiteDisplayName = true;
      this.landingSiteDisplayName_ = paramString;
      return this;
    }
    
    public ResearchPageEntry setPublishTimestampSeconds(long paramLong)
    {
      this.hasPublishTimestampSeconds = true;
      this.publishTimestampSeconds_ = paramLong;
      return this;
    }
    
    public ResearchPageEntry setSecondaryPageHeader(Sidekick.SecondaryPageHeaderDescriptor paramSecondaryPageHeaderDescriptor)
    {
      if (paramSecondaryPageHeaderDescriptor == null) {
        throw new NullPointerException();
      }
      this.hasSecondaryPageHeader = true;
      this.secondaryPageHeader_ = paramSecondaryPageHeaderDescriptor;
      return this;
    }
    
    public ResearchPageEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public ResearchPageEntry setUrl(String paramString)
    {
      this.hasUrl = true;
      this.url_ = paramString;
      return this;
    }
    
    public ResearchPageEntry setViewTimestampSeconds(long paramLong)
    {
      this.hasViewTimestampSeconds = true;
      this.viewTimestampSeconds_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasDescription()) {
        paramCodedOutputStreamMicro.writeString(2, getDescription());
      }
      if (hasUrl()) {
        paramCodedOutputStreamMicro.writeString(3, getUrl());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(4, getImage());
      }
      if (hasLandingPageDomain()) {
        paramCodedOutputStreamMicro.writeString(5, getLandingPageDomain());
      }
      if (hasAuthor()) {
        paramCodedOutputStreamMicro.writeString(6, getAuthor());
      }
      if (hasPublishTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(7, getPublishTimestampSeconds());
      }
      if (hasViewTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(8, getViewTimestampSeconds());
      }
      if (hasLandingSiteDisplayName()) {
        paramCodedOutputStreamMicro.writeString(9, getLandingSiteDisplayName());
      }
      if (hasSecondaryPageHeader()) {
        paramCodedOutputStreamMicro.writeMessage(10, getSecondaryPageHeader());
      }
      if (hasCategory()) {
        paramCodedOutputStreamMicro.writeString(11, getCategory());
      }
      if (hasJustification()) {
        paramCodedOutputStreamMicro.writeString(12, getJustification());
      }
    }
  }
  
  public static final class ResearchTopicEntry
    extends MessageMicro
  {
    private String actionHeader_ = "";
    private int cachedSize = -1;
    private boolean collapsed_ = false;
    private String exploreMoreAuthForService_ = "";
    private String exploreMoreTitle_ = "";
    private String exploreMoreUrl_ = "";
    private boolean hasActionHeader;
    private boolean hasCollapsed;
    private boolean hasExploreMoreAuthForService;
    private boolean hasExploreMoreTitle;
    private boolean hasExploreMoreUrl;
    private boolean hasSearchQuery;
    private boolean hasSecondaryPageHeader;
    private boolean hasTopic;
    private List<Sidekick.Photo> image_ = Collections.emptyList();
    private String searchQuery_ = "";
    private Sidekick.SecondaryPageHeaderDescriptor secondaryPageHeader_ = null;
    private String topic_ = "";
    
    public ResearchTopicEntry addImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      if (this.image_.isEmpty()) {
        this.image_ = new ArrayList();
      }
      this.image_.add(paramPhoto);
      return this;
    }
    
    public String getActionHeader()
    {
      return this.actionHeader_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getCollapsed()
    {
      return this.collapsed_;
    }
    
    public String getExploreMoreAuthForService()
    {
      return this.exploreMoreAuthForService_;
    }
    
    public String getExploreMoreTitle()
    {
      return this.exploreMoreTitle_;
    }
    
    public String getExploreMoreUrl()
    {
      return this.exploreMoreUrl_;
    }
    
    public List<Sidekick.Photo> getImageList()
    {
      return this.image_;
    }
    
    public String getSearchQuery()
    {
      return this.searchQuery_;
    }
    
    public Sidekick.SecondaryPageHeaderDescriptor getSecondaryPageHeader()
    {
      return this.secondaryPageHeader_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasActionHeader();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getActionHeader());
      }
      if (hasTopic()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getTopic());
      }
      Iterator localIterator = getImageList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.Photo)localIterator.next());
      }
      if (hasExploreMoreUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getExploreMoreUrl());
      }
      if (hasExploreMoreAuthForService()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getExploreMoreAuthForService());
      }
      if (hasSearchQuery()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getSearchQuery());
      }
      if (hasCollapsed()) {
        i += CodedOutputStreamMicro.computeBoolSize(8, getCollapsed());
      }
      if (hasExploreMoreTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(9, getExploreMoreTitle());
      }
      if (hasSecondaryPageHeader()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getSecondaryPageHeader());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTopic()
    {
      return this.topic_;
    }
    
    public boolean hasActionHeader()
    {
      return this.hasActionHeader;
    }
    
    public boolean hasCollapsed()
    {
      return this.hasCollapsed;
    }
    
    public boolean hasExploreMoreAuthForService()
    {
      return this.hasExploreMoreAuthForService;
    }
    
    public boolean hasExploreMoreTitle()
    {
      return this.hasExploreMoreTitle;
    }
    
    public boolean hasExploreMoreUrl()
    {
      return this.hasExploreMoreUrl;
    }
    
    public boolean hasSearchQuery()
    {
      return this.hasSearchQuery;
    }
    
    public boolean hasSecondaryPageHeader()
    {
      return this.hasSecondaryPageHeader;
    }
    
    public boolean hasTopic()
    {
      return this.hasTopic;
    }
    
    public ResearchTopicEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setActionHeader(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setTopic(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          addImage(localPhoto);
          break;
        case 42: 
          setExploreMoreUrl(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setExploreMoreAuthForService(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          setSearchQuery(paramCodedInputStreamMicro.readString());
          break;
        case 64: 
          setCollapsed(paramCodedInputStreamMicro.readBool());
          break;
        case 74: 
          setExploreMoreTitle(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.SecondaryPageHeaderDescriptor localSecondaryPageHeaderDescriptor = new Sidekick.SecondaryPageHeaderDescriptor();
        paramCodedInputStreamMicro.readMessage(localSecondaryPageHeaderDescriptor);
        setSecondaryPageHeader(localSecondaryPageHeaderDescriptor);
      }
    }
    
    public ResearchTopicEntry setActionHeader(String paramString)
    {
      this.hasActionHeader = true;
      this.actionHeader_ = paramString;
      return this;
    }
    
    public ResearchTopicEntry setCollapsed(boolean paramBoolean)
    {
      this.hasCollapsed = true;
      this.collapsed_ = paramBoolean;
      return this;
    }
    
    public ResearchTopicEntry setExploreMoreAuthForService(String paramString)
    {
      this.hasExploreMoreAuthForService = true;
      this.exploreMoreAuthForService_ = paramString;
      return this;
    }
    
    public ResearchTopicEntry setExploreMoreTitle(String paramString)
    {
      this.hasExploreMoreTitle = true;
      this.exploreMoreTitle_ = paramString;
      return this;
    }
    
    public ResearchTopicEntry setExploreMoreUrl(String paramString)
    {
      this.hasExploreMoreUrl = true;
      this.exploreMoreUrl_ = paramString;
      return this;
    }
    
    public ResearchTopicEntry setSearchQuery(String paramString)
    {
      this.hasSearchQuery = true;
      this.searchQuery_ = paramString;
      return this;
    }
    
    public ResearchTopicEntry setSecondaryPageHeader(Sidekick.SecondaryPageHeaderDescriptor paramSecondaryPageHeaderDescriptor)
    {
      if (paramSecondaryPageHeaderDescriptor == null) {
        throw new NullPointerException();
      }
      this.hasSecondaryPageHeader = true;
      this.secondaryPageHeader_ = paramSecondaryPageHeaderDescriptor;
      return this;
    }
    
    public ResearchTopicEntry setTopic(String paramString)
    {
      this.hasTopic = true;
      this.topic_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasActionHeader()) {
        paramCodedOutputStreamMicro.writeString(1, getActionHeader());
      }
      if (hasTopic()) {
        paramCodedOutputStreamMicro.writeString(2, getTopic());
      }
      Iterator localIterator = getImageList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.Photo)localIterator.next());
      }
      if (hasExploreMoreUrl()) {
        paramCodedOutputStreamMicro.writeString(5, getExploreMoreUrl());
      }
      if (hasExploreMoreAuthForService()) {
        paramCodedOutputStreamMicro.writeString(6, getExploreMoreAuthForService());
      }
      if (hasSearchQuery()) {
        paramCodedOutputStreamMicro.writeString(7, getSearchQuery());
      }
      if (hasCollapsed()) {
        paramCodedOutputStreamMicro.writeBool(8, getCollapsed());
      }
      if (hasExploreMoreTitle()) {
        paramCodedOutputStreamMicro.writeString(9, getExploreMoreTitle());
      }
      if (hasSecondaryPageHeader()) {
        paramCodedOutputStreamMicro.writeMessage(10, getSecondaryPageHeader());
      }
    }
  }
  
  public static final class ResponsePayload
    extends MessageMicro
  {
    private Sidekick.ActionsResponse actionsResponse_ = null;
    private int cachedSize = -1;
    private Sidekick.EntryResponse entryResponse_ = null;
    private Sidekick.FetchConfigurationResponse fetchConfigurationResponse_ = null;
    private Sidekick.FetchStaticEntitiesResponse fetchStaticEntitiesResponse_ = null;
    private boolean hasActionsResponse;
    private boolean hasEntryResponse;
    private boolean hasFetchConfigurationResponse;
    private boolean hasFetchStaticEntitiesResponse;
    private boolean hasNetworkDeviceInfoResponse;
    private boolean hasPlaceAutocompleteResponse;
    private boolean hasPlaceDetailsResponse;
    private boolean hasStaticMapResponse;
    private boolean hasTrainingModeClosetResponse;
    private boolean hasTrainingModeDataResponse;
    private boolean hasTranslateInPlaceResponse;
    private Sidekick.NetworkDeviceInfoResponse networkDeviceInfoResponse_ = null;
    private Sidekick.PlaceAutocompleteResponse placeAutocompleteResponse_ = null;
    private Sidekick.PlaceDetailsResponse placeDetailsResponse_ = null;
    private Sidekick.StaticMapResponse staticMapResponse_ = null;
    private Sidekick.TrainingModeClosetResponse trainingModeClosetResponse_ = null;
    private Sidekick.TrainingModeDataResponse trainingModeDataResponse_ = null;
    private Sidekick.TranslateInPlaceResponse translateInPlaceResponse_ = null;
    
    public Sidekick.ActionsResponse getActionsResponse()
    {
      return this.actionsResponse_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.EntryResponse getEntryResponse()
    {
      return this.entryResponse_;
    }
    
    public Sidekick.FetchConfigurationResponse getFetchConfigurationResponse()
    {
      return this.fetchConfigurationResponse_;
    }
    
    public Sidekick.FetchStaticEntitiesResponse getFetchStaticEntitiesResponse()
    {
      return this.fetchStaticEntitiesResponse_;
    }
    
    public Sidekick.NetworkDeviceInfoResponse getNetworkDeviceInfoResponse()
    {
      return this.networkDeviceInfoResponse_;
    }
    
    public Sidekick.PlaceAutocompleteResponse getPlaceAutocompleteResponse()
    {
      return this.placeAutocompleteResponse_;
    }
    
    public Sidekick.PlaceDetailsResponse getPlaceDetailsResponse()
    {
      return this.placeDetailsResponse_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasEntryResponse();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(8, getEntryResponse());
      }
      if (hasStaticMapResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getStaticMapResponse());
      }
      if (hasFetchConfigurationResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getFetchConfigurationResponse());
      }
      if (hasActionsResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, getActionsResponse());
      }
      if (hasFetchStaticEntitiesResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(12, getFetchStaticEntitiesResponse());
      }
      if (hasNetworkDeviceInfoResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(13, getNetworkDeviceInfoResponse());
      }
      if (hasPlaceAutocompleteResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(14, getPlaceAutocompleteResponse());
      }
      if (hasPlaceDetailsResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(15, getPlaceDetailsResponse());
      }
      if (hasTrainingModeDataResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(16, getTrainingModeDataResponse());
      }
      if (hasTrainingModeClosetResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(17, getTrainingModeClosetResponse());
      }
      if (hasTranslateInPlaceResponse()) {
        i += CodedOutputStreamMicro.computeMessageSize(18, getTranslateInPlaceResponse());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.StaticMapResponse getStaticMapResponse()
    {
      return this.staticMapResponse_;
    }
    
    public Sidekick.TrainingModeClosetResponse getTrainingModeClosetResponse()
    {
      return this.trainingModeClosetResponse_;
    }
    
    public Sidekick.TrainingModeDataResponse getTrainingModeDataResponse()
    {
      return this.trainingModeDataResponse_;
    }
    
    public Sidekick.TranslateInPlaceResponse getTranslateInPlaceResponse()
    {
      return this.translateInPlaceResponse_;
    }
    
    public boolean hasActionsResponse()
    {
      return this.hasActionsResponse;
    }
    
    public boolean hasEntryResponse()
    {
      return this.hasEntryResponse;
    }
    
    public boolean hasFetchConfigurationResponse()
    {
      return this.hasFetchConfigurationResponse;
    }
    
    public boolean hasFetchStaticEntitiesResponse()
    {
      return this.hasFetchStaticEntitiesResponse;
    }
    
    public boolean hasNetworkDeviceInfoResponse()
    {
      return this.hasNetworkDeviceInfoResponse;
    }
    
    public boolean hasPlaceAutocompleteResponse()
    {
      return this.hasPlaceAutocompleteResponse;
    }
    
    public boolean hasPlaceDetailsResponse()
    {
      return this.hasPlaceDetailsResponse;
    }
    
    public boolean hasStaticMapResponse()
    {
      return this.hasStaticMapResponse;
    }
    
    public boolean hasTrainingModeClosetResponse()
    {
      return this.hasTrainingModeClosetResponse;
    }
    
    public boolean hasTrainingModeDataResponse()
    {
      return this.hasTrainingModeDataResponse;
    }
    
    public boolean hasTranslateInPlaceResponse()
    {
      return this.hasTranslateInPlaceResponse;
    }
    
    public ResponsePayload mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 66: 
          Sidekick.EntryResponse localEntryResponse = new Sidekick.EntryResponse();
          paramCodedInputStreamMicro.readMessage(localEntryResponse);
          setEntryResponse(localEntryResponse);
          break;
        case 74: 
          Sidekick.StaticMapResponse localStaticMapResponse = new Sidekick.StaticMapResponse();
          paramCodedInputStreamMicro.readMessage(localStaticMapResponse);
          setStaticMapResponse(localStaticMapResponse);
          break;
        case 82: 
          Sidekick.FetchConfigurationResponse localFetchConfigurationResponse = new Sidekick.FetchConfigurationResponse();
          paramCodedInputStreamMicro.readMessage(localFetchConfigurationResponse);
          setFetchConfigurationResponse(localFetchConfigurationResponse);
          break;
        case 90: 
          Sidekick.ActionsResponse localActionsResponse = new Sidekick.ActionsResponse();
          paramCodedInputStreamMicro.readMessage(localActionsResponse);
          setActionsResponse(localActionsResponse);
          break;
        case 98: 
          Sidekick.FetchStaticEntitiesResponse localFetchStaticEntitiesResponse = new Sidekick.FetchStaticEntitiesResponse();
          paramCodedInputStreamMicro.readMessage(localFetchStaticEntitiesResponse);
          setFetchStaticEntitiesResponse(localFetchStaticEntitiesResponse);
          break;
        case 106: 
          Sidekick.NetworkDeviceInfoResponse localNetworkDeviceInfoResponse = new Sidekick.NetworkDeviceInfoResponse();
          paramCodedInputStreamMicro.readMessage(localNetworkDeviceInfoResponse);
          setNetworkDeviceInfoResponse(localNetworkDeviceInfoResponse);
          break;
        case 114: 
          Sidekick.PlaceAutocompleteResponse localPlaceAutocompleteResponse = new Sidekick.PlaceAutocompleteResponse();
          paramCodedInputStreamMicro.readMessage(localPlaceAutocompleteResponse);
          setPlaceAutocompleteResponse(localPlaceAutocompleteResponse);
          break;
        case 122: 
          Sidekick.PlaceDetailsResponse localPlaceDetailsResponse = new Sidekick.PlaceDetailsResponse();
          paramCodedInputStreamMicro.readMessage(localPlaceDetailsResponse);
          setPlaceDetailsResponse(localPlaceDetailsResponse);
          break;
        case 130: 
          Sidekick.TrainingModeDataResponse localTrainingModeDataResponse = new Sidekick.TrainingModeDataResponse();
          paramCodedInputStreamMicro.readMessage(localTrainingModeDataResponse);
          setTrainingModeDataResponse(localTrainingModeDataResponse);
          break;
        case 138: 
          Sidekick.TrainingModeClosetResponse localTrainingModeClosetResponse = new Sidekick.TrainingModeClosetResponse();
          paramCodedInputStreamMicro.readMessage(localTrainingModeClosetResponse);
          setTrainingModeClosetResponse(localTrainingModeClosetResponse);
          break;
        }
        Sidekick.TranslateInPlaceResponse localTranslateInPlaceResponse = new Sidekick.TranslateInPlaceResponse();
        paramCodedInputStreamMicro.readMessage(localTranslateInPlaceResponse);
        setTranslateInPlaceResponse(localTranslateInPlaceResponse);
      }
    }
    
    public ResponsePayload setActionsResponse(Sidekick.ActionsResponse paramActionsResponse)
    {
      if (paramActionsResponse == null) {
        throw new NullPointerException();
      }
      this.hasActionsResponse = true;
      this.actionsResponse_ = paramActionsResponse;
      return this;
    }
    
    public ResponsePayload setEntryResponse(Sidekick.EntryResponse paramEntryResponse)
    {
      if (paramEntryResponse == null) {
        throw new NullPointerException();
      }
      this.hasEntryResponse = true;
      this.entryResponse_ = paramEntryResponse;
      return this;
    }
    
    public ResponsePayload setFetchConfigurationResponse(Sidekick.FetchConfigurationResponse paramFetchConfigurationResponse)
    {
      if (paramFetchConfigurationResponse == null) {
        throw new NullPointerException();
      }
      this.hasFetchConfigurationResponse = true;
      this.fetchConfigurationResponse_ = paramFetchConfigurationResponse;
      return this;
    }
    
    public ResponsePayload setFetchStaticEntitiesResponse(Sidekick.FetchStaticEntitiesResponse paramFetchStaticEntitiesResponse)
    {
      if (paramFetchStaticEntitiesResponse == null) {
        throw new NullPointerException();
      }
      this.hasFetchStaticEntitiesResponse = true;
      this.fetchStaticEntitiesResponse_ = paramFetchStaticEntitiesResponse;
      return this;
    }
    
    public ResponsePayload setNetworkDeviceInfoResponse(Sidekick.NetworkDeviceInfoResponse paramNetworkDeviceInfoResponse)
    {
      if (paramNetworkDeviceInfoResponse == null) {
        throw new NullPointerException();
      }
      this.hasNetworkDeviceInfoResponse = true;
      this.networkDeviceInfoResponse_ = paramNetworkDeviceInfoResponse;
      return this;
    }
    
    public ResponsePayload setPlaceAutocompleteResponse(Sidekick.PlaceAutocompleteResponse paramPlaceAutocompleteResponse)
    {
      if (paramPlaceAutocompleteResponse == null) {
        throw new NullPointerException();
      }
      this.hasPlaceAutocompleteResponse = true;
      this.placeAutocompleteResponse_ = paramPlaceAutocompleteResponse;
      return this;
    }
    
    public ResponsePayload setPlaceDetailsResponse(Sidekick.PlaceDetailsResponse paramPlaceDetailsResponse)
    {
      if (paramPlaceDetailsResponse == null) {
        throw new NullPointerException();
      }
      this.hasPlaceDetailsResponse = true;
      this.placeDetailsResponse_ = paramPlaceDetailsResponse;
      return this;
    }
    
    public ResponsePayload setStaticMapResponse(Sidekick.StaticMapResponse paramStaticMapResponse)
    {
      if (paramStaticMapResponse == null) {
        throw new NullPointerException();
      }
      this.hasStaticMapResponse = true;
      this.staticMapResponse_ = paramStaticMapResponse;
      return this;
    }
    
    public ResponsePayload setTrainingModeClosetResponse(Sidekick.TrainingModeClosetResponse paramTrainingModeClosetResponse)
    {
      if (paramTrainingModeClosetResponse == null) {
        throw new NullPointerException();
      }
      this.hasTrainingModeClosetResponse = true;
      this.trainingModeClosetResponse_ = paramTrainingModeClosetResponse;
      return this;
    }
    
    public ResponsePayload setTrainingModeDataResponse(Sidekick.TrainingModeDataResponse paramTrainingModeDataResponse)
    {
      if (paramTrainingModeDataResponse == null) {
        throw new NullPointerException();
      }
      this.hasTrainingModeDataResponse = true;
      this.trainingModeDataResponse_ = paramTrainingModeDataResponse;
      return this;
    }
    
    public ResponsePayload setTranslateInPlaceResponse(Sidekick.TranslateInPlaceResponse paramTranslateInPlaceResponse)
    {
      if (paramTranslateInPlaceResponse == null) {
        throw new NullPointerException();
      }
      this.hasTranslateInPlaceResponse = true;
      this.translateInPlaceResponse_ = paramTranslateInPlaceResponse;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasEntryResponse()) {
        paramCodedOutputStreamMicro.writeMessage(8, getEntryResponse());
      }
      if (hasStaticMapResponse()) {
        paramCodedOutputStreamMicro.writeMessage(9, getStaticMapResponse());
      }
      if (hasFetchConfigurationResponse()) {
        paramCodedOutputStreamMicro.writeMessage(10, getFetchConfigurationResponse());
      }
      if (hasActionsResponse()) {
        paramCodedOutputStreamMicro.writeMessage(11, getActionsResponse());
      }
      if (hasFetchStaticEntitiesResponse()) {
        paramCodedOutputStreamMicro.writeMessage(12, getFetchStaticEntitiesResponse());
      }
      if (hasNetworkDeviceInfoResponse()) {
        paramCodedOutputStreamMicro.writeMessage(13, getNetworkDeviceInfoResponse());
      }
      if (hasPlaceAutocompleteResponse()) {
        paramCodedOutputStreamMicro.writeMessage(14, getPlaceAutocompleteResponse());
      }
      if (hasPlaceDetailsResponse()) {
        paramCodedOutputStreamMicro.writeMessage(15, getPlaceDetailsResponse());
      }
      if (hasTrainingModeDataResponse()) {
        paramCodedOutputStreamMicro.writeMessage(16, getTrainingModeDataResponse());
      }
      if (hasTrainingModeClosetResponse()) {
        paramCodedOutputStreamMicro.writeMessage(17, getTrainingModeClosetResponse());
      }
      if (hasTranslateInPlaceResponse()) {
        paramCodedOutputStreamMicro.writeMessage(18, getTranslateInPlaceResponse());
      }
    }
  }
  
  public static final class SecondaryPageHeaderDescriptor
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.Photo contextHeaderImage_ = null;
    private boolean hasContextHeaderImage;
    private boolean hasTitle;
    private String title_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getContextHeaderImage()
    {
      return this.contextHeaderImage_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasContextHeaderImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getContextHeaderImage());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasContextHeaderImage()
    {
      return this.hasContextHeaderImage;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public SecondaryPageHeaderDescriptor mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.Photo localPhoto = new Sidekick.Photo();
        paramCodedInputStreamMicro.readMessage(localPhoto);
        setContextHeaderImage(localPhoto);
      }
    }
    
    public SecondaryPageHeaderDescriptor setContextHeaderImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasContextHeaderImage = true;
      this.contextHeaderImage_ = paramPhoto;
      return this;
    }
    
    public SecondaryPageHeaderDescriptor setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasContextHeaderImage()) {
        paramCodedOutputStreamMicro.writeMessage(2, getContextHeaderImage());
      }
    }
  }
  
  public static final class SensorSignals
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasHasRearFacingCamera;
    private boolean hasLayoutInfo;
    private boolean hasLocale;
    private boolean hasNearbySpotsBeaconData;
    private boolean hasNumberWidgetsInstalled;
    private boolean hasRearFacingCamera_ = false;
    private boolean hasStationaryTimeSeconds;
    private boolean hasTimeFormat;
    private boolean hasTimestampSeconds;
    private boolean hasTimezoneId;
    private boolean hasTimezoneOffsetSeconds;
    private boolean hasUserLocationReportingEnabled;
    private boolean hasWifiEnabled;
    private boolean hasWifiScanAlwaysAvailable;
    private Sidekick.LayoutInfo layoutInfo_ = null;
    private String locale_ = "";
    private ByteStringMicro nearbySpotsBeaconData_ = ByteStringMicro.EMPTY;
    private int numberWidgetsInstalled_ = 0;
    private int stationaryTimeSeconds_ = 0;
    private int timeFormat_ = 1;
    private long timestampSeconds_ = 0L;
    private List<Sidekick.TimestampedLocation> timestampedLocation_ = Collections.emptyList();
    private String timezoneId_ = "";
    private int timezoneOffsetSeconds_ = 0;
    private boolean userLocationReportingEnabled_ = false;
    private boolean wifiEnabled_ = true;
    private boolean wifiScanAlwaysAvailable_ = true;
    
    public SensorSignals addTimestampedLocation(Sidekick.TimestampedLocation paramTimestampedLocation)
    {
      if (paramTimestampedLocation == null) {
        throw new NullPointerException();
      }
      if (this.timestampedLocation_.isEmpty()) {
        this.timestampedLocation_ = new ArrayList();
      }
      this.timestampedLocation_.add(paramTimestampedLocation);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getHasRearFacingCamera()
    {
      return this.hasRearFacingCamera_;
    }
    
    public Sidekick.LayoutInfo getLayoutInfo()
    {
      return this.layoutInfo_;
    }
    
    public String getLocale()
    {
      return this.locale_;
    }
    
    public ByteStringMicro getNearbySpotsBeaconData()
    {
      return this.nearbySpotsBeaconData_;
    }
    
    public int getNumberWidgetsInstalled()
    {
      return this.numberWidgetsInstalled_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getTimestampedLocationList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.TimestampedLocation)localIterator.next());
      }
      if (hasLocale()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getLocale());
      }
      if (hasStationaryTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getStationaryTimeSeconds());
      }
      if (hasWifiEnabled()) {
        i += CodedOutputStreamMicro.computeBoolSize(4, getWifiEnabled());
      }
      if (hasLayoutInfo()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getLayoutInfo());
      }
      if (hasTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(6, getTimestampSeconds());
      }
      if (hasTimezoneOffsetSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(7, getTimezoneOffsetSeconds());
      }
      if (hasHasRearFacingCamera()) {
        i += CodedOutputStreamMicro.computeBoolSize(8, getHasRearFacingCamera());
      }
      if (hasNumberWidgetsInstalled()) {
        i += CodedOutputStreamMicro.computeInt32Size(9, getNumberWidgetsInstalled());
      }
      if (hasTimeFormat()) {
        i += CodedOutputStreamMicro.computeInt32Size(10, getTimeFormat());
      }
      if (hasTimezoneId()) {
        i += CodedOutputStreamMicro.computeStringSize(11, getTimezoneId());
      }
      if (hasNearbySpotsBeaconData()) {
        i += CodedOutputStreamMicro.computeBytesSize(12, getNearbySpotsBeaconData());
      }
      if (hasUserLocationReportingEnabled()) {
        i += CodedOutputStreamMicro.computeBoolSize(13, getUserLocationReportingEnabled());
      }
      if (hasWifiScanAlwaysAvailable()) {
        i += CodedOutputStreamMicro.computeBoolSize(14, getWifiScanAlwaysAvailable());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getStationaryTimeSeconds()
    {
      return this.stationaryTimeSeconds_;
    }
    
    public int getTimeFormat()
    {
      return this.timeFormat_;
    }
    
    public long getTimestampSeconds()
    {
      return this.timestampSeconds_;
    }
    
    public List<Sidekick.TimestampedLocation> getTimestampedLocationList()
    {
      return this.timestampedLocation_;
    }
    
    public String getTimezoneId()
    {
      return this.timezoneId_;
    }
    
    public int getTimezoneOffsetSeconds()
    {
      return this.timezoneOffsetSeconds_;
    }
    
    public boolean getUserLocationReportingEnabled()
    {
      return this.userLocationReportingEnabled_;
    }
    
    public boolean getWifiEnabled()
    {
      return this.wifiEnabled_;
    }
    
    public boolean getWifiScanAlwaysAvailable()
    {
      return this.wifiScanAlwaysAvailable_;
    }
    
    public boolean hasHasRearFacingCamera()
    {
      return this.hasHasRearFacingCamera;
    }
    
    public boolean hasLayoutInfo()
    {
      return this.hasLayoutInfo;
    }
    
    public boolean hasLocale()
    {
      return this.hasLocale;
    }
    
    public boolean hasNearbySpotsBeaconData()
    {
      return this.hasNearbySpotsBeaconData;
    }
    
    public boolean hasNumberWidgetsInstalled()
    {
      return this.hasNumberWidgetsInstalled;
    }
    
    public boolean hasStationaryTimeSeconds()
    {
      return this.hasStationaryTimeSeconds;
    }
    
    public boolean hasTimeFormat()
    {
      return this.hasTimeFormat;
    }
    
    public boolean hasTimestampSeconds()
    {
      return this.hasTimestampSeconds;
    }
    
    public boolean hasTimezoneId()
    {
      return this.hasTimezoneId;
    }
    
    public boolean hasTimezoneOffsetSeconds()
    {
      return this.hasTimezoneOffsetSeconds;
    }
    
    public boolean hasUserLocationReportingEnabled()
    {
      return this.hasUserLocationReportingEnabled;
    }
    
    public boolean hasWifiEnabled()
    {
      return this.hasWifiEnabled;
    }
    
    public boolean hasWifiScanAlwaysAvailable()
    {
      return this.hasWifiScanAlwaysAvailable;
    }
    
    public SensorSignals mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.TimestampedLocation localTimestampedLocation = new Sidekick.TimestampedLocation();
          paramCodedInputStreamMicro.readMessage(localTimestampedLocation);
          addTimestampedLocation(localTimestampedLocation);
          break;
        case 18: 
          setLocale(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setStationaryTimeSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 32: 
          setWifiEnabled(paramCodedInputStreamMicro.readBool());
          break;
        case 42: 
          Sidekick.LayoutInfo localLayoutInfo = new Sidekick.LayoutInfo();
          paramCodedInputStreamMicro.readMessage(localLayoutInfo);
          setLayoutInfo(localLayoutInfo);
          break;
        case 48: 
          setTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 56: 
          setTimezoneOffsetSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 64: 
          setHasRearFacingCamera(paramCodedInputStreamMicro.readBool());
          break;
        case 72: 
          setNumberWidgetsInstalled(paramCodedInputStreamMicro.readInt32());
          break;
        case 80: 
          setTimeFormat(paramCodedInputStreamMicro.readInt32());
          break;
        case 90: 
          setTimezoneId(paramCodedInputStreamMicro.readString());
          break;
        case 98: 
          setNearbySpotsBeaconData(paramCodedInputStreamMicro.readBytes());
          break;
        case 104: 
          setUserLocationReportingEnabled(paramCodedInputStreamMicro.readBool());
          break;
        }
        setWifiScanAlwaysAvailable(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public SensorSignals setHasRearFacingCamera(boolean paramBoolean)
    {
      this.hasHasRearFacingCamera = true;
      this.hasRearFacingCamera_ = paramBoolean;
      return this;
    }
    
    public SensorSignals setLayoutInfo(Sidekick.LayoutInfo paramLayoutInfo)
    {
      if (paramLayoutInfo == null) {
        throw new NullPointerException();
      }
      this.hasLayoutInfo = true;
      this.layoutInfo_ = paramLayoutInfo;
      return this;
    }
    
    public SensorSignals setLocale(String paramString)
    {
      this.hasLocale = true;
      this.locale_ = paramString;
      return this;
    }
    
    public SensorSignals setNearbySpotsBeaconData(ByteStringMicro paramByteStringMicro)
    {
      this.hasNearbySpotsBeaconData = true;
      this.nearbySpotsBeaconData_ = paramByteStringMicro;
      return this;
    }
    
    public SensorSignals setNumberWidgetsInstalled(int paramInt)
    {
      this.hasNumberWidgetsInstalled = true;
      this.numberWidgetsInstalled_ = paramInt;
      return this;
    }
    
    public SensorSignals setStationaryTimeSeconds(int paramInt)
    {
      this.hasStationaryTimeSeconds = true;
      this.stationaryTimeSeconds_ = paramInt;
      return this;
    }
    
    public SensorSignals setTimeFormat(int paramInt)
    {
      this.hasTimeFormat = true;
      this.timeFormat_ = paramInt;
      return this;
    }
    
    public SensorSignals setTimestampSeconds(long paramLong)
    {
      this.hasTimestampSeconds = true;
      this.timestampSeconds_ = paramLong;
      return this;
    }
    
    public SensorSignals setTimezoneId(String paramString)
    {
      this.hasTimezoneId = true;
      this.timezoneId_ = paramString;
      return this;
    }
    
    public SensorSignals setTimezoneOffsetSeconds(int paramInt)
    {
      this.hasTimezoneOffsetSeconds = true;
      this.timezoneOffsetSeconds_ = paramInt;
      return this;
    }
    
    public SensorSignals setUserLocationReportingEnabled(boolean paramBoolean)
    {
      this.hasUserLocationReportingEnabled = true;
      this.userLocationReportingEnabled_ = paramBoolean;
      return this;
    }
    
    public SensorSignals setWifiEnabled(boolean paramBoolean)
    {
      this.hasWifiEnabled = true;
      this.wifiEnabled_ = paramBoolean;
      return this;
    }
    
    public SensorSignals setWifiScanAlwaysAvailable(boolean paramBoolean)
    {
      this.hasWifiScanAlwaysAvailable = true;
      this.wifiScanAlwaysAvailable_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getTimestampedLocationList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.TimestampedLocation)localIterator.next());
      }
      if (hasLocale()) {
        paramCodedOutputStreamMicro.writeString(2, getLocale());
      }
      if (hasStationaryTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(3, getStationaryTimeSeconds());
      }
      if (hasWifiEnabled()) {
        paramCodedOutputStreamMicro.writeBool(4, getWifiEnabled());
      }
      if (hasLayoutInfo()) {
        paramCodedOutputStreamMicro.writeMessage(5, getLayoutInfo());
      }
      if (hasTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(6, getTimestampSeconds());
      }
      if (hasTimezoneOffsetSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(7, getTimezoneOffsetSeconds());
      }
      if (hasHasRearFacingCamera()) {
        paramCodedOutputStreamMicro.writeBool(8, getHasRearFacingCamera());
      }
      if (hasNumberWidgetsInstalled()) {
        paramCodedOutputStreamMicro.writeInt32(9, getNumberWidgetsInstalled());
      }
      if (hasTimeFormat()) {
        paramCodedOutputStreamMicro.writeInt32(10, getTimeFormat());
      }
      if (hasTimezoneId()) {
        paramCodedOutputStreamMicro.writeString(11, getTimezoneId());
      }
      if (hasNearbySpotsBeaconData()) {
        paramCodedOutputStreamMicro.writeBytes(12, getNearbySpotsBeaconData());
      }
      if (hasUserLocationReportingEnabled()) {
        paramCodedOutputStreamMicro.writeBool(13, getUserLocationReportingEnabled());
      }
      if (hasWifiScanAlwaysAvailable()) {
        paramCodedOutputStreamMicro.writeBool(14, getWifiScanAlwaysAvailable());
      }
    }
  }
  
  public static final class SharedTrafficCardEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String commuteStateText_ = "";
    private int commuteState_ = 1;
    private Sidekick.CommuteSummary commuteSummary_ = null;
    private boolean hasCommuteState;
    private boolean hasCommuteStateText;
    private boolean hasCommuteSummary;
    private boolean hasInterestedInProducerText;
    private boolean hasLabelOfDestination;
    private boolean hasLabelOfStart;
    private boolean hasLastUpdatedTimestampSeconds;
    private boolean hasSharerLocation;
    private boolean hasSharerName;
    private boolean hasSharerObfuscatedGaiaId;
    private boolean hasSharerPhoto;
    private String interestedInProducerText_ = "";
    private String labelOfDestination_ = "";
    private String labelOfStart_ = "";
    private long lastUpdatedTimestampSeconds_ = 0L;
    private Sidekick.Location sharerLocation_ = null;
    private String sharerName_ = "";
    private long sharerObfuscatedGaiaId_ = 0L;
    private Sidekick.Photo sharerPhoto_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getCommuteState()
    {
      return this.commuteState_;
    }
    
    public String getCommuteStateText()
    {
      return this.commuteStateText_;
    }
    
    public Sidekick.CommuteSummary getCommuteSummary()
    {
      return this.commuteSummary_;
    }
    
    public String getInterestedInProducerText()
    {
      return this.interestedInProducerText_;
    }
    
    public String getLabelOfDestination()
    {
      return this.labelOfDestination_;
    }
    
    public String getLabelOfStart()
    {
      return this.labelOfStart_;
    }
    
    public long getLastUpdatedTimestampSeconds()
    {
      return this.lastUpdatedTimestampSeconds_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasCommuteState();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getCommuteState());
      }
      if (hasSharerName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSharerName());
      }
      if (hasSharerPhoto()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getSharerPhoto());
      }
      if (hasSharerObfuscatedGaiaId()) {
        i += CodedOutputStreamMicro.computeInt64Size(4, getSharerObfuscatedGaiaId());
      }
      if (hasSharerLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getSharerLocation());
      }
      if (hasLabelOfStart()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getLabelOfStart());
      }
      if (hasLabelOfDestination()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getLabelOfDestination());
      }
      if (hasLastUpdatedTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(8, getLastUpdatedTimestampSeconds());
      }
      if (hasCommuteSummary()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getCommuteSummary());
      }
      if (hasCommuteStateText()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getCommuteStateText());
      }
      if (hasInterestedInProducerText()) {
        i += CodedOutputStreamMicro.computeStringSize(11, getInterestedInProducerText());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.Location getSharerLocation()
    {
      return this.sharerLocation_;
    }
    
    public String getSharerName()
    {
      return this.sharerName_;
    }
    
    public long getSharerObfuscatedGaiaId()
    {
      return this.sharerObfuscatedGaiaId_;
    }
    
    public Sidekick.Photo getSharerPhoto()
    {
      return this.sharerPhoto_;
    }
    
    public boolean hasCommuteState()
    {
      return this.hasCommuteState;
    }
    
    public boolean hasCommuteStateText()
    {
      return this.hasCommuteStateText;
    }
    
    public boolean hasCommuteSummary()
    {
      return this.hasCommuteSummary;
    }
    
    public boolean hasInterestedInProducerText()
    {
      return this.hasInterestedInProducerText;
    }
    
    public boolean hasLabelOfDestination()
    {
      return this.hasLabelOfDestination;
    }
    
    public boolean hasLabelOfStart()
    {
      return this.hasLabelOfStart;
    }
    
    public boolean hasLastUpdatedTimestampSeconds()
    {
      return this.hasLastUpdatedTimestampSeconds;
    }
    
    public boolean hasSharerLocation()
    {
      return this.hasSharerLocation;
    }
    
    public boolean hasSharerName()
    {
      return this.hasSharerName;
    }
    
    public boolean hasSharerObfuscatedGaiaId()
    {
      return this.hasSharerObfuscatedGaiaId;
    }
    
    public boolean hasSharerPhoto()
    {
      return this.hasSharerPhoto;
    }
    
    public SharedTrafficCardEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setCommuteState(paramCodedInputStreamMicro.readInt32());
          break;
        case 18: 
          setSharerName(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setSharerPhoto(localPhoto);
          break;
        case 32: 
          setSharerObfuscatedGaiaId(paramCodedInputStreamMicro.readInt64());
          break;
        case 42: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setSharerLocation(localLocation);
          break;
        case 50: 
          setLabelOfStart(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          setLabelOfDestination(paramCodedInputStreamMicro.readString());
          break;
        case 64: 
          setLastUpdatedTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 74: 
          Sidekick.CommuteSummary localCommuteSummary = new Sidekick.CommuteSummary();
          paramCodedInputStreamMicro.readMessage(localCommuteSummary);
          setCommuteSummary(localCommuteSummary);
          break;
        case 82: 
          setCommuteStateText(paramCodedInputStreamMicro.readString());
          break;
        }
        setInterestedInProducerText(paramCodedInputStreamMicro.readString());
      }
    }
    
    public SharedTrafficCardEntry setCommuteState(int paramInt)
    {
      this.hasCommuteState = true;
      this.commuteState_ = paramInt;
      return this;
    }
    
    public SharedTrafficCardEntry setCommuteStateText(String paramString)
    {
      this.hasCommuteStateText = true;
      this.commuteStateText_ = paramString;
      return this;
    }
    
    public SharedTrafficCardEntry setCommuteSummary(Sidekick.CommuteSummary paramCommuteSummary)
    {
      if (paramCommuteSummary == null) {
        throw new NullPointerException();
      }
      this.hasCommuteSummary = true;
      this.commuteSummary_ = paramCommuteSummary;
      return this;
    }
    
    public SharedTrafficCardEntry setInterestedInProducerText(String paramString)
    {
      this.hasInterestedInProducerText = true;
      this.interestedInProducerText_ = paramString;
      return this;
    }
    
    public SharedTrafficCardEntry setLabelOfDestination(String paramString)
    {
      this.hasLabelOfDestination = true;
      this.labelOfDestination_ = paramString;
      return this;
    }
    
    public SharedTrafficCardEntry setLabelOfStart(String paramString)
    {
      this.hasLabelOfStart = true;
      this.labelOfStart_ = paramString;
      return this;
    }
    
    public SharedTrafficCardEntry setLastUpdatedTimestampSeconds(long paramLong)
    {
      this.hasLastUpdatedTimestampSeconds = true;
      this.lastUpdatedTimestampSeconds_ = paramLong;
      return this;
    }
    
    public SharedTrafficCardEntry setSharerLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasSharerLocation = true;
      this.sharerLocation_ = paramLocation;
      return this;
    }
    
    public SharedTrafficCardEntry setSharerName(String paramString)
    {
      this.hasSharerName = true;
      this.sharerName_ = paramString;
      return this;
    }
    
    public SharedTrafficCardEntry setSharerObfuscatedGaiaId(long paramLong)
    {
      this.hasSharerObfuscatedGaiaId = true;
      this.sharerObfuscatedGaiaId_ = paramLong;
      return this;
    }
    
    public SharedTrafficCardEntry setSharerPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasSharerPhoto = true;
      this.sharerPhoto_ = paramPhoto;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasCommuteState()) {
        paramCodedOutputStreamMicro.writeInt32(1, getCommuteState());
      }
      if (hasSharerName()) {
        paramCodedOutputStreamMicro.writeString(2, getSharerName());
      }
      if (hasSharerPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(3, getSharerPhoto());
      }
      if (hasSharerObfuscatedGaiaId()) {
        paramCodedOutputStreamMicro.writeInt64(4, getSharerObfuscatedGaiaId());
      }
      if (hasSharerLocation()) {
        paramCodedOutputStreamMicro.writeMessage(5, getSharerLocation());
      }
      if (hasLabelOfStart()) {
        paramCodedOutputStreamMicro.writeString(6, getLabelOfStart());
      }
      if (hasLabelOfDestination()) {
        paramCodedOutputStreamMicro.writeString(7, getLabelOfDestination());
      }
      if (hasLastUpdatedTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(8, getLastUpdatedTimestampSeconds());
      }
      if (hasCommuteSummary()) {
        paramCodedOutputStreamMicro.writeMessage(9, getCommuteSummary());
      }
      if (hasCommuteStateText()) {
        paramCodedOutputStreamMicro.writeString(10, getCommuteStateText());
      }
      if (hasInterestedInProducerText()) {
        paramCodedOutputStreamMicro.writeString(11, getInterestedInProducerText());
      }
    }
  }
  
  public static final class SidekickConfiguration
    extends MessageMicro
  {
    private Birthday birthday_ = null;
    private int cachedSize = -1;
    private NotificationPolicy cardNotificationPolicy_ = null;
    private int commuteTravelMode_ = 0;
    private Currency currency_ = null;
    private EntrySourceGroup defaultGroup_ = null;
    private EventReservations eventReservations_ = null;
    private Flights flights_ = null;
    private boolean hasBirthday;
    private boolean hasCardNotificationPolicy;
    private boolean hasCommuteTravelMode;
    private boolean hasCurrency;
    private boolean hasDefaultGroup;
    private boolean hasEventReservations;
    private boolean hasFlights;
    private boolean hasHashId;
    private boolean hasHeavyTrafficGroup;
    private boolean hasInternalApiClients;
    private boolean hasLastModifiedTimeSeconds;
    private boolean hasLocationHistory;
    private boolean hasMovies;
    private boolean hasNews;
    private boolean hasNextMeeting;
    private boolean hasNotificationOverride;
    private boolean hasNowCardsDisabled;
    private boolean hasOtherTravelMode;
    private boolean hasPhotoSpot;
    private boolean hasPlaces;
    private boolean hasPublicAlerts;
    private boolean hasPublicAlertsGroup;
    private boolean hasRemindersGroup;
    private boolean hasResearchTopics;
    private boolean hasRestaurantReservations;
    private boolean hasShowCardMask;
    private boolean hasSports;
    private boolean hasStockQuotes;
    private boolean hasTicketsGroup;
    private boolean hasTraffic;
    private boolean hasTrafficCardSharing;
    private boolean hasTrafficDelayActiveAlertThresholdMinutes;
    private boolean hasTrafficQueryIntervalSeconds;
    private boolean hasTransitStations;
    private boolean hasTranslate;
    private boolean hasTravelClock;
    private boolean hasTravelMode;
    private boolean hasTravelTimeGroup;
    private boolean hasUnits;
    private boolean hasUseGmailData;
    private boolean hasWeather;
    private boolean hasWebsiteUpdate;
    private boolean hasWorkLabel;
    private String hashId_ = "";
    private EntrySourceGroup heavyTrafficGroup_ = null;
    private InternalApiClients internalApiClients_ = null;
    private long lastModifiedTimeSeconds_ = 0L;
    private LocationHistory locationHistory_ = null;
    private Movies movies_ = null;
    private News news_ = null;
    private NextMeeting nextMeeting_ = null;
    private int notificationOverride_ = 1;
    private boolean nowCardsDisabled_ = false;
    private int otherTravelMode_ = 0;
    private PhotoSpot photoSpot_ = null;
    private Places places_ = null;
    private EntrySourceGroup publicAlertsGroup_ = null;
    private PublicAlerts publicAlerts_ = null;
    private EntrySourceGroup remindersGroup_ = null;
    private ResearchTopics researchTopics_ = null;
    private RestaurantReservations restaurantReservations_ = null;
    private ShowCardMask showCardMask_ = null;
    private Sports sports_ = null;
    private StockQuotes stockQuotes_ = null;
    private EntrySourceGroup ticketsGroup_ = null;
    private TrafficCardSharing trafficCardSharing_ = null;
    private int trafficDelayActiveAlertThresholdMinutes_ = 5;
    private int trafficQueryIntervalSeconds_ = 300;
    private Traffic traffic_ = null;
    private TransitStations transitStations_ = null;
    private Translate translate_ = null;
    private TravelClock travelClock_ = null;
    private int travelMode_ = 0;
    private EntrySourceGroup travelTimeGroup_ = null;
    private int units_ = 1;
    private UseGmailData useGmailData_ = null;
    private Weather weather_ = null;
    private WebsiteUpdate websiteUpdate_ = null;
    private String workLabel_ = "";
    
    public Birthday getBirthday()
    {
      return this.birthday_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public NotificationPolicy getCardNotificationPolicy()
    {
      return this.cardNotificationPolicy_;
    }
    
    public int getCommuteTravelMode()
    {
      return this.commuteTravelMode_;
    }
    
    public Currency getCurrency()
    {
      return this.currency_;
    }
    
    public EntrySourceGroup getDefaultGroup()
    {
      return this.defaultGroup_;
    }
    
    public EventReservations getEventReservations()
    {
      return this.eventReservations_;
    }
    
    public Flights getFlights()
    {
      return this.flights_;
    }
    
    public String getHashId()
    {
      return this.hashId_;
    }
    
    public EntrySourceGroup getHeavyTrafficGroup()
    {
      return this.heavyTrafficGroup_;
    }
    
    public InternalApiClients getInternalApiClients()
    {
      return this.internalApiClients_;
    }
    
    public long getLastModifiedTimeSeconds()
    {
      return this.lastModifiedTimeSeconds_;
    }
    
    public LocationHistory getLocationHistory()
    {
      return this.locationHistory_;
    }
    
    public Movies getMovies()
    {
      return this.movies_;
    }
    
    public News getNews()
    {
      return this.news_;
    }
    
    public NextMeeting getNextMeeting()
    {
      return this.nextMeeting_;
    }
    
    public int getNotificationOverride()
    {
      return this.notificationOverride_;
    }
    
    public boolean getNowCardsDisabled()
    {
      return this.nowCardsDisabled_;
    }
    
    public int getOtherTravelMode()
    {
      return this.otherTravelMode_;
    }
    
    public PhotoSpot getPhotoSpot()
    {
      return this.photoSpot_;
    }
    
    public Places getPlaces()
    {
      return this.places_;
    }
    
    public PublicAlerts getPublicAlerts()
    {
      return this.publicAlerts_;
    }
    
    public EntrySourceGroup getPublicAlertsGroup()
    {
      return this.publicAlertsGroup_;
    }
    
    public EntrySourceGroup getRemindersGroup()
    {
      return this.remindersGroup_;
    }
    
    public ResearchTopics getResearchTopics()
    {
      return this.researchTopics_;
    }
    
    public RestaurantReservations getRestaurantReservations()
    {
      return this.restaurantReservations_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTrafficQueryIntervalSeconds();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getTrafficQueryIntervalSeconds());
      }
      if (hasTrafficDelayActiveAlertThresholdMinutes()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getTrafficDelayActiveAlertThresholdMinutes());
      }
      if (hasLastModifiedTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(3, getLastModifiedTimeSeconds());
      }
      if (hasTravelMode()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getTravelMode());
      }
      if (hasUnits()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getUnits());
      }
      if (hasShowCardMask()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, getShowCardMask());
      }
      if (hasWeather()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getWeather());
      }
      if (hasTraffic()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, getTraffic());
      }
      if (hasNextMeeting()) {
        i += CodedOutputStreamMicro.computeMessageSize(12, getNextMeeting());
      }
      if (hasFlights()) {
        i += CodedOutputStreamMicro.computeMessageSize(13, getFlights());
      }
      if (hasTransitStations()) {
        i += CodedOutputStreamMicro.computeMessageSize(14, getTransitStations());
      }
      if (hasPlaces()) {
        i += CodedOutputStreamMicro.computeMessageSize(15, getPlaces());
      }
      if (hasSports()) {
        i += CodedOutputStreamMicro.computeMessageSize(16, getSports());
      }
      if (hasCardNotificationPolicy()) {
        i += CodedOutputStreamMicro.computeMessageSize(17, getCardNotificationPolicy());
      }
      if (hasTranslate()) {
        i += CodedOutputStreamMicro.computeMessageSize(18, getTranslate());
      }
      if (hasCurrency()) {
        i += CodedOutputStreamMicro.computeMessageSize(19, getCurrency());
      }
      if (hasTravelClock()) {
        i += CodedOutputStreamMicro.computeMessageSize(20, getTravelClock());
      }
      if (hasWorkLabel()) {
        i += CodedOutputStreamMicro.computeStringSize(21, getWorkLabel());
      }
      if (hasNowCardsDisabled()) {
        i += CodedOutputStreamMicro.computeBoolSize(24, getNowCardsDisabled());
      }
      if (hasPublicAlerts()) {
        i += CodedOutputStreamMicro.computeMessageSize(26, getPublicAlerts());
      }
      if (hasMovies()) {
        i += CodedOutputStreamMicro.computeMessageSize(27, getMovies());
      }
      if (hasStockQuotes()) {
        i += CodedOutputStreamMicro.computeMessageSize(28, getStockQuotes());
      }
      if (hasNews()) {
        i += CodedOutputStreamMicro.computeMessageSize(29, getNews());
      }
      if (hasPhotoSpot()) {
        i += CodedOutputStreamMicro.computeMessageSize(31, getPhotoSpot());
      }
      if (hasUseGmailData()) {
        i += CodedOutputStreamMicro.computeMessageSize(33, getUseGmailData());
      }
      if (hasBirthday()) {
        i += CodedOutputStreamMicro.computeMessageSize(34, getBirthday());
      }
      if (hasHashId()) {
        i += CodedOutputStreamMicro.computeStringSize(35, getHashId());
      }
      if (hasResearchTopics()) {
        i += CodedOutputStreamMicro.computeMessageSize(36, getResearchTopics());
      }
      if (hasLocationHistory()) {
        i += CodedOutputStreamMicro.computeMessageSize(38, getLocationHistory());
      }
      if (hasRestaurantReservations()) {
        i += CodedOutputStreamMicro.computeMessageSize(39, getRestaurantReservations());
      }
      if (hasEventReservations()) {
        i += CodedOutputStreamMicro.computeMessageSize(40, getEventReservations());
      }
      if (hasCommuteTravelMode()) {
        i += CodedOutputStreamMicro.computeInt32Size(41, getCommuteTravelMode());
      }
      if (hasOtherTravelMode()) {
        i += CodedOutputStreamMicro.computeInt32Size(42, getOtherTravelMode());
      }
      if (hasNotificationOverride()) {
        i += CodedOutputStreamMicro.computeInt32Size(43, getNotificationOverride());
      }
      if (hasPublicAlertsGroup()) {
        i += CodedOutputStreamMicro.computeMessageSize(44, getPublicAlertsGroup());
      }
      if (hasTicketsGroup()) {
        i += CodedOutputStreamMicro.computeMessageSize(45, getTicketsGroup());
      }
      if (hasHeavyTrafficGroup()) {
        i += CodedOutputStreamMicro.computeMessageSize(46, getHeavyTrafficGroup());
      }
      if (hasTravelTimeGroup()) {
        i += CodedOutputStreamMicro.computeMessageSize(47, getTravelTimeGroup());
      }
      if (hasRemindersGroup()) {
        i += CodedOutputStreamMicro.computeMessageSize(48, getRemindersGroup());
      }
      if (hasDefaultGroup()) {
        i += CodedOutputStreamMicro.computeMessageSize(49, getDefaultGroup());
      }
      if (hasTrafficCardSharing()) {
        i += CodedOutputStreamMicro.computeMessageSize(51, getTrafficCardSharing());
      }
      if (hasInternalApiClients()) {
        i += CodedOutputStreamMicro.computeMessageSize(52, getInternalApiClients());
      }
      if (hasWebsiteUpdate()) {
        i += CodedOutputStreamMicro.computeMessageSize(53, getWebsiteUpdate());
      }
      this.cachedSize = i;
      return i;
    }
    
    public ShowCardMask getShowCardMask()
    {
      return this.showCardMask_;
    }
    
    public Sports getSports()
    {
      return this.sports_;
    }
    
    public StockQuotes getStockQuotes()
    {
      return this.stockQuotes_;
    }
    
    public EntrySourceGroup getTicketsGroup()
    {
      return this.ticketsGroup_;
    }
    
    public Traffic getTraffic()
    {
      return this.traffic_;
    }
    
    public TrafficCardSharing getTrafficCardSharing()
    {
      return this.trafficCardSharing_;
    }
    
    public int getTrafficDelayActiveAlertThresholdMinutes()
    {
      return this.trafficDelayActiveAlertThresholdMinutes_;
    }
    
    public int getTrafficQueryIntervalSeconds()
    {
      return this.trafficQueryIntervalSeconds_;
    }
    
    public TransitStations getTransitStations()
    {
      return this.transitStations_;
    }
    
    public Translate getTranslate()
    {
      return this.translate_;
    }
    
    public TravelClock getTravelClock()
    {
      return this.travelClock_;
    }
    
    public int getTravelMode()
    {
      return this.travelMode_;
    }
    
    public EntrySourceGroup getTravelTimeGroup()
    {
      return this.travelTimeGroup_;
    }
    
    public int getUnits()
    {
      return this.units_;
    }
    
    public UseGmailData getUseGmailData()
    {
      return this.useGmailData_;
    }
    
    public Weather getWeather()
    {
      return this.weather_;
    }
    
    public WebsiteUpdate getWebsiteUpdate()
    {
      return this.websiteUpdate_;
    }
    
    public String getWorkLabel()
    {
      return this.workLabel_;
    }
    
    public boolean hasBirthday()
    {
      return this.hasBirthday;
    }
    
    public boolean hasCardNotificationPolicy()
    {
      return this.hasCardNotificationPolicy;
    }
    
    public boolean hasCommuteTravelMode()
    {
      return this.hasCommuteTravelMode;
    }
    
    public boolean hasCurrency()
    {
      return this.hasCurrency;
    }
    
    public boolean hasDefaultGroup()
    {
      return this.hasDefaultGroup;
    }
    
    public boolean hasEventReservations()
    {
      return this.hasEventReservations;
    }
    
    public boolean hasFlights()
    {
      return this.hasFlights;
    }
    
    public boolean hasHashId()
    {
      return this.hasHashId;
    }
    
    public boolean hasHeavyTrafficGroup()
    {
      return this.hasHeavyTrafficGroup;
    }
    
    public boolean hasInternalApiClients()
    {
      return this.hasInternalApiClients;
    }
    
    public boolean hasLastModifiedTimeSeconds()
    {
      return this.hasLastModifiedTimeSeconds;
    }
    
    public boolean hasLocationHistory()
    {
      return this.hasLocationHistory;
    }
    
    public boolean hasMovies()
    {
      return this.hasMovies;
    }
    
    public boolean hasNews()
    {
      return this.hasNews;
    }
    
    public boolean hasNextMeeting()
    {
      return this.hasNextMeeting;
    }
    
    public boolean hasNotificationOverride()
    {
      return this.hasNotificationOverride;
    }
    
    public boolean hasNowCardsDisabled()
    {
      return this.hasNowCardsDisabled;
    }
    
    public boolean hasOtherTravelMode()
    {
      return this.hasOtherTravelMode;
    }
    
    public boolean hasPhotoSpot()
    {
      return this.hasPhotoSpot;
    }
    
    public boolean hasPlaces()
    {
      return this.hasPlaces;
    }
    
    public boolean hasPublicAlerts()
    {
      return this.hasPublicAlerts;
    }
    
    public boolean hasPublicAlertsGroup()
    {
      return this.hasPublicAlertsGroup;
    }
    
    public boolean hasRemindersGroup()
    {
      return this.hasRemindersGroup;
    }
    
    public boolean hasResearchTopics()
    {
      return this.hasResearchTopics;
    }
    
    public boolean hasRestaurantReservations()
    {
      return this.hasRestaurantReservations;
    }
    
    public boolean hasShowCardMask()
    {
      return this.hasShowCardMask;
    }
    
    public boolean hasSports()
    {
      return this.hasSports;
    }
    
    public boolean hasStockQuotes()
    {
      return this.hasStockQuotes;
    }
    
    public boolean hasTicketsGroup()
    {
      return this.hasTicketsGroup;
    }
    
    public boolean hasTraffic()
    {
      return this.hasTraffic;
    }
    
    public boolean hasTrafficCardSharing()
    {
      return this.hasTrafficCardSharing;
    }
    
    public boolean hasTrafficDelayActiveAlertThresholdMinutes()
    {
      return this.hasTrafficDelayActiveAlertThresholdMinutes;
    }
    
    public boolean hasTrafficQueryIntervalSeconds()
    {
      return this.hasTrafficQueryIntervalSeconds;
    }
    
    public boolean hasTransitStations()
    {
      return this.hasTransitStations;
    }
    
    public boolean hasTranslate()
    {
      return this.hasTranslate;
    }
    
    public boolean hasTravelClock()
    {
      return this.hasTravelClock;
    }
    
    public boolean hasTravelMode()
    {
      return this.hasTravelMode;
    }
    
    public boolean hasTravelTimeGroup()
    {
      return this.hasTravelTimeGroup;
    }
    
    public boolean hasUnits()
    {
      return this.hasUnits;
    }
    
    public boolean hasUseGmailData()
    {
      return this.hasUseGmailData;
    }
    
    public boolean hasWeather()
    {
      return this.hasWeather;
    }
    
    public boolean hasWebsiteUpdate()
    {
      return this.hasWebsiteUpdate;
    }
    
    public boolean hasWorkLabel()
    {
      return this.hasWorkLabel;
    }
    
    public SidekickConfiguration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setTrafficQueryIntervalSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 16: 
          setTrafficDelayActiveAlertThresholdMinutes(paramCodedInputStreamMicro.readInt32());
          break;
        case 24: 
          setLastModifiedTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 32: 
          setTravelMode(paramCodedInputStreamMicro.readInt32());
          break;
        case 40: 
          setUnits(paramCodedInputStreamMicro.readInt32());
          break;
        case 50: 
          ShowCardMask localShowCardMask = new ShowCardMask();
          paramCodedInputStreamMicro.readMessage(localShowCardMask);
          setShowCardMask(localShowCardMask);
          break;
        case 82: 
          Weather localWeather = new Weather();
          paramCodedInputStreamMicro.readMessage(localWeather);
          setWeather(localWeather);
          break;
        case 90: 
          Traffic localTraffic = new Traffic();
          paramCodedInputStreamMicro.readMessage(localTraffic);
          setTraffic(localTraffic);
          break;
        case 98: 
          NextMeeting localNextMeeting = new NextMeeting();
          paramCodedInputStreamMicro.readMessage(localNextMeeting);
          setNextMeeting(localNextMeeting);
          break;
        case 106: 
          Flights localFlights = new Flights();
          paramCodedInputStreamMicro.readMessage(localFlights);
          setFlights(localFlights);
          break;
        case 114: 
          TransitStations localTransitStations = new TransitStations();
          paramCodedInputStreamMicro.readMessage(localTransitStations);
          setTransitStations(localTransitStations);
          break;
        case 122: 
          Places localPlaces = new Places();
          paramCodedInputStreamMicro.readMessage(localPlaces);
          setPlaces(localPlaces);
          break;
        case 130: 
          Sports localSports = new Sports();
          paramCodedInputStreamMicro.readMessage(localSports);
          setSports(localSports);
          break;
        case 138: 
          NotificationPolicy localNotificationPolicy = new NotificationPolicy();
          paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
          setCardNotificationPolicy(localNotificationPolicy);
          break;
        case 146: 
          Translate localTranslate = new Translate();
          paramCodedInputStreamMicro.readMessage(localTranslate);
          setTranslate(localTranslate);
          break;
        case 154: 
          Currency localCurrency = new Currency();
          paramCodedInputStreamMicro.readMessage(localCurrency);
          setCurrency(localCurrency);
          break;
        case 162: 
          TravelClock localTravelClock = new TravelClock();
          paramCodedInputStreamMicro.readMessage(localTravelClock);
          setTravelClock(localTravelClock);
          break;
        case 170: 
          setWorkLabel(paramCodedInputStreamMicro.readString());
          break;
        case 192: 
          setNowCardsDisabled(paramCodedInputStreamMicro.readBool());
          break;
        case 210: 
          PublicAlerts localPublicAlerts = new PublicAlerts();
          paramCodedInputStreamMicro.readMessage(localPublicAlerts);
          setPublicAlerts(localPublicAlerts);
          break;
        case 218: 
          Movies localMovies = new Movies();
          paramCodedInputStreamMicro.readMessage(localMovies);
          setMovies(localMovies);
          break;
        case 226: 
          StockQuotes localStockQuotes = new StockQuotes();
          paramCodedInputStreamMicro.readMessage(localStockQuotes);
          setStockQuotes(localStockQuotes);
          break;
        case 234: 
          News localNews = new News();
          paramCodedInputStreamMicro.readMessage(localNews);
          setNews(localNews);
          break;
        case 250: 
          PhotoSpot localPhotoSpot = new PhotoSpot();
          paramCodedInputStreamMicro.readMessage(localPhotoSpot);
          setPhotoSpot(localPhotoSpot);
          break;
        case 266: 
          UseGmailData localUseGmailData = new UseGmailData();
          paramCodedInputStreamMicro.readMessage(localUseGmailData);
          setUseGmailData(localUseGmailData);
          break;
        case 274: 
          Birthday localBirthday = new Birthday();
          paramCodedInputStreamMicro.readMessage(localBirthday);
          setBirthday(localBirthday);
          break;
        case 282: 
          setHashId(paramCodedInputStreamMicro.readString());
          break;
        case 290: 
          ResearchTopics localResearchTopics = new ResearchTopics();
          paramCodedInputStreamMicro.readMessage(localResearchTopics);
          setResearchTopics(localResearchTopics);
          break;
        case 306: 
          LocationHistory localLocationHistory = new LocationHistory();
          paramCodedInputStreamMicro.readMessage(localLocationHistory);
          setLocationHistory(localLocationHistory);
          break;
        case 314: 
          RestaurantReservations localRestaurantReservations = new RestaurantReservations();
          paramCodedInputStreamMicro.readMessage(localRestaurantReservations);
          setRestaurantReservations(localRestaurantReservations);
          break;
        case 322: 
          EventReservations localEventReservations = new EventReservations();
          paramCodedInputStreamMicro.readMessage(localEventReservations);
          setEventReservations(localEventReservations);
          break;
        case 328: 
          setCommuteTravelMode(paramCodedInputStreamMicro.readInt32());
          break;
        case 336: 
          setOtherTravelMode(paramCodedInputStreamMicro.readInt32());
          break;
        case 344: 
          setNotificationOverride(paramCodedInputStreamMicro.readInt32());
          break;
        case 354: 
          EntrySourceGroup localEntrySourceGroup6 = new EntrySourceGroup();
          paramCodedInputStreamMicro.readMessage(localEntrySourceGroup6);
          setPublicAlertsGroup(localEntrySourceGroup6);
          break;
        case 362: 
          EntrySourceGroup localEntrySourceGroup5 = new EntrySourceGroup();
          paramCodedInputStreamMicro.readMessage(localEntrySourceGroup5);
          setTicketsGroup(localEntrySourceGroup5);
          break;
        case 370: 
          EntrySourceGroup localEntrySourceGroup4 = new EntrySourceGroup();
          paramCodedInputStreamMicro.readMessage(localEntrySourceGroup4);
          setHeavyTrafficGroup(localEntrySourceGroup4);
          break;
        case 378: 
          EntrySourceGroup localEntrySourceGroup3 = new EntrySourceGroup();
          paramCodedInputStreamMicro.readMessage(localEntrySourceGroup3);
          setTravelTimeGroup(localEntrySourceGroup3);
          break;
        case 386: 
          EntrySourceGroup localEntrySourceGroup2 = new EntrySourceGroup();
          paramCodedInputStreamMicro.readMessage(localEntrySourceGroup2);
          setRemindersGroup(localEntrySourceGroup2);
          break;
        case 394: 
          EntrySourceGroup localEntrySourceGroup1 = new EntrySourceGroup();
          paramCodedInputStreamMicro.readMessage(localEntrySourceGroup1);
          setDefaultGroup(localEntrySourceGroup1);
          break;
        case 410: 
          TrafficCardSharing localTrafficCardSharing = new TrafficCardSharing();
          paramCodedInputStreamMicro.readMessage(localTrafficCardSharing);
          setTrafficCardSharing(localTrafficCardSharing);
          break;
        case 418: 
          InternalApiClients localInternalApiClients = new InternalApiClients();
          paramCodedInputStreamMicro.readMessage(localInternalApiClients);
          setInternalApiClients(localInternalApiClients);
          break;
        }
        WebsiteUpdate localWebsiteUpdate = new WebsiteUpdate();
        paramCodedInputStreamMicro.readMessage(localWebsiteUpdate);
        setWebsiteUpdate(localWebsiteUpdate);
      }
    }
    
    public SidekickConfiguration setBirthday(Birthday paramBirthday)
    {
      if (paramBirthday == null) {
        throw new NullPointerException();
      }
      this.hasBirthday = true;
      this.birthday_ = paramBirthday;
      return this;
    }
    
    public SidekickConfiguration setCardNotificationPolicy(NotificationPolicy paramNotificationPolicy)
    {
      if (paramNotificationPolicy == null) {
        throw new NullPointerException();
      }
      this.hasCardNotificationPolicy = true;
      this.cardNotificationPolicy_ = paramNotificationPolicy;
      return this;
    }
    
    public SidekickConfiguration setCommuteTravelMode(int paramInt)
    {
      this.hasCommuteTravelMode = true;
      this.commuteTravelMode_ = paramInt;
      return this;
    }
    
    public SidekickConfiguration setCurrency(Currency paramCurrency)
    {
      if (paramCurrency == null) {
        throw new NullPointerException();
      }
      this.hasCurrency = true;
      this.currency_ = paramCurrency;
      return this;
    }
    
    public SidekickConfiguration setDefaultGroup(EntrySourceGroup paramEntrySourceGroup)
    {
      if (paramEntrySourceGroup == null) {
        throw new NullPointerException();
      }
      this.hasDefaultGroup = true;
      this.defaultGroup_ = paramEntrySourceGroup;
      return this;
    }
    
    public SidekickConfiguration setEventReservations(EventReservations paramEventReservations)
    {
      if (paramEventReservations == null) {
        throw new NullPointerException();
      }
      this.hasEventReservations = true;
      this.eventReservations_ = paramEventReservations;
      return this;
    }
    
    public SidekickConfiguration setFlights(Flights paramFlights)
    {
      if (paramFlights == null) {
        throw new NullPointerException();
      }
      this.hasFlights = true;
      this.flights_ = paramFlights;
      return this;
    }
    
    public SidekickConfiguration setHashId(String paramString)
    {
      this.hasHashId = true;
      this.hashId_ = paramString;
      return this;
    }
    
    public SidekickConfiguration setHeavyTrafficGroup(EntrySourceGroup paramEntrySourceGroup)
    {
      if (paramEntrySourceGroup == null) {
        throw new NullPointerException();
      }
      this.hasHeavyTrafficGroup = true;
      this.heavyTrafficGroup_ = paramEntrySourceGroup;
      return this;
    }
    
    public SidekickConfiguration setInternalApiClients(InternalApiClients paramInternalApiClients)
    {
      if (paramInternalApiClients == null) {
        throw new NullPointerException();
      }
      this.hasInternalApiClients = true;
      this.internalApiClients_ = paramInternalApiClients;
      return this;
    }
    
    public SidekickConfiguration setLastModifiedTimeSeconds(long paramLong)
    {
      this.hasLastModifiedTimeSeconds = true;
      this.lastModifiedTimeSeconds_ = paramLong;
      return this;
    }
    
    public SidekickConfiguration setLocationHistory(LocationHistory paramLocationHistory)
    {
      if (paramLocationHistory == null) {
        throw new NullPointerException();
      }
      this.hasLocationHistory = true;
      this.locationHistory_ = paramLocationHistory;
      return this;
    }
    
    public SidekickConfiguration setMovies(Movies paramMovies)
    {
      if (paramMovies == null) {
        throw new NullPointerException();
      }
      this.hasMovies = true;
      this.movies_ = paramMovies;
      return this;
    }
    
    public SidekickConfiguration setNews(News paramNews)
    {
      if (paramNews == null) {
        throw new NullPointerException();
      }
      this.hasNews = true;
      this.news_ = paramNews;
      return this;
    }
    
    public SidekickConfiguration setNextMeeting(NextMeeting paramNextMeeting)
    {
      if (paramNextMeeting == null) {
        throw new NullPointerException();
      }
      this.hasNextMeeting = true;
      this.nextMeeting_ = paramNextMeeting;
      return this;
    }
    
    public SidekickConfiguration setNotificationOverride(int paramInt)
    {
      this.hasNotificationOverride = true;
      this.notificationOverride_ = paramInt;
      return this;
    }
    
    public SidekickConfiguration setNowCardsDisabled(boolean paramBoolean)
    {
      this.hasNowCardsDisabled = true;
      this.nowCardsDisabled_ = paramBoolean;
      return this;
    }
    
    public SidekickConfiguration setOtherTravelMode(int paramInt)
    {
      this.hasOtherTravelMode = true;
      this.otherTravelMode_ = paramInt;
      return this;
    }
    
    public SidekickConfiguration setPhotoSpot(PhotoSpot paramPhotoSpot)
    {
      if (paramPhotoSpot == null) {
        throw new NullPointerException();
      }
      this.hasPhotoSpot = true;
      this.photoSpot_ = paramPhotoSpot;
      return this;
    }
    
    public SidekickConfiguration setPlaces(Places paramPlaces)
    {
      if (paramPlaces == null) {
        throw new NullPointerException();
      }
      this.hasPlaces = true;
      this.places_ = paramPlaces;
      return this;
    }
    
    public SidekickConfiguration setPublicAlerts(PublicAlerts paramPublicAlerts)
    {
      if (paramPublicAlerts == null) {
        throw new NullPointerException();
      }
      this.hasPublicAlerts = true;
      this.publicAlerts_ = paramPublicAlerts;
      return this;
    }
    
    public SidekickConfiguration setPublicAlertsGroup(EntrySourceGroup paramEntrySourceGroup)
    {
      if (paramEntrySourceGroup == null) {
        throw new NullPointerException();
      }
      this.hasPublicAlertsGroup = true;
      this.publicAlertsGroup_ = paramEntrySourceGroup;
      return this;
    }
    
    public SidekickConfiguration setRemindersGroup(EntrySourceGroup paramEntrySourceGroup)
    {
      if (paramEntrySourceGroup == null) {
        throw new NullPointerException();
      }
      this.hasRemindersGroup = true;
      this.remindersGroup_ = paramEntrySourceGroup;
      return this;
    }
    
    public SidekickConfiguration setResearchTopics(ResearchTopics paramResearchTopics)
    {
      if (paramResearchTopics == null) {
        throw new NullPointerException();
      }
      this.hasResearchTopics = true;
      this.researchTopics_ = paramResearchTopics;
      return this;
    }
    
    public SidekickConfiguration setRestaurantReservations(RestaurantReservations paramRestaurantReservations)
    {
      if (paramRestaurantReservations == null) {
        throw new NullPointerException();
      }
      this.hasRestaurantReservations = true;
      this.restaurantReservations_ = paramRestaurantReservations;
      return this;
    }
    
    public SidekickConfiguration setShowCardMask(ShowCardMask paramShowCardMask)
    {
      if (paramShowCardMask == null) {
        throw new NullPointerException();
      }
      this.hasShowCardMask = true;
      this.showCardMask_ = paramShowCardMask;
      return this;
    }
    
    public SidekickConfiguration setSports(Sports paramSports)
    {
      if (paramSports == null) {
        throw new NullPointerException();
      }
      this.hasSports = true;
      this.sports_ = paramSports;
      return this;
    }
    
    public SidekickConfiguration setStockQuotes(StockQuotes paramStockQuotes)
    {
      if (paramStockQuotes == null) {
        throw new NullPointerException();
      }
      this.hasStockQuotes = true;
      this.stockQuotes_ = paramStockQuotes;
      return this;
    }
    
    public SidekickConfiguration setTicketsGroup(EntrySourceGroup paramEntrySourceGroup)
    {
      if (paramEntrySourceGroup == null) {
        throw new NullPointerException();
      }
      this.hasTicketsGroup = true;
      this.ticketsGroup_ = paramEntrySourceGroup;
      return this;
    }
    
    public SidekickConfiguration setTraffic(Traffic paramTraffic)
    {
      if (paramTraffic == null) {
        throw new NullPointerException();
      }
      this.hasTraffic = true;
      this.traffic_ = paramTraffic;
      return this;
    }
    
    public SidekickConfiguration setTrafficCardSharing(TrafficCardSharing paramTrafficCardSharing)
    {
      if (paramTrafficCardSharing == null) {
        throw new NullPointerException();
      }
      this.hasTrafficCardSharing = true;
      this.trafficCardSharing_ = paramTrafficCardSharing;
      return this;
    }
    
    public SidekickConfiguration setTrafficDelayActiveAlertThresholdMinutes(int paramInt)
    {
      this.hasTrafficDelayActiveAlertThresholdMinutes = true;
      this.trafficDelayActiveAlertThresholdMinutes_ = paramInt;
      return this;
    }
    
    public SidekickConfiguration setTrafficQueryIntervalSeconds(int paramInt)
    {
      this.hasTrafficQueryIntervalSeconds = true;
      this.trafficQueryIntervalSeconds_ = paramInt;
      return this;
    }
    
    public SidekickConfiguration setTransitStations(TransitStations paramTransitStations)
    {
      if (paramTransitStations == null) {
        throw new NullPointerException();
      }
      this.hasTransitStations = true;
      this.transitStations_ = paramTransitStations;
      return this;
    }
    
    public SidekickConfiguration setTranslate(Translate paramTranslate)
    {
      if (paramTranslate == null) {
        throw new NullPointerException();
      }
      this.hasTranslate = true;
      this.translate_ = paramTranslate;
      return this;
    }
    
    public SidekickConfiguration setTravelClock(TravelClock paramTravelClock)
    {
      if (paramTravelClock == null) {
        throw new NullPointerException();
      }
      this.hasTravelClock = true;
      this.travelClock_ = paramTravelClock;
      return this;
    }
    
    public SidekickConfiguration setTravelMode(int paramInt)
    {
      this.hasTravelMode = true;
      this.travelMode_ = paramInt;
      return this;
    }
    
    public SidekickConfiguration setTravelTimeGroup(EntrySourceGroup paramEntrySourceGroup)
    {
      if (paramEntrySourceGroup == null) {
        throw new NullPointerException();
      }
      this.hasTravelTimeGroup = true;
      this.travelTimeGroup_ = paramEntrySourceGroup;
      return this;
    }
    
    public SidekickConfiguration setUnits(int paramInt)
    {
      this.hasUnits = true;
      this.units_ = paramInt;
      return this;
    }
    
    public SidekickConfiguration setUseGmailData(UseGmailData paramUseGmailData)
    {
      if (paramUseGmailData == null) {
        throw new NullPointerException();
      }
      this.hasUseGmailData = true;
      this.useGmailData_ = paramUseGmailData;
      return this;
    }
    
    public SidekickConfiguration setWeather(Weather paramWeather)
    {
      if (paramWeather == null) {
        throw new NullPointerException();
      }
      this.hasWeather = true;
      this.weather_ = paramWeather;
      return this;
    }
    
    public SidekickConfiguration setWebsiteUpdate(WebsiteUpdate paramWebsiteUpdate)
    {
      if (paramWebsiteUpdate == null) {
        throw new NullPointerException();
      }
      this.hasWebsiteUpdate = true;
      this.websiteUpdate_ = paramWebsiteUpdate;
      return this;
    }
    
    public SidekickConfiguration setWorkLabel(String paramString)
    {
      this.hasWorkLabel = true;
      this.workLabel_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTrafficQueryIntervalSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(1, getTrafficQueryIntervalSeconds());
      }
      if (hasTrafficDelayActiveAlertThresholdMinutes()) {
        paramCodedOutputStreamMicro.writeInt32(2, getTrafficDelayActiveAlertThresholdMinutes());
      }
      if (hasLastModifiedTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(3, getLastModifiedTimeSeconds());
      }
      if (hasTravelMode()) {
        paramCodedOutputStreamMicro.writeInt32(4, getTravelMode());
      }
      if (hasUnits()) {
        paramCodedOutputStreamMicro.writeInt32(5, getUnits());
      }
      if (hasShowCardMask()) {
        paramCodedOutputStreamMicro.writeMessage(6, getShowCardMask());
      }
      if (hasWeather()) {
        paramCodedOutputStreamMicro.writeMessage(10, getWeather());
      }
      if (hasTraffic()) {
        paramCodedOutputStreamMicro.writeMessage(11, getTraffic());
      }
      if (hasNextMeeting()) {
        paramCodedOutputStreamMicro.writeMessage(12, getNextMeeting());
      }
      if (hasFlights()) {
        paramCodedOutputStreamMicro.writeMessage(13, getFlights());
      }
      if (hasTransitStations()) {
        paramCodedOutputStreamMicro.writeMessage(14, getTransitStations());
      }
      if (hasPlaces()) {
        paramCodedOutputStreamMicro.writeMessage(15, getPlaces());
      }
      if (hasSports()) {
        paramCodedOutputStreamMicro.writeMessage(16, getSports());
      }
      if (hasCardNotificationPolicy()) {
        paramCodedOutputStreamMicro.writeMessage(17, getCardNotificationPolicy());
      }
      if (hasTranslate()) {
        paramCodedOutputStreamMicro.writeMessage(18, getTranslate());
      }
      if (hasCurrency()) {
        paramCodedOutputStreamMicro.writeMessage(19, getCurrency());
      }
      if (hasTravelClock()) {
        paramCodedOutputStreamMicro.writeMessage(20, getTravelClock());
      }
      if (hasWorkLabel()) {
        paramCodedOutputStreamMicro.writeString(21, getWorkLabel());
      }
      if (hasNowCardsDisabled()) {
        paramCodedOutputStreamMicro.writeBool(24, getNowCardsDisabled());
      }
      if (hasPublicAlerts()) {
        paramCodedOutputStreamMicro.writeMessage(26, getPublicAlerts());
      }
      if (hasMovies()) {
        paramCodedOutputStreamMicro.writeMessage(27, getMovies());
      }
      if (hasStockQuotes()) {
        paramCodedOutputStreamMicro.writeMessage(28, getStockQuotes());
      }
      if (hasNews()) {
        paramCodedOutputStreamMicro.writeMessage(29, getNews());
      }
      if (hasPhotoSpot()) {
        paramCodedOutputStreamMicro.writeMessage(31, getPhotoSpot());
      }
      if (hasUseGmailData()) {
        paramCodedOutputStreamMicro.writeMessage(33, getUseGmailData());
      }
      if (hasBirthday()) {
        paramCodedOutputStreamMicro.writeMessage(34, getBirthday());
      }
      if (hasHashId()) {
        paramCodedOutputStreamMicro.writeString(35, getHashId());
      }
      if (hasResearchTopics()) {
        paramCodedOutputStreamMicro.writeMessage(36, getResearchTopics());
      }
      if (hasLocationHistory()) {
        paramCodedOutputStreamMicro.writeMessage(38, getLocationHistory());
      }
      if (hasRestaurantReservations()) {
        paramCodedOutputStreamMicro.writeMessage(39, getRestaurantReservations());
      }
      if (hasEventReservations()) {
        paramCodedOutputStreamMicro.writeMessage(40, getEventReservations());
      }
      if (hasCommuteTravelMode()) {
        paramCodedOutputStreamMicro.writeInt32(41, getCommuteTravelMode());
      }
      if (hasOtherTravelMode()) {
        paramCodedOutputStreamMicro.writeInt32(42, getOtherTravelMode());
      }
      if (hasNotificationOverride()) {
        paramCodedOutputStreamMicro.writeInt32(43, getNotificationOverride());
      }
      if (hasPublicAlertsGroup()) {
        paramCodedOutputStreamMicro.writeMessage(44, getPublicAlertsGroup());
      }
      if (hasTicketsGroup()) {
        paramCodedOutputStreamMicro.writeMessage(45, getTicketsGroup());
      }
      if (hasHeavyTrafficGroup()) {
        paramCodedOutputStreamMicro.writeMessage(46, getHeavyTrafficGroup());
      }
      if (hasTravelTimeGroup()) {
        paramCodedOutputStreamMicro.writeMessage(47, getTravelTimeGroup());
      }
      if (hasRemindersGroup()) {
        paramCodedOutputStreamMicro.writeMessage(48, getRemindersGroup());
      }
      if (hasDefaultGroup()) {
        paramCodedOutputStreamMicro.writeMessage(49, getDefaultGroup());
      }
      if (hasTrafficCardSharing()) {
        paramCodedOutputStreamMicro.writeMessage(51, getTrafficCardSharing());
      }
      if (hasInternalApiClients()) {
        paramCodedOutputStreamMicro.writeMessage(52, getInternalApiClients());
      }
      if (hasWebsiteUpdate()) {
        paramCodedOutputStreamMicro.writeMessage(53, getWebsiteUpdate());
      }
    }
    
    public static final class Birthday
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasShowFriend;
      private boolean hasShowOwn;
      private boolean showFriend_ = true;
      private boolean showOwn_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasShowFriend();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getShowFriend());
        }
        if (hasShowOwn()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowOwn());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowFriend()
      {
        return this.showFriend_;
      }
      
      public boolean getShowOwn()
      {
        return this.showOwn_;
      }
      
      public boolean hasShowFriend()
      {
        return this.hasShowFriend;
      }
      
      public boolean hasShowOwn()
      {
        return this.hasShowOwn;
      }
      
      public Birthday mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setShowFriend(paramCodedInputStreamMicro.readBool());
            break;
          }
          setShowOwn(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public Birthday setShowFriend(boolean paramBoolean)
      {
        this.hasShowFriend = true;
        this.showFriend_ = paramBoolean;
        return this;
      }
      
      public Birthday setShowOwn(boolean paramBoolean)
      {
        this.hasShowOwn = true;
        this.showOwn_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasShowFriend()) {
          paramCodedOutputStreamMicro.writeBool(1, getShowFriend());
        }
        if (hasShowOwn()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowOwn());
        }
      }
    }
    
    public static final class Currency
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasShowWhenCurrencyDifferent;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private boolean showWhenCurrencyDifferent_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowWhenCurrencyDifferent()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowWhenCurrencyDifferent());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowWhenCurrencyDifferent()
      {
        return this.showWhenCurrencyDifferent_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasShowWhenCurrencyDifferent()
      {
        return this.hasShowWhenCurrencyDifferent;
      }
      
      public Currency mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          }
          setShowWhenCurrencyDifferent(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public Currency setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public Currency setShowWhenCurrencyDifferent(boolean paramBoolean)
      {
        this.hasShowWhenCurrencyDifferent = true;
        this.showWhenCurrencyDifferent_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowWhenCurrencyDifferent()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowWhenCurrencyDifferent());
        }
      }
    }
    
    public static final class EntrySourceGroup
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotification;
      private int notification_ = 1;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getNotification()
      {
        return this.notification_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotification();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getNotification());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasNotification()
      {
        return this.hasNotification;
      }
      
      public EntrySourceGroup mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          setNotification(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public EntrySourceGroup setNotification(int paramInt)
      {
        this.hasNotification = true;
        this.notification_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotification()) {
          paramCodedOutputStreamMicro.writeInt32(1, getNotification());
        }
      }
    }
    
    public static final class EventReservations
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationSetting;
      private int notificationSetting_ = 2;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationSetting();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getNotificationSetting());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public EventReservations mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          setNotificationSetting(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public EventReservations setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(1, getNotificationSetting());
        }
      }
    }
    
    public static final class Flights
      extends MessageMicro
    {
      private int cachedSize = -1;
      private int domesticArriveMinutesBefore_ = 60;
      private boolean hasDomesticArriveMinutesBefore;
      private boolean hasInternationalArriveMinutesBefore;
      private boolean hasNotificationPolicy;
      private boolean hasNotificationSetting;
      private boolean hasNotificationSettingForTimeToLeave;
      private boolean hasShowFromEmail;
      private boolean hasShowFromRecentSearch;
      private int internationalArriveMinutesBefore_ = 120;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private int notificationSettingForTimeToLeave_ = 2;
      private int notificationSetting_ = 1;
      private boolean showFromEmail_ = true;
      private boolean showFromRecentSearch_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getDomesticArriveMinutesBefore()
      {
        return this.domesticArriveMinutesBefore_;
      }
      
      public int getInternationalArriveMinutesBefore()
      {
        return this.internationalArriveMinutesBefore_;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getNotificationSettingForTimeToLeave()
      {
        return this.notificationSettingForTimeToLeave_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowFromRecentSearch()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowFromRecentSearch());
        }
        if (hasShowFromEmail()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowFromEmail());
        }
        if (hasNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(4, getNotificationSetting());
        }
        if (hasDomesticArriveMinutesBefore()) {
          i += CodedOutputStreamMicro.computeInt32Size(5, getDomesticArriveMinutesBefore());
        }
        if (hasInternationalArriveMinutesBefore()) {
          i += CodedOutputStreamMicro.computeInt32Size(6, getInternationalArriveMinutesBefore());
        }
        if (hasNotificationSettingForTimeToLeave()) {
          i += CodedOutputStreamMicro.computeInt32Size(7, getNotificationSettingForTimeToLeave());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowFromEmail()
      {
        return this.showFromEmail_;
      }
      
      public boolean getShowFromRecentSearch()
      {
        return this.showFromRecentSearch_;
      }
      
      public boolean hasDomesticArriveMinutesBefore()
      {
        return this.hasDomesticArriveMinutesBefore;
      }
      
      public boolean hasInternationalArriveMinutesBefore()
      {
        return this.hasInternationalArriveMinutesBefore;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public boolean hasNotificationSettingForTimeToLeave()
      {
        return this.hasNotificationSettingForTimeToLeave;
      }
      
      public boolean hasShowFromEmail()
      {
        return this.hasShowFromEmail;
      }
      
      public boolean hasShowFromRecentSearch()
      {
        return this.hasShowFromRecentSearch;
      }
      
      public Flights mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setShowFromRecentSearch(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowFromEmail(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setNotificationSetting(paramCodedInputStreamMicro.readInt32());
            break;
          case 40: 
            setDomesticArriveMinutesBefore(paramCodedInputStreamMicro.readInt32());
            break;
          case 48: 
            setInternationalArriveMinutesBefore(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setNotificationSettingForTimeToLeave(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public Flights setDomesticArriveMinutesBefore(int paramInt)
      {
        this.hasDomesticArriveMinutesBefore = true;
        this.domesticArriveMinutesBefore_ = paramInt;
        return this;
      }
      
      public Flights setInternationalArriveMinutesBefore(int paramInt)
      {
        this.hasInternationalArriveMinutesBefore = true;
        this.internationalArriveMinutesBefore_ = paramInt;
        return this;
      }
      
      public Flights setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public Flights setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public Flights setNotificationSettingForTimeToLeave(int paramInt)
      {
        this.hasNotificationSettingForTimeToLeave = true;
        this.notificationSettingForTimeToLeave_ = paramInt;
        return this;
      }
      
      public Flights setShowFromEmail(boolean paramBoolean)
      {
        this.hasShowFromEmail = true;
        this.showFromEmail_ = paramBoolean;
        return this;
      }
      
      public Flights setShowFromRecentSearch(boolean paramBoolean)
      {
        this.hasShowFromRecentSearch = true;
        this.showFromRecentSearch_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowFromRecentSearch()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowFromRecentSearch());
        }
        if (hasShowFromEmail()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowFromEmail());
        }
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(4, getNotificationSetting());
        }
        if (hasDomesticArriveMinutesBefore()) {
          paramCodedOutputStreamMicro.writeInt32(5, getDomesticArriveMinutesBefore());
        }
        if (hasInternationalArriveMinutesBefore()) {
          paramCodedOutputStreamMicro.writeInt32(6, getInternationalArriveMinutesBefore());
        }
        if (hasNotificationSettingForTimeToLeave()) {
          paramCodedOutputStreamMicro.writeInt32(7, getNotificationSettingForTimeToLeave());
        }
      }
    }
    
    public static final class InternalApiClients
      extends MessageMicro
    {
      private int cachedSize = -1;
      private List<ClientSetting> clientSetting_ = Collections.emptyList();
      
      public InternalApiClients addClientSetting(ClientSetting paramClientSetting)
      {
        if (paramClientSetting == null) {
          throw new NullPointerException();
        }
        if (this.clientSetting_.isEmpty()) {
          this.clientSetting_ = new ArrayList();
        }
        this.clientSetting_.add(paramClientSetting);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public List<ClientSetting> getClientSettingList()
      {
        return this.clientSetting_;
      }
      
      public int getSerializedSize()
      {
        int i = 0;
        Iterator localIterator = getClientSettingList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(1, (ClientSetting)localIterator.next());
        }
        this.cachedSize = i;
        return i;
      }
      
      public InternalApiClients mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          ClientSetting localClientSetting = new ClientSetting();
          paramCodedInputStreamMicro.readMessage(localClientSetting);
          addClientSetting(localClientSetting);
        }
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        Iterator localIterator = getClientSettingList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(1, (ClientSetting)localIterator.next());
        }
      }
      
      public static final class ClientSetting
        extends MessageMicro
      {
        private int cachedSize = -1;
        private int clientId_ = 0;
        private boolean hasClientId;
        private boolean hasOn;
        private boolean on_ = false;
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public int getClientId()
        {
          return this.clientId_;
        }
        
        public boolean getOn()
        {
          return this.on_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasClientId();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getClientId());
          }
          if (hasOn()) {
            i += CodedOutputStreamMicro.computeBoolSize(2, getOn());
          }
          this.cachedSize = i;
          return i;
        }
        
        public boolean hasClientId()
        {
          return this.hasClientId;
        }
        
        public boolean hasOn()
        {
          return this.hasOn;
        }
        
        public ClientSetting mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 8: 
              setClientId(paramCodedInputStreamMicro.readInt32());
              break;
            }
            setOn(paramCodedInputStreamMicro.readBool());
          }
        }
        
        public ClientSetting setClientId(int paramInt)
        {
          this.hasClientId = true;
          this.clientId_ = paramInt;
          return this;
        }
        
        public ClientSetting setOn(boolean paramBoolean)
        {
          this.hasOn = true;
          this.on_ = paramBoolean;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasClientId()) {
            paramCodedOutputStreamMicro.writeInt32(1, getClientId());
          }
          if (hasOn()) {
            paramCodedOutputStreamMicro.writeBool(2, getOn());
          }
        }
      }
    }
    
    public static final class LocationHistory
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasUserActedOnActivitySummaryOptIn;
      private boolean userActedOnActivitySummaryOptIn_ = false;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasUserActedOnActivitySummaryOptIn();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getUserActedOnActivitySummaryOptIn());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getUserActedOnActivitySummaryOptIn()
      {
        return this.userActedOnActivitySummaryOptIn_;
      }
      
      public boolean hasUserActedOnActivitySummaryOptIn()
      {
        return this.hasUserActedOnActivitySummaryOptIn;
      }
      
      public LocationHistory mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          setUserActedOnActivitySummaryOptIn(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public LocationHistory setUserActedOnActivitySummaryOptIn(boolean paramBoolean)
      {
        this.hasUserActedOnActivitySummaryOptIn = true;
        this.userActedOnActivitySummaryOptIn_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasUserActedOnActivitySummaryOptIn()) {
          paramCodedOutputStreamMicro.writeBool(1, getUserActedOnActivitySummaryOptIn());
        }
      }
    }
    
    public static final class Movies
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasShowFromRecentSearch;
      private boolean hasShowUpcomingMovies;
      private boolean hasShowWhenNearTheater;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private boolean showFromRecentSearch_ = true;
      private boolean showUpcomingMovies_ = true;
      private boolean showWhenNearTheater_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowWhenNearTheater()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowWhenNearTheater());
        }
        if (hasShowFromRecentSearch()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowFromRecentSearch());
        }
        if (hasShowUpcomingMovies()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getShowUpcomingMovies());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowFromRecentSearch()
      {
        return this.showFromRecentSearch_;
      }
      
      public boolean getShowUpcomingMovies()
      {
        return this.showUpcomingMovies_;
      }
      
      public boolean getShowWhenNearTheater()
      {
        return this.showWhenNearTheater_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasShowFromRecentSearch()
      {
        return this.hasShowFromRecentSearch;
      }
      
      public boolean hasShowUpcomingMovies()
      {
        return this.hasShowUpcomingMovies;
      }
      
      public boolean hasShowWhenNearTheater()
      {
        return this.hasShowWhenNearTheater;
      }
      
      public Movies mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setShowWhenNearTheater(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowFromRecentSearch(paramCodedInputStreamMicro.readBool());
            break;
          }
          setShowUpcomingMovies(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public Movies setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public Movies setShowFromRecentSearch(boolean paramBoolean)
      {
        this.hasShowFromRecentSearch = true;
        this.showFromRecentSearch_ = paramBoolean;
        return this;
      }
      
      public Movies setShowUpcomingMovies(boolean paramBoolean)
      {
        this.hasShowUpcomingMovies = true;
        this.showUpcomingMovies_ = paramBoolean;
        return this;
      }
      
      public Movies setShowWhenNearTheater(boolean paramBoolean)
      {
        this.hasShowWhenNearTheater = true;
        this.showWhenNearTheater_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowWhenNearTheater()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowWhenNearTheater());
        }
        if (hasShowFromRecentSearch()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowFromRecentSearch());
        }
        if (hasShowUpcomingMovies()) {
          paramCodedOutputStreamMicro.writeBool(4, getShowUpcomingMovies());
        }
      }
    }
    
    public static final class News
      extends MessageMicro
    {
      private int cachedSize = -1;
      private List<ExcludedQuery> excludedQueries_ = Collections.emptyList();
      private boolean hasInterestLevel;
      private boolean hasNotificationPolicy;
      private int interestLevel_ = 1;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      
      public News addExcludedQueries(ExcludedQuery paramExcludedQuery)
      {
        if (paramExcludedQuery == null) {
          throw new NullPointerException();
        }
        if (this.excludedQueries_.isEmpty()) {
          this.excludedQueries_ = new ArrayList();
        }
        this.excludedQueries_.add(paramExcludedQuery);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public List<ExcludedQuery> getExcludedQueriesList()
      {
        return this.excludedQueries_;
      }
      
      public int getInterestLevel()
      {
        return this.interestLevel_;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasInterestLevel()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getInterestLevel());
        }
        Iterator localIterator = getExcludedQueriesList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(5, (ExcludedQuery)localIterator.next());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasInterestLevel()
      {
        return this.hasInterestLevel;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public News mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setInterestLevel(paramCodedInputStreamMicro.readInt32());
            break;
          }
          ExcludedQuery localExcludedQuery = new ExcludedQuery();
          paramCodedInputStreamMicro.readMessage(localExcludedQuery);
          addExcludedQueries(localExcludedQuery);
        }
      }
      
      public News setInterestLevel(int paramInt)
      {
        this.hasInterestLevel = true;
        this.interestLevel_ = paramInt;
        return this;
      }
      
      public News setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasInterestLevel()) {
          paramCodedOutputStreamMicro.writeInt32(2, getInterestLevel());
        }
        Iterator localIterator = getExcludedQueriesList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(5, (ExcludedQuery)localIterator.next());
        }
      }
      
      public static final class ExcludedQuery
        extends MessageMicro
      {
        private int cachedSize = -1;
        private boolean hasQuery;
        private boolean hasTimestampSeconds;
        private String query_ = "";
        private long timestampSeconds_ = 0L;
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public String getQuery()
        {
          return this.query_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasQuery();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeStringSize(1, getQuery());
          }
          if (hasTimestampSeconds()) {
            i += CodedOutputStreamMicro.computeInt64Size(2, getTimestampSeconds());
          }
          this.cachedSize = i;
          return i;
        }
        
        public long getTimestampSeconds()
        {
          return this.timestampSeconds_;
        }
        
        public boolean hasQuery()
        {
          return this.hasQuery;
        }
        
        public boolean hasTimestampSeconds()
        {
          return this.hasTimestampSeconds;
        }
        
        public ExcludedQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 10: 
              setQuery(paramCodedInputStreamMicro.readString());
              break;
            }
            setTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          }
        }
        
        public ExcludedQuery setQuery(String paramString)
        {
          this.hasQuery = true;
          this.query_ = paramString;
          return this;
        }
        
        public ExcludedQuery setTimestampSeconds(long paramLong)
        {
          this.hasTimestampSeconds = true;
          this.timestampSeconds_ = paramLong;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasQuery()) {
            paramCodedOutputStreamMicro.writeString(1, getQuery());
          }
          if (hasTimestampSeconds()) {
            paramCodedOutputStreamMicro.writeInt64(2, getTimestampSeconds());
          }
        }
      }
    }
    
    public static final class NextMeeting
      extends MessageMicro
    {
      private int cachedSize = -1;
      private List<CalendarAccount> calendarAccount_ = Collections.emptyList();
      private boolean hasNotificationPolicy;
      private boolean hasNotificationSetting;
      private boolean hasShowDriveTo;
      private boolean hasShowImminent;
      private boolean hasShowNextDay;
      private boolean hasShowNextMeeting;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private int notificationSetting_ = 2;
      private boolean showDriveTo_ = true;
      private boolean showImminent_ = true;
      private boolean showNextDay_ = true;
      private boolean showNextMeeting_ = true;
      
      public NextMeeting addCalendarAccount(CalendarAccount paramCalendarAccount)
      {
        if (paramCalendarAccount == null) {
          throw new NullPointerException();
        }
        if (this.calendarAccount_.isEmpty()) {
          this.calendarAccount_ = new ArrayList();
        }
        this.calendarAccount_.add(paramCalendarAccount);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public List<CalendarAccount> getCalendarAccountList()
      {
        return this.calendarAccount_;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowImminent()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowImminent());
        }
        if (hasShowDriveTo()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowDriveTo());
        }
        if (hasShowNextDay()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getShowNextDay());
        }
        if (hasShowNextMeeting()) {
          i += CodedOutputStreamMicro.computeBoolSize(5, getShowNextMeeting());
        }
        if (hasNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(6, getNotificationSetting());
        }
        Iterator localIterator = getCalendarAccountList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(7, (CalendarAccount)localIterator.next());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowDriveTo()
      {
        return this.showDriveTo_;
      }
      
      public boolean getShowImminent()
      {
        return this.showImminent_;
      }
      
      public boolean getShowNextDay()
      {
        return this.showNextDay_;
      }
      
      public boolean getShowNextMeeting()
      {
        return this.showNextMeeting_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public boolean hasShowDriveTo()
      {
        return this.hasShowDriveTo;
      }
      
      public boolean hasShowImminent()
      {
        return this.hasShowImminent;
      }
      
      public boolean hasShowNextDay()
      {
        return this.hasShowNextDay;
      }
      
      public boolean hasShowNextMeeting()
      {
        return this.hasShowNextMeeting;
      }
      
      public NextMeeting mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setShowImminent(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowDriveTo(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setShowNextDay(paramCodedInputStreamMicro.readBool());
            break;
          case 40: 
            setShowNextMeeting(paramCodedInputStreamMicro.readBool());
            break;
          case 48: 
            setNotificationSetting(paramCodedInputStreamMicro.readInt32());
            break;
          }
          CalendarAccount localCalendarAccount = new CalendarAccount();
          paramCodedInputStreamMicro.readMessage(localCalendarAccount);
          addCalendarAccount(localCalendarAccount);
        }
      }
      
      public NextMeeting setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public NextMeeting setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public NextMeeting setShowDriveTo(boolean paramBoolean)
      {
        this.hasShowDriveTo = true;
        this.showDriveTo_ = paramBoolean;
        return this;
      }
      
      public NextMeeting setShowImminent(boolean paramBoolean)
      {
        this.hasShowImminent = true;
        this.showImminent_ = paramBoolean;
        return this;
      }
      
      public NextMeeting setShowNextDay(boolean paramBoolean)
      {
        this.hasShowNextDay = true;
        this.showNextDay_ = paramBoolean;
        return this;
      }
      
      public NextMeeting setShowNextMeeting(boolean paramBoolean)
      {
        this.hasShowNextMeeting = true;
        this.showNextMeeting_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowImminent()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowImminent());
        }
        if (hasShowDriveTo()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowDriveTo());
        }
        if (hasShowNextDay()) {
          paramCodedOutputStreamMicro.writeBool(4, getShowNextDay());
        }
        if (hasShowNextMeeting()) {
          paramCodedOutputStreamMicro.writeBool(5, getShowNextMeeting());
        }
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(6, getNotificationSetting());
        }
        Iterator localIterator = getCalendarAccountList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(7, (CalendarAccount)localIterator.next());
        }
      }
      
      public static final class CalendarAccount
        extends MessageMicro
      {
        private String account_ = "";
        private int cachedSize = -1;
        private boolean hasAccount;
        private boolean hasHashedId;
        private boolean hasId;
        private boolean hasOn;
        private String hashedId_ = "";
        private String id_ = "";
        private boolean on_ = false;
        
        public String getAccount()
        {
          return this.account_;
        }
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public String getHashedId()
        {
          return this.hashedId_;
        }
        
        public String getId()
        {
          return this.id_;
        }
        
        public boolean getOn()
        {
          return this.on_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasId();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeStringSize(1, getId());
          }
          if (hasOn()) {
            i += CodedOutputStreamMicro.computeBoolSize(2, getOn());
          }
          if (hasAccount()) {
            i += CodedOutputStreamMicro.computeStringSize(3, getAccount());
          }
          if (hasHashedId()) {
            i += CodedOutputStreamMicro.computeStringSize(4, getHashedId());
          }
          this.cachedSize = i;
          return i;
        }
        
        public boolean hasAccount()
        {
          return this.hasAccount;
        }
        
        public boolean hasHashedId()
        {
          return this.hasHashedId;
        }
        
        public boolean hasId()
        {
          return this.hasId;
        }
        
        public boolean hasOn()
        {
          return this.hasOn;
        }
        
        public CalendarAccount mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 10: 
              setId(paramCodedInputStreamMicro.readString());
              break;
            case 16: 
              setOn(paramCodedInputStreamMicro.readBool());
              break;
            case 26: 
              setAccount(paramCodedInputStreamMicro.readString());
              break;
            }
            setHashedId(paramCodedInputStreamMicro.readString());
          }
        }
        
        public CalendarAccount setAccount(String paramString)
        {
          this.hasAccount = true;
          this.account_ = paramString;
          return this;
        }
        
        public CalendarAccount setHashedId(String paramString)
        {
          this.hasHashedId = true;
          this.hashedId_ = paramString;
          return this;
        }
        
        public CalendarAccount setId(String paramString)
        {
          this.hasId = true;
          this.id_ = paramString;
          return this;
        }
        
        public CalendarAccount setOn(boolean paramBoolean)
        {
          this.hasOn = true;
          this.on_ = paramBoolean;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasId()) {
            paramCodedOutputStreamMicro.writeString(1, getId());
          }
          if (hasOn()) {
            paramCodedOutputStreamMicro.writeBool(2, getOn());
          }
          if (hasAccount()) {
            paramCodedOutputStreamMicro.writeString(3, getAccount());
          }
          if (hasHashedId()) {
            paramCodedOutputStreamMicro.writeString(4, getHashedId());
          }
        }
      }
    }
    
    public static final class NotificationPolicy
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasShowAlerts;
      private boolean hasShowAmbient;
      private boolean hasShowFirstTime;
      private boolean showAlerts_ = false;
      private boolean showAmbient_ = false;
      private boolean showFirstTime_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasShowAlerts();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getShowAlerts());
        }
        if (hasShowFirstTime()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowFirstTime());
        }
        if (hasShowAmbient()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowAmbient());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowAlerts()
      {
        return this.showAlerts_;
      }
      
      public boolean getShowAmbient()
      {
        return this.showAmbient_;
      }
      
      public boolean getShowFirstTime()
      {
        return this.showFirstTime_;
      }
      
      public boolean hasShowAlerts()
      {
        return this.hasShowAlerts;
      }
      
      public boolean hasShowAmbient()
      {
        return this.hasShowAmbient;
      }
      
      public boolean hasShowFirstTime()
      {
        return this.hasShowFirstTime;
      }
      
      public NotificationPolicy mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setShowAlerts(paramCodedInputStreamMicro.readBool());
            break;
          case 16: 
            setShowFirstTime(paramCodedInputStreamMicro.readBool());
            break;
          }
          setShowAmbient(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public NotificationPolicy setShowAlerts(boolean paramBoolean)
      {
        this.hasShowAlerts = true;
        this.showAlerts_ = paramBoolean;
        return this;
      }
      
      public NotificationPolicy setShowAmbient(boolean paramBoolean)
      {
        this.hasShowAmbient = true;
        this.showAmbient_ = paramBoolean;
        return this;
      }
      
      public NotificationPolicy setShowFirstTime(boolean paramBoolean)
      {
        this.hasShowFirstTime = true;
        this.showFirstTime_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasShowAlerts()) {
          paramCodedOutputStreamMicro.writeBool(1, getShowAlerts());
        }
        if (hasShowFirstTime()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowFirstTime());
        }
        if (hasShowAmbient()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowAmbient());
        }
      }
    }
    
    public static final class PhotoSpot
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasShowWhenAwayFromHomeWork;
      private boolean hasShowWhenTraveling;
      private boolean showWhenAwayFromHomeWork_ = true;
      private boolean showWhenTraveling_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasShowWhenAwayFromHomeWork();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getShowWhenAwayFromHomeWork());
        }
        if (hasShowWhenTraveling()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowWhenTraveling());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowWhenAwayFromHomeWork()
      {
        return this.showWhenAwayFromHomeWork_;
      }
      
      public boolean getShowWhenTraveling()
      {
        return this.showWhenTraveling_;
      }
      
      public boolean hasShowWhenAwayFromHomeWork()
      {
        return this.hasShowWhenAwayFromHomeWork;
      }
      
      public boolean hasShowWhenTraveling()
      {
        return this.hasShowWhenTraveling;
      }
      
      public PhotoSpot mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setShowWhenAwayFromHomeWork(paramCodedInputStreamMicro.readBool());
            break;
          }
          setShowWhenTraveling(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public PhotoSpot setShowWhenAwayFromHomeWork(boolean paramBoolean)
      {
        this.hasShowWhenAwayFromHomeWork = true;
        this.showWhenAwayFromHomeWork_ = paramBoolean;
        return this;
      }
      
      public PhotoSpot setShowWhenTraveling(boolean paramBoolean)
      {
        this.hasShowWhenTraveling = true;
        this.showWhenTraveling_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasShowWhenAwayFromHomeWork()) {
          paramCodedOutputStreamMicro.writeBool(1, getShowWhenAwayFromHomeWork());
        }
        if (hasShowWhenTraveling()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowWhenTraveling());
        }
      }
    }
    
    public static final class Places
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasNotificationSetting;
      private boolean hasShowAll;
      private boolean hasShowAttractions;
      private boolean hasShowInterestingWhenTraveling;
      private boolean hasShowMuseumsAndArt;
      private boolean hasShowRecommendedPlaces;
      private boolean hasShowRestaurants;
      private boolean hasShowShopping;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private int notificationSetting_ = 0;
      private boolean showAll_ = true;
      private boolean showAttractions_ = true;
      private boolean showInterestingWhenTraveling_ = true;
      private boolean showMuseumsAndArt_ = true;
      private boolean showRecommendedPlaces_ = true;
      private boolean showRestaurants_ = true;
      private boolean showShopping_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowRestaurants()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowRestaurants());
        }
        if (hasShowAttractions()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowAttractions());
        }
        if (hasShowRecommendedPlaces()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getShowRecommendedPlaces());
        }
        if (hasShowInterestingWhenTraveling()) {
          i += CodedOutputStreamMicro.computeBoolSize(5, getShowInterestingWhenTraveling());
        }
        if (hasShowAll()) {
          i += CodedOutputStreamMicro.computeBoolSize(6, getShowAll());
        }
        if (hasNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(7, getNotificationSetting());
        }
        if (hasShowMuseumsAndArt()) {
          i += CodedOutputStreamMicro.computeBoolSize(8, getShowMuseumsAndArt());
        }
        if (hasShowShopping()) {
          i += CodedOutputStreamMicro.computeBoolSize(9, getShowShopping());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowAll()
      {
        return this.showAll_;
      }
      
      public boolean getShowAttractions()
      {
        return this.showAttractions_;
      }
      
      public boolean getShowInterestingWhenTraveling()
      {
        return this.showInterestingWhenTraveling_;
      }
      
      public boolean getShowMuseumsAndArt()
      {
        return this.showMuseumsAndArt_;
      }
      
      public boolean getShowRecommendedPlaces()
      {
        return this.showRecommendedPlaces_;
      }
      
      public boolean getShowRestaurants()
      {
        return this.showRestaurants_;
      }
      
      public boolean getShowShopping()
      {
        return this.showShopping_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public boolean hasShowAll()
      {
        return this.hasShowAll;
      }
      
      public boolean hasShowAttractions()
      {
        return this.hasShowAttractions;
      }
      
      public boolean hasShowInterestingWhenTraveling()
      {
        return this.hasShowInterestingWhenTraveling;
      }
      
      public boolean hasShowMuseumsAndArt()
      {
        return this.hasShowMuseumsAndArt;
      }
      
      public boolean hasShowRecommendedPlaces()
      {
        return this.hasShowRecommendedPlaces;
      }
      
      public boolean hasShowRestaurants()
      {
        return this.hasShowRestaurants;
      }
      
      public boolean hasShowShopping()
      {
        return this.hasShowShopping;
      }
      
      public Places mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setShowRestaurants(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowAttractions(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setShowRecommendedPlaces(paramCodedInputStreamMicro.readBool());
            break;
          case 40: 
            setShowInterestingWhenTraveling(paramCodedInputStreamMicro.readBool());
            break;
          case 48: 
            setShowAll(paramCodedInputStreamMicro.readBool());
            break;
          case 56: 
            setNotificationSetting(paramCodedInputStreamMicro.readInt32());
            break;
          case 64: 
            setShowMuseumsAndArt(paramCodedInputStreamMicro.readBool());
            break;
          }
          setShowShopping(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public Places setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public Places setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public Places setShowAll(boolean paramBoolean)
      {
        this.hasShowAll = true;
        this.showAll_ = paramBoolean;
        return this;
      }
      
      public Places setShowAttractions(boolean paramBoolean)
      {
        this.hasShowAttractions = true;
        this.showAttractions_ = paramBoolean;
        return this;
      }
      
      public Places setShowInterestingWhenTraveling(boolean paramBoolean)
      {
        this.hasShowInterestingWhenTraveling = true;
        this.showInterestingWhenTraveling_ = paramBoolean;
        return this;
      }
      
      public Places setShowMuseumsAndArt(boolean paramBoolean)
      {
        this.hasShowMuseumsAndArt = true;
        this.showMuseumsAndArt_ = paramBoolean;
        return this;
      }
      
      public Places setShowRecommendedPlaces(boolean paramBoolean)
      {
        this.hasShowRecommendedPlaces = true;
        this.showRecommendedPlaces_ = paramBoolean;
        return this;
      }
      
      public Places setShowRestaurants(boolean paramBoolean)
      {
        this.hasShowRestaurants = true;
        this.showRestaurants_ = paramBoolean;
        return this;
      }
      
      public Places setShowShopping(boolean paramBoolean)
      {
        this.hasShowShopping = true;
        this.showShopping_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowRestaurants()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowRestaurants());
        }
        if (hasShowAttractions()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowAttractions());
        }
        if (hasShowRecommendedPlaces()) {
          paramCodedOutputStreamMicro.writeBool(4, getShowRecommendedPlaces());
        }
        if (hasShowInterestingWhenTraveling()) {
          paramCodedOutputStreamMicro.writeBool(5, getShowInterestingWhenTraveling());
        }
        if (hasShowAll()) {
          paramCodedOutputStreamMicro.writeBool(6, getShowAll());
        }
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(7, getNotificationSetting());
        }
        if (hasShowMuseumsAndArt()) {
          paramCodedOutputStreamMicro.writeBool(8, getShowMuseumsAndArt());
        }
        if (hasShowShopping()) {
          paramCodedOutputStreamMicro.writeBool(9, getShowShopping());
        }
      }
    }
    
    public static final class PublicAlerts
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasNotificationSetting;
      private boolean hasShowWhenAlertPosted;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private int notificationSetting_ = 1;
      private boolean showWhenAlertPosted_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowWhenAlertPosted()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowWhenAlertPosted());
        }
        if (hasNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(3, getNotificationSetting());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowWhenAlertPosted()
      {
        return this.showWhenAlertPosted_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public boolean hasShowWhenAlertPosted()
      {
        return this.hasShowWhenAlertPosted;
      }
      
      public PublicAlerts mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setShowWhenAlertPosted(paramCodedInputStreamMicro.readBool());
            break;
          }
          setNotificationSetting(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public PublicAlerts setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public PublicAlerts setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public PublicAlerts setShowWhenAlertPosted(boolean paramBoolean)
      {
        this.hasShowWhenAlertPosted = true;
        this.showWhenAlertPosted_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowWhenAlertPosted()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowWhenAlertPosted());
        }
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(3, getNotificationSetting());
        }
      }
    }
    
    public static final class ResearchTopics
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasInterestLevel;
      private int interestLevel_ = 1;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getInterestLevel()
      {
        return this.interestLevel_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasInterestLevel();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getInterestLevel());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasInterestLevel()
      {
        return this.hasInterestLevel;
      }
      
      public ResearchTopics mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          setInterestLevel(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public ResearchTopics setInterestLevel(int paramInt)
      {
        this.hasInterestLevel = true;
        this.interestLevel_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasInterestLevel()) {
          paramCodedOutputStreamMicro.writeInt32(1, getInterestLevel());
        }
      }
    }
    
    public static final class RestaurantReservations
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationSetting;
      private int notificationSetting_ = 2;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationSetting();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getNotificationSetting());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public RestaurantReservations mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          setNotificationSetting(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public RestaurantReservations setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(1, getNotificationSetting());
        }
      }
    }
    
    public static final class ShowCardMask
      extends MessageMicro
    {
      private boolean albums_ = true;
      private boolean appSuggestions_ = true;
      private boolean barcodes_ = true;
      private boolean birthday_ = true;
      private boolean books_ = true;
      private boolean browseMode_ = true;
      private int cachedSize = -1;
      private boolean carRentalReservations_ = true;
      private boolean eventReservations_ = true;
      private boolean events_ = true;
      private boolean flightReservations_ = true;
      private boolean flight_ = true;
      private boolean gmail_ = true;
      private boolean hasAlbums;
      private boolean hasAppSuggestions;
      private boolean hasBarcodes;
      private boolean hasBirthday;
      private boolean hasBooks;
      private boolean hasBrowseMode;
      private boolean hasCarRentalReservations;
      private boolean hasEventReservations;
      private boolean hasEvents;
      private boolean hasFlight;
      private boolean hasFlightReservations;
      private boolean hasGmail;
      private boolean hasHotelReservations;
      private boolean hasLastTrainHome;
      private boolean hasLocationHistory;
      private boolean hasMovies;
      private boolean hasNews;
      private boolean hasNextMeeting;
      private boolean hasPackageTracking;
      private boolean hasPhotoSpot;
      private boolean hasPlaces;
      private boolean hasPublicAlerts;
      private boolean hasRealEstate;
      private boolean hasRelevantWebsites;
      private boolean hasReminders;
      private boolean hasResearchTopics;
      private boolean hasRestaurantReservations;
      private boolean hasSharedLocation;
      private boolean hasSports;
      private boolean hasStockQuotes;
      private boolean hasThingsToWatch;
      private boolean hasTraffic;
      private boolean hasTransit;
      private boolean hasTravel;
      private boolean hasTravelAttractions;
      private boolean hasTravelCurrency;
      private boolean hasTravelHomeTime;
      private boolean hasTravelTranslate;
      private boolean hasTvEpisodes;
      private boolean hasTvRecognition;
      private boolean hasVideoGames;
      private boolean hasWalletLoyalty;
      private boolean hasWalletOffers;
      private boolean hasWeather;
      private boolean hasWebsiteUpdate;
      private boolean hotelReservations_ = true;
      private boolean lastTrainHome_ = true;
      private boolean locationHistory_ = true;
      private boolean movies_ = true;
      private boolean news_ = true;
      private boolean nextMeeting_ = true;
      private boolean packageTracking_ = true;
      private boolean photoSpot_ = true;
      private boolean places_ = true;
      private boolean publicAlerts_ = true;
      private boolean realEstate_ = true;
      private boolean relevantWebsites_ = true;
      private boolean reminders_ = true;
      private boolean researchTopics_ = true;
      private boolean restaurantReservations_ = true;
      private boolean sharedLocation_ = true;
      private boolean sports_ = true;
      private boolean stockQuotes_ = true;
      private boolean thingsToWatch_ = true;
      private boolean traffic_ = true;
      private boolean transit_ = true;
      private boolean travelAttractions_ = true;
      private boolean travelCurrency_ = true;
      private boolean travelHomeTime_ = true;
      private boolean travelTranslate_ = true;
      private boolean travel_ = true;
      private boolean tvEpisodes_ = true;
      private boolean tvRecognition_ = true;
      private boolean videoGames_ = true;
      private boolean walletLoyalty_ = true;
      private boolean walletOffers_ = true;
      private boolean weather_ = true;
      private boolean websiteUpdate_ = true;
      
      public boolean getAlbums()
      {
        return this.albums_;
      }
      
      public boolean getAppSuggestions()
      {
        return this.appSuggestions_;
      }
      
      public boolean getBarcodes()
      {
        return this.barcodes_;
      }
      
      public boolean getBirthday()
      {
        return this.birthday_;
      }
      
      public boolean getBooks()
      {
        return this.books_;
      }
      
      public boolean getBrowseMode()
      {
        return this.browseMode_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public boolean getCarRentalReservations()
      {
        return this.carRentalReservations_;
      }
      
      public boolean getEventReservations()
      {
        return this.eventReservations_;
      }
      
      public boolean getEvents()
      {
        return this.events_;
      }
      
      public boolean getFlight()
      {
        return this.flight_;
      }
      
      public boolean getFlightReservations()
      {
        return this.flightReservations_;
      }
      
      public boolean getGmail()
      {
        return this.gmail_;
      }
      
      public boolean getHotelReservations()
      {
        return this.hotelReservations_;
      }
      
      public boolean getLastTrainHome()
      {
        return this.lastTrainHome_;
      }
      
      public boolean getLocationHistory()
      {
        return this.locationHistory_;
      }
      
      public boolean getMovies()
      {
        return this.movies_;
      }
      
      public boolean getNews()
      {
        return this.news_;
      }
      
      public boolean getNextMeeting()
      {
        return this.nextMeeting_;
      }
      
      public boolean getPackageTracking()
      {
        return this.packageTracking_;
      }
      
      public boolean getPhotoSpot()
      {
        return this.photoSpot_;
      }
      
      public boolean getPlaces()
      {
        return this.places_;
      }
      
      public boolean getPublicAlerts()
      {
        return this.publicAlerts_;
      }
      
      public boolean getRealEstate()
      {
        return this.realEstate_;
      }
      
      public boolean getRelevantWebsites()
      {
        return this.relevantWebsites_;
      }
      
      public boolean getReminders()
      {
        return this.reminders_;
      }
      
      public boolean getResearchTopics()
      {
        return this.researchTopics_;
      }
      
      public boolean getRestaurantReservations()
      {
        return this.restaurantReservations_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasWeather();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getWeather());
        }
        if (hasTraffic()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getTraffic());
        }
        if (hasNextMeeting()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getNextMeeting());
        }
        if (hasTravelCurrency()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getTravelCurrency());
        }
        if (hasTravelHomeTime()) {
          i += CodedOutputStreamMicro.computeBoolSize(5, getTravelHomeTime());
        }
        if (hasTravelTranslate()) {
          i += CodedOutputStreamMicro.computeBoolSize(6, getTravelTranslate());
        }
        if (hasFlight()) {
          i += CodedOutputStreamMicro.computeBoolSize(7, getFlight());
        }
        if (hasTransit()) {
          i += CodedOutputStreamMicro.computeBoolSize(8, getTransit());
        }
        if (hasPlaces()) {
          i += CodedOutputStreamMicro.computeBoolSize(9, getPlaces());
        }
        if (hasSports()) {
          i += CodedOutputStreamMicro.computeBoolSize(10, getSports());
        }
        if (hasTravel()) {
          i += CodedOutputStreamMicro.computeBoolSize(11, getTravel());
        }
        if (hasPublicAlerts()) {
          i += CodedOutputStreamMicro.computeBoolSize(12, getPublicAlerts());
        }
        if (hasMovies()) {
          i += CodedOutputStreamMicro.computeBoolSize(13, getMovies());
        }
        if (hasStockQuotes()) {
          i += CodedOutputStreamMicro.computeBoolSize(14, getStockQuotes());
        }
        if (hasTravelAttractions()) {
          i += CodedOutputStreamMicro.computeBoolSize(15, getTravelAttractions());
        }
        if (hasNews()) {
          i += CodedOutputStreamMicro.computeBoolSize(16, getNews());
        }
        if (hasPhotoSpot()) {
          i += CodedOutputStreamMicro.computeBoolSize(17, getPhotoSpot());
        }
        if (hasPackageTracking()) {
          i += CodedOutputStreamMicro.computeBoolSize(18, getPackageTracking());
        }
        if (hasRestaurantReservations()) {
          i += CodedOutputStreamMicro.computeBoolSize(20, getRestaurantReservations());
        }
        if (hasEventReservations()) {
          i += CodedOutputStreamMicro.computeBoolSize(21, getEventReservations());
        }
        if (hasHotelReservations()) {
          i += CodedOutputStreamMicro.computeBoolSize(22, getHotelReservations());
        }
        if (hasFlightReservations()) {
          i += CodedOutputStreamMicro.computeBoolSize(23, getFlightReservations());
        }
        if (hasBirthday()) {
          i += CodedOutputStreamMicro.computeBoolSize(24, getBirthday());
        }
        if (hasResearchTopics()) {
          i += CodedOutputStreamMicro.computeBoolSize(25, getResearchTopics());
        }
        if (hasEvents()) {
          i += CodedOutputStreamMicro.computeBoolSize(26, getEvents());
        }
        if (hasLocationHistory()) {
          i += CodedOutputStreamMicro.computeBoolSize(27, getLocationHistory());
        }
        if (hasBarcodes()) {
          i += CodedOutputStreamMicro.computeBoolSize(28, getBarcodes());
        }
        if (hasGmail()) {
          i += CodedOutputStreamMicro.computeBoolSize(29, getGmail());
        }
        if (hasRealEstate()) {
          i += CodedOutputStreamMicro.computeBoolSize(30, getRealEstate());
        }
        if (hasWebsiteUpdate()) {
          i += CodedOutputStreamMicro.computeBoolSize(31, getWebsiteUpdate());
        }
        if (hasReminders()) {
          i += CodedOutputStreamMicro.computeBoolSize(32, getReminders());
        }
        if (hasBooks()) {
          i += CodedOutputStreamMicro.computeBoolSize(33, getBooks());
        }
        if (hasAlbums()) {
          i += CodedOutputStreamMicro.computeBoolSize(34, getAlbums());
        }
        if (hasVideoGames()) {
          i += CodedOutputStreamMicro.computeBoolSize(35, getVideoGames());
        }
        if (hasTvEpisodes()) {
          i += CodedOutputStreamMicro.computeBoolSize(36, getTvEpisodes());
        }
        if (hasRelevantWebsites()) {
          i += CodedOutputStreamMicro.computeBoolSize(37, getRelevantWebsites());
        }
        if (hasLastTrainHome()) {
          i += CodedOutputStreamMicro.computeBoolSize(38, getLastTrainHome());
        }
        if (hasSharedLocation()) {
          i += CodedOutputStreamMicro.computeBoolSize(39, getSharedLocation());
        }
        if (hasWalletOffers()) {
          i += CodedOutputStreamMicro.computeBoolSize(40, getWalletOffers());
        }
        if (hasWalletLoyalty()) {
          i += CodedOutputStreamMicro.computeBoolSize(41, getWalletLoyalty());
        }
        if (hasTvRecognition()) {
          i += CodedOutputStreamMicro.computeBoolSize(42, getTvRecognition());
        }
        if (hasCarRentalReservations()) {
          i += CodedOutputStreamMicro.computeBoolSize(43, getCarRentalReservations());
        }
        if (hasBrowseMode()) {
          i += CodedOutputStreamMicro.computeBoolSize(44, getBrowseMode());
        }
        if (hasThingsToWatch()) {
          i += CodedOutputStreamMicro.computeBoolSize(45, getThingsToWatch());
        }
        if (hasAppSuggestions()) {
          i += CodedOutputStreamMicro.computeBoolSize(46, getAppSuggestions());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getSharedLocation()
      {
        return this.sharedLocation_;
      }
      
      public boolean getSports()
      {
        return this.sports_;
      }
      
      public boolean getStockQuotes()
      {
        return this.stockQuotes_;
      }
      
      public boolean getThingsToWatch()
      {
        return this.thingsToWatch_;
      }
      
      public boolean getTraffic()
      {
        return this.traffic_;
      }
      
      public boolean getTransit()
      {
        return this.transit_;
      }
      
      public boolean getTravel()
      {
        return this.travel_;
      }
      
      public boolean getTravelAttractions()
      {
        return this.travelAttractions_;
      }
      
      public boolean getTravelCurrency()
      {
        return this.travelCurrency_;
      }
      
      public boolean getTravelHomeTime()
      {
        return this.travelHomeTime_;
      }
      
      public boolean getTravelTranslate()
      {
        return this.travelTranslate_;
      }
      
      public boolean getTvEpisodes()
      {
        return this.tvEpisodes_;
      }
      
      public boolean getTvRecognition()
      {
        return this.tvRecognition_;
      }
      
      public boolean getVideoGames()
      {
        return this.videoGames_;
      }
      
      public boolean getWalletLoyalty()
      {
        return this.walletLoyalty_;
      }
      
      public boolean getWalletOffers()
      {
        return this.walletOffers_;
      }
      
      public boolean getWeather()
      {
        return this.weather_;
      }
      
      public boolean getWebsiteUpdate()
      {
        return this.websiteUpdate_;
      }
      
      public boolean hasAlbums()
      {
        return this.hasAlbums;
      }
      
      public boolean hasAppSuggestions()
      {
        return this.hasAppSuggestions;
      }
      
      public boolean hasBarcodes()
      {
        return this.hasBarcodes;
      }
      
      public boolean hasBirthday()
      {
        return this.hasBirthday;
      }
      
      public boolean hasBooks()
      {
        return this.hasBooks;
      }
      
      public boolean hasBrowseMode()
      {
        return this.hasBrowseMode;
      }
      
      public boolean hasCarRentalReservations()
      {
        return this.hasCarRentalReservations;
      }
      
      public boolean hasEventReservations()
      {
        return this.hasEventReservations;
      }
      
      public boolean hasEvents()
      {
        return this.hasEvents;
      }
      
      public boolean hasFlight()
      {
        return this.hasFlight;
      }
      
      public boolean hasFlightReservations()
      {
        return this.hasFlightReservations;
      }
      
      public boolean hasGmail()
      {
        return this.hasGmail;
      }
      
      public boolean hasHotelReservations()
      {
        return this.hasHotelReservations;
      }
      
      public boolean hasLastTrainHome()
      {
        return this.hasLastTrainHome;
      }
      
      public boolean hasLocationHistory()
      {
        return this.hasLocationHistory;
      }
      
      public boolean hasMovies()
      {
        return this.hasMovies;
      }
      
      public boolean hasNews()
      {
        return this.hasNews;
      }
      
      public boolean hasNextMeeting()
      {
        return this.hasNextMeeting;
      }
      
      public boolean hasPackageTracking()
      {
        return this.hasPackageTracking;
      }
      
      public boolean hasPhotoSpot()
      {
        return this.hasPhotoSpot;
      }
      
      public boolean hasPlaces()
      {
        return this.hasPlaces;
      }
      
      public boolean hasPublicAlerts()
      {
        return this.hasPublicAlerts;
      }
      
      public boolean hasRealEstate()
      {
        return this.hasRealEstate;
      }
      
      public boolean hasRelevantWebsites()
      {
        return this.hasRelevantWebsites;
      }
      
      public boolean hasReminders()
      {
        return this.hasReminders;
      }
      
      public boolean hasResearchTopics()
      {
        return this.hasResearchTopics;
      }
      
      public boolean hasRestaurantReservations()
      {
        return this.hasRestaurantReservations;
      }
      
      public boolean hasSharedLocation()
      {
        return this.hasSharedLocation;
      }
      
      public boolean hasSports()
      {
        return this.hasSports;
      }
      
      public boolean hasStockQuotes()
      {
        return this.hasStockQuotes;
      }
      
      public boolean hasThingsToWatch()
      {
        return this.hasThingsToWatch;
      }
      
      public boolean hasTraffic()
      {
        return this.hasTraffic;
      }
      
      public boolean hasTransit()
      {
        return this.hasTransit;
      }
      
      public boolean hasTravel()
      {
        return this.hasTravel;
      }
      
      public boolean hasTravelAttractions()
      {
        return this.hasTravelAttractions;
      }
      
      public boolean hasTravelCurrency()
      {
        return this.hasTravelCurrency;
      }
      
      public boolean hasTravelHomeTime()
      {
        return this.hasTravelHomeTime;
      }
      
      public boolean hasTravelTranslate()
      {
        return this.hasTravelTranslate;
      }
      
      public boolean hasTvEpisodes()
      {
        return this.hasTvEpisodes;
      }
      
      public boolean hasTvRecognition()
      {
        return this.hasTvRecognition;
      }
      
      public boolean hasVideoGames()
      {
        return this.hasVideoGames;
      }
      
      public boolean hasWalletLoyalty()
      {
        return this.hasWalletLoyalty;
      }
      
      public boolean hasWalletOffers()
      {
        return this.hasWalletOffers;
      }
      
      public boolean hasWeather()
      {
        return this.hasWeather;
      }
      
      public boolean hasWebsiteUpdate()
      {
        return this.hasWebsiteUpdate;
      }
      
      public ShowCardMask mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setWeather(paramCodedInputStreamMicro.readBool());
            break;
          case 16: 
            setTraffic(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setNextMeeting(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setTravelCurrency(paramCodedInputStreamMicro.readBool());
            break;
          case 40: 
            setTravelHomeTime(paramCodedInputStreamMicro.readBool());
            break;
          case 48: 
            setTravelTranslate(paramCodedInputStreamMicro.readBool());
            break;
          case 56: 
            setFlight(paramCodedInputStreamMicro.readBool());
            break;
          case 64: 
            setTransit(paramCodedInputStreamMicro.readBool());
            break;
          case 72: 
            setPlaces(paramCodedInputStreamMicro.readBool());
            break;
          case 80: 
            setSports(paramCodedInputStreamMicro.readBool());
            break;
          case 88: 
            setTravel(paramCodedInputStreamMicro.readBool());
            break;
          case 96: 
            setPublicAlerts(paramCodedInputStreamMicro.readBool());
            break;
          case 104: 
            setMovies(paramCodedInputStreamMicro.readBool());
            break;
          case 112: 
            setStockQuotes(paramCodedInputStreamMicro.readBool());
            break;
          case 120: 
            setTravelAttractions(paramCodedInputStreamMicro.readBool());
            break;
          case 128: 
            setNews(paramCodedInputStreamMicro.readBool());
            break;
          case 136: 
            setPhotoSpot(paramCodedInputStreamMicro.readBool());
            break;
          case 144: 
            setPackageTracking(paramCodedInputStreamMicro.readBool());
            break;
          case 160: 
            setRestaurantReservations(paramCodedInputStreamMicro.readBool());
            break;
          case 168: 
            setEventReservations(paramCodedInputStreamMicro.readBool());
            break;
          case 176: 
            setHotelReservations(paramCodedInputStreamMicro.readBool());
            break;
          case 184: 
            setFlightReservations(paramCodedInputStreamMicro.readBool());
            break;
          case 192: 
            setBirthday(paramCodedInputStreamMicro.readBool());
            break;
          case 200: 
            setResearchTopics(paramCodedInputStreamMicro.readBool());
            break;
          case 208: 
            setEvents(paramCodedInputStreamMicro.readBool());
            break;
          case 216: 
            setLocationHistory(paramCodedInputStreamMicro.readBool());
            break;
          case 224: 
            setBarcodes(paramCodedInputStreamMicro.readBool());
            break;
          case 232: 
            setGmail(paramCodedInputStreamMicro.readBool());
            break;
          case 240: 
            setRealEstate(paramCodedInputStreamMicro.readBool());
            break;
          case 248: 
            setWebsiteUpdate(paramCodedInputStreamMicro.readBool());
            break;
          case 256: 
            setReminders(paramCodedInputStreamMicro.readBool());
            break;
          case 264: 
            setBooks(paramCodedInputStreamMicro.readBool());
            break;
          case 272: 
            setAlbums(paramCodedInputStreamMicro.readBool());
            break;
          case 280: 
            setVideoGames(paramCodedInputStreamMicro.readBool());
            break;
          case 288: 
            setTvEpisodes(paramCodedInputStreamMicro.readBool());
            break;
          case 296: 
            setRelevantWebsites(paramCodedInputStreamMicro.readBool());
            break;
          case 304: 
            setLastTrainHome(paramCodedInputStreamMicro.readBool());
            break;
          case 312: 
            setSharedLocation(paramCodedInputStreamMicro.readBool());
            break;
          case 320: 
            setWalletOffers(paramCodedInputStreamMicro.readBool());
            break;
          case 328: 
            setWalletLoyalty(paramCodedInputStreamMicro.readBool());
            break;
          case 336: 
            setTvRecognition(paramCodedInputStreamMicro.readBool());
            break;
          case 344: 
            setCarRentalReservations(paramCodedInputStreamMicro.readBool());
            break;
          case 352: 
            setBrowseMode(paramCodedInputStreamMicro.readBool());
            break;
          case 360: 
            setThingsToWatch(paramCodedInputStreamMicro.readBool());
            break;
          }
          setAppSuggestions(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public ShowCardMask setAlbums(boolean paramBoolean)
      {
        this.hasAlbums = true;
        this.albums_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setAppSuggestions(boolean paramBoolean)
      {
        this.hasAppSuggestions = true;
        this.appSuggestions_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setBarcodes(boolean paramBoolean)
      {
        this.hasBarcodes = true;
        this.barcodes_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setBirthday(boolean paramBoolean)
      {
        this.hasBirthday = true;
        this.birthday_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setBooks(boolean paramBoolean)
      {
        this.hasBooks = true;
        this.books_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setBrowseMode(boolean paramBoolean)
      {
        this.hasBrowseMode = true;
        this.browseMode_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setCarRentalReservations(boolean paramBoolean)
      {
        this.hasCarRentalReservations = true;
        this.carRentalReservations_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setEventReservations(boolean paramBoolean)
      {
        this.hasEventReservations = true;
        this.eventReservations_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setEvents(boolean paramBoolean)
      {
        this.hasEvents = true;
        this.events_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setFlight(boolean paramBoolean)
      {
        this.hasFlight = true;
        this.flight_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setFlightReservations(boolean paramBoolean)
      {
        this.hasFlightReservations = true;
        this.flightReservations_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setGmail(boolean paramBoolean)
      {
        this.hasGmail = true;
        this.gmail_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setHotelReservations(boolean paramBoolean)
      {
        this.hasHotelReservations = true;
        this.hotelReservations_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setLastTrainHome(boolean paramBoolean)
      {
        this.hasLastTrainHome = true;
        this.lastTrainHome_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setLocationHistory(boolean paramBoolean)
      {
        this.hasLocationHistory = true;
        this.locationHistory_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setMovies(boolean paramBoolean)
      {
        this.hasMovies = true;
        this.movies_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setNews(boolean paramBoolean)
      {
        this.hasNews = true;
        this.news_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setNextMeeting(boolean paramBoolean)
      {
        this.hasNextMeeting = true;
        this.nextMeeting_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setPackageTracking(boolean paramBoolean)
      {
        this.hasPackageTracking = true;
        this.packageTracking_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setPhotoSpot(boolean paramBoolean)
      {
        this.hasPhotoSpot = true;
        this.photoSpot_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setPlaces(boolean paramBoolean)
      {
        this.hasPlaces = true;
        this.places_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setPublicAlerts(boolean paramBoolean)
      {
        this.hasPublicAlerts = true;
        this.publicAlerts_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setRealEstate(boolean paramBoolean)
      {
        this.hasRealEstate = true;
        this.realEstate_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setRelevantWebsites(boolean paramBoolean)
      {
        this.hasRelevantWebsites = true;
        this.relevantWebsites_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setReminders(boolean paramBoolean)
      {
        this.hasReminders = true;
        this.reminders_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setResearchTopics(boolean paramBoolean)
      {
        this.hasResearchTopics = true;
        this.researchTopics_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setRestaurantReservations(boolean paramBoolean)
      {
        this.hasRestaurantReservations = true;
        this.restaurantReservations_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setSharedLocation(boolean paramBoolean)
      {
        this.hasSharedLocation = true;
        this.sharedLocation_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setSports(boolean paramBoolean)
      {
        this.hasSports = true;
        this.sports_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setStockQuotes(boolean paramBoolean)
      {
        this.hasStockQuotes = true;
        this.stockQuotes_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setThingsToWatch(boolean paramBoolean)
      {
        this.hasThingsToWatch = true;
        this.thingsToWatch_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTraffic(boolean paramBoolean)
      {
        this.hasTraffic = true;
        this.traffic_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTransit(boolean paramBoolean)
      {
        this.hasTransit = true;
        this.transit_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTravel(boolean paramBoolean)
      {
        this.hasTravel = true;
        this.travel_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTravelAttractions(boolean paramBoolean)
      {
        this.hasTravelAttractions = true;
        this.travelAttractions_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTravelCurrency(boolean paramBoolean)
      {
        this.hasTravelCurrency = true;
        this.travelCurrency_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTravelHomeTime(boolean paramBoolean)
      {
        this.hasTravelHomeTime = true;
        this.travelHomeTime_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTravelTranslate(boolean paramBoolean)
      {
        this.hasTravelTranslate = true;
        this.travelTranslate_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTvEpisodes(boolean paramBoolean)
      {
        this.hasTvEpisodes = true;
        this.tvEpisodes_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setTvRecognition(boolean paramBoolean)
      {
        this.hasTvRecognition = true;
        this.tvRecognition_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setVideoGames(boolean paramBoolean)
      {
        this.hasVideoGames = true;
        this.videoGames_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setWalletLoyalty(boolean paramBoolean)
      {
        this.hasWalletLoyalty = true;
        this.walletLoyalty_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setWalletOffers(boolean paramBoolean)
      {
        this.hasWalletOffers = true;
        this.walletOffers_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setWeather(boolean paramBoolean)
      {
        this.hasWeather = true;
        this.weather_ = paramBoolean;
        return this;
      }
      
      public ShowCardMask setWebsiteUpdate(boolean paramBoolean)
      {
        this.hasWebsiteUpdate = true;
        this.websiteUpdate_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasWeather()) {
          paramCodedOutputStreamMicro.writeBool(1, getWeather());
        }
        if (hasTraffic()) {
          paramCodedOutputStreamMicro.writeBool(2, getTraffic());
        }
        if (hasNextMeeting()) {
          paramCodedOutputStreamMicro.writeBool(3, getNextMeeting());
        }
        if (hasTravelCurrency()) {
          paramCodedOutputStreamMicro.writeBool(4, getTravelCurrency());
        }
        if (hasTravelHomeTime()) {
          paramCodedOutputStreamMicro.writeBool(5, getTravelHomeTime());
        }
        if (hasTravelTranslate()) {
          paramCodedOutputStreamMicro.writeBool(6, getTravelTranslate());
        }
        if (hasFlight()) {
          paramCodedOutputStreamMicro.writeBool(7, getFlight());
        }
        if (hasTransit()) {
          paramCodedOutputStreamMicro.writeBool(8, getTransit());
        }
        if (hasPlaces()) {
          paramCodedOutputStreamMicro.writeBool(9, getPlaces());
        }
        if (hasSports()) {
          paramCodedOutputStreamMicro.writeBool(10, getSports());
        }
        if (hasTravel()) {
          paramCodedOutputStreamMicro.writeBool(11, getTravel());
        }
        if (hasPublicAlerts()) {
          paramCodedOutputStreamMicro.writeBool(12, getPublicAlerts());
        }
        if (hasMovies()) {
          paramCodedOutputStreamMicro.writeBool(13, getMovies());
        }
        if (hasStockQuotes()) {
          paramCodedOutputStreamMicro.writeBool(14, getStockQuotes());
        }
        if (hasTravelAttractions()) {
          paramCodedOutputStreamMicro.writeBool(15, getTravelAttractions());
        }
        if (hasNews()) {
          paramCodedOutputStreamMicro.writeBool(16, getNews());
        }
        if (hasPhotoSpot()) {
          paramCodedOutputStreamMicro.writeBool(17, getPhotoSpot());
        }
        if (hasPackageTracking()) {
          paramCodedOutputStreamMicro.writeBool(18, getPackageTracking());
        }
        if (hasRestaurantReservations()) {
          paramCodedOutputStreamMicro.writeBool(20, getRestaurantReservations());
        }
        if (hasEventReservations()) {
          paramCodedOutputStreamMicro.writeBool(21, getEventReservations());
        }
        if (hasHotelReservations()) {
          paramCodedOutputStreamMicro.writeBool(22, getHotelReservations());
        }
        if (hasFlightReservations()) {
          paramCodedOutputStreamMicro.writeBool(23, getFlightReservations());
        }
        if (hasBirthday()) {
          paramCodedOutputStreamMicro.writeBool(24, getBirthday());
        }
        if (hasResearchTopics()) {
          paramCodedOutputStreamMicro.writeBool(25, getResearchTopics());
        }
        if (hasEvents()) {
          paramCodedOutputStreamMicro.writeBool(26, getEvents());
        }
        if (hasLocationHistory()) {
          paramCodedOutputStreamMicro.writeBool(27, getLocationHistory());
        }
        if (hasBarcodes()) {
          paramCodedOutputStreamMicro.writeBool(28, getBarcodes());
        }
        if (hasGmail()) {
          paramCodedOutputStreamMicro.writeBool(29, getGmail());
        }
        if (hasRealEstate()) {
          paramCodedOutputStreamMicro.writeBool(30, getRealEstate());
        }
        if (hasWebsiteUpdate()) {
          paramCodedOutputStreamMicro.writeBool(31, getWebsiteUpdate());
        }
        if (hasReminders()) {
          paramCodedOutputStreamMicro.writeBool(32, getReminders());
        }
        if (hasBooks()) {
          paramCodedOutputStreamMicro.writeBool(33, getBooks());
        }
        if (hasAlbums()) {
          paramCodedOutputStreamMicro.writeBool(34, getAlbums());
        }
        if (hasVideoGames()) {
          paramCodedOutputStreamMicro.writeBool(35, getVideoGames());
        }
        if (hasTvEpisodes()) {
          paramCodedOutputStreamMicro.writeBool(36, getTvEpisodes());
        }
        if (hasRelevantWebsites()) {
          paramCodedOutputStreamMicro.writeBool(37, getRelevantWebsites());
        }
        if (hasLastTrainHome()) {
          paramCodedOutputStreamMicro.writeBool(38, getLastTrainHome());
        }
        if (hasSharedLocation()) {
          paramCodedOutputStreamMicro.writeBool(39, getSharedLocation());
        }
        if (hasWalletOffers()) {
          paramCodedOutputStreamMicro.writeBool(40, getWalletOffers());
        }
        if (hasWalletLoyalty()) {
          paramCodedOutputStreamMicro.writeBool(41, getWalletLoyalty());
        }
        if (hasTvRecognition()) {
          paramCodedOutputStreamMicro.writeBool(42, getTvRecognition());
        }
        if (hasCarRentalReservations()) {
          paramCodedOutputStreamMicro.writeBool(43, getCarRentalReservations());
        }
        if (hasBrowseMode()) {
          paramCodedOutputStreamMicro.writeBool(44, getBrowseMode());
        }
        if (hasThingsToWatch()) {
          paramCodedOutputStreamMicro.writeBool(45, getThingsToWatch());
        }
        if (hasAppSuggestions()) {
          paramCodedOutputStreamMicro.writeBool(46, getAppSuggestions());
        }
      }
    }
    
    public static final class Sports
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasNotificationSetting;
      private boolean hasShowAfter;
      private boolean hasShowBefore;
      private boolean hasShowDuring;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private int notificationSetting_ = 1;
      private boolean showAfter_ = true;
      private boolean showBefore_ = true;
      private boolean showDuring_ = true;
      private List<SportTeamPlayer> sportTeamPlayer_ = Collections.emptyList();
      
      public Sports addSportTeamPlayer(SportTeamPlayer paramSportTeamPlayer)
      {
        if (paramSportTeamPlayer == null) {
          throw new NullPointerException();
        }
        if (this.sportTeamPlayer_.isEmpty()) {
          this.sportTeamPlayer_ = new ArrayList();
        }
        this.sportTeamPlayer_.add(paramSportTeamPlayer);
        return this;
      }
      
      public Sports clearSportTeamPlayer()
      {
        this.sportTeamPlayer_ = Collections.emptyList();
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasShowBefore();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getShowBefore());
        }
        if (hasShowDuring()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowDuring());
        }
        if (hasShowAfter()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowAfter());
        }
        Iterator localIterator = getSportTeamPlayerList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(4, (SportTeamPlayer)localIterator.next());
        }
        if (hasNotificationPolicy()) {
          i += CodedOutputStreamMicro.computeMessageSize(5, getNotificationPolicy());
        }
        if (hasNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(6, getNotificationSetting());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowAfter()
      {
        return this.showAfter_;
      }
      
      public boolean getShowBefore()
      {
        return this.showBefore_;
      }
      
      public boolean getShowDuring()
      {
        return this.showDuring_;
      }
      
      public int getSportTeamPlayerCount()
      {
        return this.sportTeamPlayer_.size();
      }
      
      public List<SportTeamPlayer> getSportTeamPlayerList()
      {
        return this.sportTeamPlayer_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public boolean hasShowAfter()
      {
        return this.hasShowAfter;
      }
      
      public boolean hasShowBefore()
      {
        return this.hasShowBefore;
      }
      
      public boolean hasShowDuring()
      {
        return this.hasShowDuring;
      }
      
      public Sports mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setShowBefore(paramCodedInputStreamMicro.readBool());
            break;
          case 16: 
            setShowDuring(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowAfter(paramCodedInputStreamMicro.readBool());
            break;
          case 34: 
            SportTeamPlayer localSportTeamPlayer = new SportTeamPlayer();
            paramCodedInputStreamMicro.readMessage(localSportTeamPlayer);
            addSportTeamPlayer(localSportTeamPlayer);
            break;
          case 42: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          }
          setNotificationSetting(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public Sports setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public Sports setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public Sports setShowAfter(boolean paramBoolean)
      {
        this.hasShowAfter = true;
        this.showAfter_ = paramBoolean;
        return this;
      }
      
      public Sports setShowBefore(boolean paramBoolean)
      {
        this.hasShowBefore = true;
        this.showBefore_ = paramBoolean;
        return this;
      }
      
      public Sports setShowDuring(boolean paramBoolean)
      {
        this.hasShowDuring = true;
        this.showDuring_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasShowBefore()) {
          paramCodedOutputStreamMicro.writeBool(1, getShowBefore());
        }
        if (hasShowDuring()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowDuring());
        }
        if (hasShowAfter()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowAfter());
        }
        Iterator localIterator = getSportTeamPlayerList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(4, (SportTeamPlayer)localIterator.next());
        }
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(5, getNotificationPolicy());
        }
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(6, getNotificationSetting());
        }
      }
      
      public static final class SportTeamPlayer
        extends MessageMicro
      {
        private int cachedSize = -1;
        private String city_ = "";
        private String freebaseId_ = "";
        private boolean hasCity;
        private boolean hasFreebaseId;
        private boolean hasHide;
        private boolean hasHideScores;
        private boolean hasPlayer;
        private boolean hasSport;
        private boolean hasTeam;
        private boolean hideScores_ = false;
        private boolean hide_ = false;
        private String player_ = "";
        private int sport_ = 0;
        private String team_ = "";
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public String getCity()
        {
          return this.city_;
        }
        
        public String getFreebaseId()
        {
          return this.freebaseId_;
        }
        
        public boolean getHide()
        {
          return this.hide_;
        }
        
        public boolean getHideScores()
        {
          return this.hideScores_;
        }
        
        public String getPlayer()
        {
          return this.player_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasSport();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getSport());
          }
          if (hasTeam()) {
            i += CodedOutputStreamMicro.computeStringSize(2, getTeam());
          }
          if (hasPlayer()) {
            i += CodedOutputStreamMicro.computeStringSize(3, getPlayer());
          }
          if (hasHide()) {
            i += CodedOutputStreamMicro.computeBoolSize(4, getHide());
          }
          if (hasCity()) {
            i += CodedOutputStreamMicro.computeStringSize(5, getCity());
          }
          if (hasFreebaseId()) {
            i += CodedOutputStreamMicro.computeStringSize(7, getFreebaseId());
          }
          if (hasHideScores()) {
            i += CodedOutputStreamMicro.computeBoolSize(8, getHideScores());
          }
          this.cachedSize = i;
          return i;
        }
        
        public int getSport()
        {
          return this.sport_;
        }
        
        public String getTeam()
        {
          return this.team_;
        }
        
        public boolean hasCity()
        {
          return this.hasCity;
        }
        
        public boolean hasFreebaseId()
        {
          return this.hasFreebaseId;
        }
        
        public boolean hasHide()
        {
          return this.hasHide;
        }
        
        public boolean hasHideScores()
        {
          return this.hasHideScores;
        }
        
        public boolean hasPlayer()
        {
          return this.hasPlayer;
        }
        
        public boolean hasSport()
        {
          return this.hasSport;
        }
        
        public boolean hasTeam()
        {
          return this.hasTeam;
        }
        
        public SportTeamPlayer mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 8: 
              setSport(paramCodedInputStreamMicro.readInt32());
              break;
            case 18: 
              setTeam(paramCodedInputStreamMicro.readString());
              break;
            case 26: 
              setPlayer(paramCodedInputStreamMicro.readString());
              break;
            case 32: 
              setHide(paramCodedInputStreamMicro.readBool());
              break;
            case 42: 
              setCity(paramCodedInputStreamMicro.readString());
              break;
            case 58: 
              setFreebaseId(paramCodedInputStreamMicro.readString());
              break;
            }
            setHideScores(paramCodedInputStreamMicro.readBool());
          }
        }
        
        public SportTeamPlayer setCity(String paramString)
        {
          this.hasCity = true;
          this.city_ = paramString;
          return this;
        }
        
        public SportTeamPlayer setFreebaseId(String paramString)
        {
          this.hasFreebaseId = true;
          this.freebaseId_ = paramString;
          return this;
        }
        
        public SportTeamPlayer setHide(boolean paramBoolean)
        {
          this.hasHide = true;
          this.hide_ = paramBoolean;
          return this;
        }
        
        public SportTeamPlayer setHideScores(boolean paramBoolean)
        {
          this.hasHideScores = true;
          this.hideScores_ = paramBoolean;
          return this;
        }
        
        public SportTeamPlayer setPlayer(String paramString)
        {
          this.hasPlayer = true;
          this.player_ = paramString;
          return this;
        }
        
        public SportTeamPlayer setSport(int paramInt)
        {
          this.hasSport = true;
          this.sport_ = paramInt;
          return this;
        }
        
        public SportTeamPlayer setTeam(String paramString)
        {
          this.hasTeam = true;
          this.team_ = paramString;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasSport()) {
            paramCodedOutputStreamMicro.writeInt32(1, getSport());
          }
          if (hasTeam()) {
            paramCodedOutputStreamMicro.writeString(2, getTeam());
          }
          if (hasPlayer()) {
            paramCodedOutputStreamMicro.writeString(3, getPlayer());
          }
          if (hasHide()) {
            paramCodedOutputStreamMicro.writeBool(4, getHide());
          }
          if (hasCity()) {
            paramCodedOutputStreamMicro.writeString(5, getCity());
          }
          if (hasFreebaseId()) {
            paramCodedOutputStreamMicro.writeString(7, getFreebaseId());
          }
          if (hasHideScores()) {
            paramCodedOutputStreamMicro.writeBool(8, getHideScores());
          }
        }
      }
    }
    
    public static final class StockQuotes
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasShowAlways;
      private boolean hasShowInTheMorningsAndEvenings;
      private boolean hasShowOnlyBeforeAndAfterEarningsAnnouncement;
      private boolean hasShowOnlyWhenPriceChangesByMoreThanAPercent;
      private boolean hasShowOnlyWhenRelevant;
      private boolean hasShowWhenMarketIsOpen;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private boolean showAlways_ = false;
      private boolean showInTheMorningsAndEvenings_ = false;
      private boolean showOnlyBeforeAndAfterEarningsAnnouncement_ = true;
      private boolean showOnlyWhenPriceChangesByMoreThanAPercent_ = true;
      private boolean showOnlyWhenRelevant_ = true;
      private boolean showWhenMarketIsOpen_ = false;
      private List<StockData> stockData_ = Collections.emptyList();
      
      public StockQuotes addStockData(StockData paramStockData)
      {
        if (paramStockData == null) {
          throw new NullPointerException();
        }
        if (this.stockData_.isEmpty()) {
          this.stockData_ = new ArrayList();
        }
        this.stockData_.add(paramStockData);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowAlways()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowAlways());
        }
        if (hasShowWhenMarketIsOpen()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowWhenMarketIsOpen());
        }
        if (hasShowInTheMorningsAndEvenings()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getShowInTheMorningsAndEvenings());
        }
        if (hasShowOnlyWhenPriceChangesByMoreThanAPercent()) {
          i += CodedOutputStreamMicro.computeBoolSize(5, getShowOnlyWhenPriceChangesByMoreThanAPercent());
        }
        if (hasShowOnlyBeforeAndAfterEarningsAnnouncement()) {
          i += CodedOutputStreamMicro.computeBoolSize(6, getShowOnlyBeforeAndAfterEarningsAnnouncement());
        }
        Iterator localIterator = getStockDataList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(7, (StockData)localIterator.next());
        }
        if (hasShowOnlyWhenRelevant()) {
          i += CodedOutputStreamMicro.computeBoolSize(8, getShowOnlyWhenRelevant());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowAlways()
      {
        return this.showAlways_;
      }
      
      public boolean getShowInTheMorningsAndEvenings()
      {
        return this.showInTheMorningsAndEvenings_;
      }
      
      public boolean getShowOnlyBeforeAndAfterEarningsAnnouncement()
      {
        return this.showOnlyBeforeAndAfterEarningsAnnouncement_;
      }
      
      public boolean getShowOnlyWhenPriceChangesByMoreThanAPercent()
      {
        return this.showOnlyWhenPriceChangesByMoreThanAPercent_;
      }
      
      public boolean getShowOnlyWhenRelevant()
      {
        return this.showOnlyWhenRelevant_;
      }
      
      public boolean getShowWhenMarketIsOpen()
      {
        return this.showWhenMarketIsOpen_;
      }
      
      public List<StockData> getStockDataList()
      {
        return this.stockData_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasShowAlways()
      {
        return this.hasShowAlways;
      }
      
      public boolean hasShowInTheMorningsAndEvenings()
      {
        return this.hasShowInTheMorningsAndEvenings;
      }
      
      public boolean hasShowOnlyBeforeAndAfterEarningsAnnouncement()
      {
        return this.hasShowOnlyBeforeAndAfterEarningsAnnouncement;
      }
      
      public boolean hasShowOnlyWhenPriceChangesByMoreThanAPercent()
      {
        return this.hasShowOnlyWhenPriceChangesByMoreThanAPercent;
      }
      
      public boolean hasShowOnlyWhenRelevant()
      {
        return this.hasShowOnlyWhenRelevant;
      }
      
      public boolean hasShowWhenMarketIsOpen()
      {
        return this.hasShowWhenMarketIsOpen;
      }
      
      public StockQuotes mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setShowAlways(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowWhenMarketIsOpen(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setShowInTheMorningsAndEvenings(paramCodedInputStreamMicro.readBool());
            break;
          case 40: 
            setShowOnlyWhenPriceChangesByMoreThanAPercent(paramCodedInputStreamMicro.readBool());
            break;
          case 48: 
            setShowOnlyBeforeAndAfterEarningsAnnouncement(paramCodedInputStreamMicro.readBool());
            break;
          case 58: 
            StockData localStockData = new StockData();
            paramCodedInputStreamMicro.readMessage(localStockData);
            addStockData(localStockData);
            break;
          }
          setShowOnlyWhenRelevant(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public StockQuotes setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public StockQuotes setShowAlways(boolean paramBoolean)
      {
        this.hasShowAlways = true;
        this.showAlways_ = paramBoolean;
        return this;
      }
      
      public StockQuotes setShowInTheMorningsAndEvenings(boolean paramBoolean)
      {
        this.hasShowInTheMorningsAndEvenings = true;
        this.showInTheMorningsAndEvenings_ = paramBoolean;
        return this;
      }
      
      public StockQuotes setShowOnlyBeforeAndAfterEarningsAnnouncement(boolean paramBoolean)
      {
        this.hasShowOnlyBeforeAndAfterEarningsAnnouncement = true;
        this.showOnlyBeforeAndAfterEarningsAnnouncement_ = paramBoolean;
        return this;
      }
      
      public StockQuotes setShowOnlyWhenPriceChangesByMoreThanAPercent(boolean paramBoolean)
      {
        this.hasShowOnlyWhenPriceChangesByMoreThanAPercent = true;
        this.showOnlyWhenPriceChangesByMoreThanAPercent_ = paramBoolean;
        return this;
      }
      
      public StockQuotes setShowOnlyWhenRelevant(boolean paramBoolean)
      {
        this.hasShowOnlyWhenRelevant = true;
        this.showOnlyWhenRelevant_ = paramBoolean;
        return this;
      }
      
      public StockQuotes setShowWhenMarketIsOpen(boolean paramBoolean)
      {
        this.hasShowWhenMarketIsOpen = true;
        this.showWhenMarketIsOpen_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowAlways()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowAlways());
        }
        if (hasShowWhenMarketIsOpen()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowWhenMarketIsOpen());
        }
        if (hasShowInTheMorningsAndEvenings()) {
          paramCodedOutputStreamMicro.writeBool(4, getShowInTheMorningsAndEvenings());
        }
        if (hasShowOnlyWhenPriceChangesByMoreThanAPercent()) {
          paramCodedOutputStreamMicro.writeBool(5, getShowOnlyWhenPriceChangesByMoreThanAPercent());
        }
        if (hasShowOnlyBeforeAndAfterEarningsAnnouncement()) {
          paramCodedOutputStreamMicro.writeBool(6, getShowOnlyBeforeAndAfterEarningsAnnouncement());
        }
        Iterator localIterator = getStockDataList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(7, (StockData)localIterator.next());
        }
        if (hasShowOnlyWhenRelevant()) {
          paramCodedOutputStreamMicro.writeBool(8, getShowOnlyWhenRelevant());
        }
      }
      
      public static final class StockData
        extends MessageMicro
      {
        private int cachedSize = -1;
        private boolean deleted_ = false;
        private String description_ = "";
        private String exchange_ = "";
        private long gin_ = 0L;
        private boolean hasDeleted;
        private boolean hasDescription;
        private boolean hasExchange;
        private boolean hasGin;
        private boolean hasSymbol;
        private String symbol_ = "";
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public boolean getDeleted()
        {
          return this.deleted_;
        }
        
        public String getDescription()
        {
          return this.description_;
        }
        
        public String getExchange()
        {
          return this.exchange_;
        }
        
        public long getGin()
        {
          return this.gin_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasExchange();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeStringSize(1, getExchange());
          }
          if (hasSymbol()) {
            i += CodedOutputStreamMicro.computeStringSize(2, getSymbol());
          }
          if (hasDescription()) {
            i += CodedOutputStreamMicro.computeStringSize(3, getDescription());
          }
          if (hasGin()) {
            i += CodedOutputStreamMicro.computeUInt64Size(4, getGin());
          }
          if (hasDeleted()) {
            i += CodedOutputStreamMicro.computeBoolSize(5, getDeleted());
          }
          this.cachedSize = i;
          return i;
        }
        
        public String getSymbol()
        {
          return this.symbol_;
        }
        
        public boolean hasDeleted()
        {
          return this.hasDeleted;
        }
        
        public boolean hasDescription()
        {
          return this.hasDescription;
        }
        
        public boolean hasExchange()
        {
          return this.hasExchange;
        }
        
        public boolean hasGin()
        {
          return this.hasGin;
        }
        
        public boolean hasSymbol()
        {
          return this.hasSymbol;
        }
        
        public StockData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 10: 
              setExchange(paramCodedInputStreamMicro.readString());
              break;
            case 18: 
              setSymbol(paramCodedInputStreamMicro.readString());
              break;
            case 26: 
              setDescription(paramCodedInputStreamMicro.readString());
              break;
            case 32: 
              setGin(paramCodedInputStreamMicro.readUInt64());
              break;
            }
            setDeleted(paramCodedInputStreamMicro.readBool());
          }
        }
        
        public StockData setDeleted(boolean paramBoolean)
        {
          this.hasDeleted = true;
          this.deleted_ = paramBoolean;
          return this;
        }
        
        public StockData setDescription(String paramString)
        {
          this.hasDescription = true;
          this.description_ = paramString;
          return this;
        }
        
        public StockData setExchange(String paramString)
        {
          this.hasExchange = true;
          this.exchange_ = paramString;
          return this;
        }
        
        public StockData setGin(long paramLong)
        {
          this.hasGin = true;
          this.gin_ = paramLong;
          return this;
        }
        
        public StockData setSymbol(String paramString)
        {
          this.hasSymbol = true;
          this.symbol_ = paramString;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasExchange()) {
            paramCodedOutputStreamMicro.writeString(1, getExchange());
          }
          if (hasSymbol()) {
            paramCodedOutputStreamMicro.writeString(2, getSymbol());
          }
          if (hasDescription()) {
            paramCodedOutputStreamMicro.writeString(3, getDescription());
          }
          if (hasGin()) {
            paramCodedOutputStreamMicro.writeUInt64(4, getGin());
          }
          if (hasDeleted()) {
            paramCodedOutputStreamMicro.writeBool(5, getDeleted());
          }
        }
      }
    }
    
    public static final class Traffic
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean dEPRECATEDShowEventsFromEmail_ = true;
      private boolean dEPRECATEDShowRestaurantReservationFromEmail_ = true;
      private Sidekick.SidekickConfiguration.NotificationPolicy eventsFromEmailNotification_ = null;
      private boolean hasDEPRECATEDShowEventsFromEmail;
      private boolean hasDEPRECATEDShowRestaurantReservationFromEmail;
      private boolean hasEventsFromEmailNotification;
      private boolean hasHeavyTrafficNotification;
      private boolean hasHeavyTrafficNotificationSetting;
      private boolean hasRegularTrafficNotification;
      private boolean hasRegularTrafficNotificationSetting;
      private boolean hasRestaurantReservationsFromEmailNotification;
      private boolean hasShowFromRecentSearch;
      private boolean hasShowToFrequentPlaces;
      private boolean hasShowToHome;
      private boolean hasShowToWork;
      private boolean hasShowTravelHotelAirport;
      private boolean hasShowTravelToFrequentPlaces;
      private int heavyTrafficNotificationSetting_ = 2;
      private Sidekick.SidekickConfiguration.NotificationPolicy heavyTrafficNotification_ = null;
      private int regularTrafficNotificationSetting_ = 1;
      private Sidekick.SidekickConfiguration.NotificationPolicy regularTrafficNotification_ = null;
      private Sidekick.SidekickConfiguration.NotificationPolicy restaurantReservationsFromEmailNotification_ = null;
      private boolean showFromRecentSearch_ = true;
      private boolean showToFrequentPlaces_ = true;
      private boolean showToHome_ = true;
      private boolean showToWork_ = true;
      private boolean showTravelHotelAirport_ = true;
      private boolean showTravelToFrequentPlaces_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public boolean getDEPRECATEDShowEventsFromEmail()
      {
        return this.dEPRECATEDShowEventsFromEmail_;
      }
      
      public boolean getDEPRECATEDShowRestaurantReservationFromEmail()
      {
        return this.dEPRECATEDShowRestaurantReservationFromEmail_;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getEventsFromEmailNotification()
      {
        return this.eventsFromEmailNotification_;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getHeavyTrafficNotification()
      {
        return this.heavyTrafficNotification_;
      }
      
      public int getHeavyTrafficNotificationSetting()
      {
        return this.heavyTrafficNotificationSetting_;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getRegularTrafficNotification()
      {
        return this.regularTrafficNotification_;
      }
      
      public int getRegularTrafficNotificationSetting()
      {
        return this.regularTrafficNotificationSetting_;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getRestaurantReservationsFromEmailNotification()
      {
        return this.restaurantReservationsFromEmailNotification_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasHeavyTrafficNotification();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getHeavyTrafficNotification());
        }
        if (hasShowToWork()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowToWork());
        }
        if (hasShowToHome()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowToHome());
        }
        if (hasShowToFrequentPlaces()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getShowToFrequentPlaces());
        }
        if (hasShowFromRecentSearch()) {
          i += CodedOutputStreamMicro.computeBoolSize(5, getShowFromRecentSearch());
        }
        if (hasShowTravelHotelAirport()) {
          i += CodedOutputStreamMicro.computeBoolSize(6, getShowTravelHotelAirport());
        }
        if (hasShowTravelToFrequentPlaces()) {
          i += CodedOutputStreamMicro.computeBoolSize(7, getShowTravelToFrequentPlaces());
        }
        if (hasRegularTrafficNotification()) {
          i += CodedOutputStreamMicro.computeMessageSize(8, getRegularTrafficNotification());
        }
        if (hasDEPRECATEDShowRestaurantReservationFromEmail()) {
          i += CodedOutputStreamMicro.computeBoolSize(9, getDEPRECATEDShowRestaurantReservationFromEmail());
        }
        if (hasEventsFromEmailNotification()) {
          i += CodedOutputStreamMicro.computeMessageSize(10, getEventsFromEmailNotification());
        }
        if (hasRestaurantReservationsFromEmailNotification()) {
          i += CodedOutputStreamMicro.computeMessageSize(11, getRestaurantReservationsFromEmailNotification());
        }
        if (hasDEPRECATEDShowEventsFromEmail()) {
          i += CodedOutputStreamMicro.computeBoolSize(12, getDEPRECATEDShowEventsFromEmail());
        }
        if (hasHeavyTrafficNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(13, getHeavyTrafficNotificationSetting());
        }
        if (hasRegularTrafficNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(14, getRegularTrafficNotificationSetting());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowFromRecentSearch()
      {
        return this.showFromRecentSearch_;
      }
      
      public boolean getShowToFrequentPlaces()
      {
        return this.showToFrequentPlaces_;
      }
      
      public boolean getShowToHome()
      {
        return this.showToHome_;
      }
      
      public boolean getShowToWork()
      {
        return this.showToWork_;
      }
      
      public boolean getShowTravelHotelAirport()
      {
        return this.showTravelHotelAirport_;
      }
      
      public boolean getShowTravelToFrequentPlaces()
      {
        return this.showTravelToFrequentPlaces_;
      }
      
      public boolean hasDEPRECATEDShowEventsFromEmail()
      {
        return this.hasDEPRECATEDShowEventsFromEmail;
      }
      
      public boolean hasDEPRECATEDShowRestaurantReservationFromEmail()
      {
        return this.hasDEPRECATEDShowRestaurantReservationFromEmail;
      }
      
      public boolean hasEventsFromEmailNotification()
      {
        return this.hasEventsFromEmailNotification;
      }
      
      public boolean hasHeavyTrafficNotification()
      {
        return this.hasHeavyTrafficNotification;
      }
      
      public boolean hasHeavyTrafficNotificationSetting()
      {
        return this.hasHeavyTrafficNotificationSetting;
      }
      
      public boolean hasRegularTrafficNotification()
      {
        return this.hasRegularTrafficNotification;
      }
      
      public boolean hasRegularTrafficNotificationSetting()
      {
        return this.hasRegularTrafficNotificationSetting;
      }
      
      public boolean hasRestaurantReservationsFromEmailNotification()
      {
        return this.hasRestaurantReservationsFromEmailNotification;
      }
      
      public boolean hasShowFromRecentSearch()
      {
        return this.hasShowFromRecentSearch;
      }
      
      public boolean hasShowToFrequentPlaces()
      {
        return this.hasShowToFrequentPlaces;
      }
      
      public boolean hasShowToHome()
      {
        return this.hasShowToHome;
      }
      
      public boolean hasShowToWork()
      {
        return this.hasShowToWork;
      }
      
      public boolean hasShowTravelHotelAirport()
      {
        return this.hasShowTravelHotelAirport;
      }
      
      public boolean hasShowTravelToFrequentPlaces()
      {
        return this.hasShowTravelToFrequentPlaces;
      }
      
      public Traffic mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy4 = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy4);
            setHeavyTrafficNotification(localNotificationPolicy4);
            break;
          case 16: 
            setShowToWork(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowToHome(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setShowToFrequentPlaces(paramCodedInputStreamMicro.readBool());
            break;
          case 40: 
            setShowFromRecentSearch(paramCodedInputStreamMicro.readBool());
            break;
          case 48: 
            setShowTravelHotelAirport(paramCodedInputStreamMicro.readBool());
            break;
          case 56: 
            setShowTravelToFrequentPlaces(paramCodedInputStreamMicro.readBool());
            break;
          case 66: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy3 = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy3);
            setRegularTrafficNotification(localNotificationPolicy3);
            break;
          case 72: 
            setDEPRECATEDShowRestaurantReservationFromEmail(paramCodedInputStreamMicro.readBool());
            break;
          case 82: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy2 = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy2);
            setEventsFromEmailNotification(localNotificationPolicy2);
            break;
          case 90: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy1 = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy1);
            setRestaurantReservationsFromEmailNotification(localNotificationPolicy1);
            break;
          case 96: 
            setDEPRECATEDShowEventsFromEmail(paramCodedInputStreamMicro.readBool());
            break;
          case 104: 
            setHeavyTrafficNotificationSetting(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setRegularTrafficNotificationSetting(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public Traffic setDEPRECATEDShowEventsFromEmail(boolean paramBoolean)
      {
        this.hasDEPRECATEDShowEventsFromEmail = true;
        this.dEPRECATEDShowEventsFromEmail_ = paramBoolean;
        return this;
      }
      
      public Traffic setDEPRECATEDShowRestaurantReservationFromEmail(boolean paramBoolean)
      {
        this.hasDEPRECATEDShowRestaurantReservationFromEmail = true;
        this.dEPRECATEDShowRestaurantReservationFromEmail_ = paramBoolean;
        return this;
      }
      
      public Traffic setEventsFromEmailNotification(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasEventsFromEmailNotification = true;
        this.eventsFromEmailNotification_ = paramNotificationPolicy;
        return this;
      }
      
      public Traffic setHeavyTrafficNotification(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasHeavyTrafficNotification = true;
        this.heavyTrafficNotification_ = paramNotificationPolicy;
        return this;
      }
      
      public Traffic setHeavyTrafficNotificationSetting(int paramInt)
      {
        this.hasHeavyTrafficNotificationSetting = true;
        this.heavyTrafficNotificationSetting_ = paramInt;
        return this;
      }
      
      public Traffic setRegularTrafficNotification(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasRegularTrafficNotification = true;
        this.regularTrafficNotification_ = paramNotificationPolicy;
        return this;
      }
      
      public Traffic setRegularTrafficNotificationSetting(int paramInt)
      {
        this.hasRegularTrafficNotificationSetting = true;
        this.regularTrafficNotificationSetting_ = paramInt;
        return this;
      }
      
      public Traffic setRestaurantReservationsFromEmailNotification(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasRestaurantReservationsFromEmailNotification = true;
        this.restaurantReservationsFromEmailNotification_ = paramNotificationPolicy;
        return this;
      }
      
      public Traffic setShowFromRecentSearch(boolean paramBoolean)
      {
        this.hasShowFromRecentSearch = true;
        this.showFromRecentSearch_ = paramBoolean;
        return this;
      }
      
      public Traffic setShowToFrequentPlaces(boolean paramBoolean)
      {
        this.hasShowToFrequentPlaces = true;
        this.showToFrequentPlaces_ = paramBoolean;
        return this;
      }
      
      public Traffic setShowToHome(boolean paramBoolean)
      {
        this.hasShowToHome = true;
        this.showToHome_ = paramBoolean;
        return this;
      }
      
      public Traffic setShowToWork(boolean paramBoolean)
      {
        this.hasShowToWork = true;
        this.showToWork_ = paramBoolean;
        return this;
      }
      
      public Traffic setShowTravelHotelAirport(boolean paramBoolean)
      {
        this.hasShowTravelHotelAirport = true;
        this.showTravelHotelAirport_ = paramBoolean;
        return this;
      }
      
      public Traffic setShowTravelToFrequentPlaces(boolean paramBoolean)
      {
        this.hasShowTravelToFrequentPlaces = true;
        this.showTravelToFrequentPlaces_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasHeavyTrafficNotification()) {
          paramCodedOutputStreamMicro.writeMessage(1, getHeavyTrafficNotification());
        }
        if (hasShowToWork()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowToWork());
        }
        if (hasShowToHome()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowToHome());
        }
        if (hasShowToFrequentPlaces()) {
          paramCodedOutputStreamMicro.writeBool(4, getShowToFrequentPlaces());
        }
        if (hasShowFromRecentSearch()) {
          paramCodedOutputStreamMicro.writeBool(5, getShowFromRecentSearch());
        }
        if (hasShowTravelHotelAirport()) {
          paramCodedOutputStreamMicro.writeBool(6, getShowTravelHotelAirport());
        }
        if (hasShowTravelToFrequentPlaces()) {
          paramCodedOutputStreamMicro.writeBool(7, getShowTravelToFrequentPlaces());
        }
        if (hasRegularTrafficNotification()) {
          paramCodedOutputStreamMicro.writeMessage(8, getRegularTrafficNotification());
        }
        if (hasDEPRECATEDShowRestaurantReservationFromEmail()) {
          paramCodedOutputStreamMicro.writeBool(9, getDEPRECATEDShowRestaurantReservationFromEmail());
        }
        if (hasEventsFromEmailNotification()) {
          paramCodedOutputStreamMicro.writeMessage(10, getEventsFromEmailNotification());
        }
        if (hasRestaurantReservationsFromEmailNotification()) {
          paramCodedOutputStreamMicro.writeMessage(11, getRestaurantReservationsFromEmailNotification());
        }
        if (hasDEPRECATEDShowEventsFromEmail()) {
          paramCodedOutputStreamMicro.writeBool(12, getDEPRECATEDShowEventsFromEmail());
        }
        if (hasHeavyTrafficNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(13, getHeavyTrafficNotificationSetting());
        }
        if (hasRegularTrafficNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(14, getRegularTrafficNotificationSetting());
        }
      }
    }
    
    public static final class TrafficCardSharing
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasShareCommute;
      private boolean hasShareLocation;
      private boolean hasUserPromptedToShareCommute;
      private List<LocationSharingContact> locationSharingContact_ = Collections.emptyList();
      private boolean shareCommute_ = false;
      private boolean shareLocation_ = false;
      private boolean userPromptedToShareCommute_ = false;
      
      public TrafficCardSharing addLocationSharingContact(LocationSharingContact paramLocationSharingContact)
      {
        if (paramLocationSharingContact == null) {
          throw new NullPointerException();
        }
        if (this.locationSharingContact_.isEmpty()) {
          this.locationSharingContact_ = new ArrayList();
        }
        this.locationSharingContact_.add(paramLocationSharingContact);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public List<LocationSharingContact> getLocationSharingContactList()
      {
        return this.locationSharingContact_;
      }
      
      public int getSerializedSize()
      {
        int i = 0;
        Iterator localIterator = getLocationSharingContactList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(1, (LocationSharingContact)localIterator.next());
        }
        if (hasShareCommute()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShareCommute());
        }
        if (hasUserPromptedToShareCommute()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getUserPromptedToShareCommute());
        }
        if (hasShareLocation()) {
          i += CodedOutputStreamMicro.computeBoolSize(5, getShareLocation());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShareCommute()
      {
        return this.shareCommute_;
      }
      
      public boolean getShareLocation()
      {
        return this.shareLocation_;
      }
      
      public boolean getUserPromptedToShareCommute()
      {
        return this.userPromptedToShareCommute_;
      }
      
      public boolean hasShareCommute()
      {
        return this.hasShareCommute;
      }
      
      public boolean hasShareLocation()
      {
        return this.hasShareLocation;
      }
      
      public boolean hasUserPromptedToShareCommute()
      {
        return this.hasUserPromptedToShareCommute;
      }
      
      public TrafficCardSharing mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            LocationSharingContact localLocationSharingContact = new LocationSharingContact();
            paramCodedInputStreamMicro.readMessage(localLocationSharingContact);
            addLocationSharingContact(localLocationSharingContact);
            break;
          case 24: 
            setShareCommute(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setUserPromptedToShareCommute(paramCodedInputStreamMicro.readBool());
            break;
          }
          setShareLocation(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public TrafficCardSharing setShareCommute(boolean paramBoolean)
      {
        this.hasShareCommute = true;
        this.shareCommute_ = paramBoolean;
        return this;
      }
      
      public TrafficCardSharing setShareLocation(boolean paramBoolean)
      {
        this.hasShareLocation = true;
        this.shareLocation_ = paramBoolean;
        return this;
      }
      
      public TrafficCardSharing setUserPromptedToShareCommute(boolean paramBoolean)
      {
        this.hasUserPromptedToShareCommute = true;
        this.userPromptedToShareCommute_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        Iterator localIterator = getLocationSharingContactList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(1, (LocationSharingContact)localIterator.next());
        }
        if (hasShareCommute()) {
          paramCodedOutputStreamMicro.writeBool(3, getShareCommute());
        }
        if (hasUserPromptedToShareCommute()) {
          paramCodedOutputStreamMicro.writeBool(4, getUserPromptedToShareCommute());
        }
        if (hasShareLocation()) {
          paramCodedOutputStreamMicro.writeBool(5, getShareLocation());
        }
      }
      
      public static final class LocationSharingContact
        extends MessageMicro
      {
        private int cachedSize = -1;
        private int gender_ = 0;
        private boolean hasGender;
        private boolean hasHide;
        private boolean hasLocation;
        private boolean hasLocationLastUpdateTimestampSeconds;
        private boolean hasName;
        private boolean hasObfuscatedGaiaId;
        private boolean hasProfilePhoto;
        private boolean hide_ = false;
        private long locationLastUpdateTimestampSeconds_ = 0L;
        private Sidekick.Location location_ = null;
        private String name_ = "";
        private long obfuscatedGaiaId_ = 0L;
        private Sidekick.Photo profilePhoto_ = null;
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public int getGender()
        {
          return this.gender_;
        }
        
        public boolean getHide()
        {
          return this.hide_;
        }
        
        public Sidekick.Location getLocation()
        {
          return this.location_;
        }
        
        public long getLocationLastUpdateTimestampSeconds()
        {
          return this.locationLastUpdateTimestampSeconds_;
        }
        
        public String getName()
        {
          return this.name_;
        }
        
        public long getObfuscatedGaiaId()
        {
          return this.obfuscatedGaiaId_;
        }
        
        public Sidekick.Photo getProfilePhoto()
        {
          return this.profilePhoto_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasObfuscatedGaiaId();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getObfuscatedGaiaId());
          }
          if (hasHide()) {
            i += CodedOutputStreamMicro.computeBoolSize(2, getHide());
          }
          if (hasName()) {
            i += CodedOutputStreamMicro.computeStringSize(3, getName());
          }
          if (hasProfilePhoto()) {
            i += CodedOutputStreamMicro.computeMessageSize(4, getProfilePhoto());
          }
          if (hasLocation()) {
            i += CodedOutputStreamMicro.computeMessageSize(5, getLocation());
          }
          if (hasLocationLastUpdateTimestampSeconds()) {
            i += CodedOutputStreamMicro.computeInt64Size(6, getLocationLastUpdateTimestampSeconds());
          }
          if (hasGender()) {
            i += CodedOutputStreamMicro.computeInt32Size(7, getGender());
          }
          this.cachedSize = i;
          return i;
        }
        
        public boolean hasGender()
        {
          return this.hasGender;
        }
        
        public boolean hasHide()
        {
          return this.hasHide;
        }
        
        public boolean hasLocation()
        {
          return this.hasLocation;
        }
        
        public boolean hasLocationLastUpdateTimestampSeconds()
        {
          return this.hasLocationLastUpdateTimestampSeconds;
        }
        
        public boolean hasName()
        {
          return this.hasName;
        }
        
        public boolean hasObfuscatedGaiaId()
        {
          return this.hasObfuscatedGaiaId;
        }
        
        public boolean hasProfilePhoto()
        {
          return this.hasProfilePhoto;
        }
        
        public LocationSharingContact mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 8: 
              setObfuscatedGaiaId(paramCodedInputStreamMicro.readInt64());
              break;
            case 16: 
              setHide(paramCodedInputStreamMicro.readBool());
              break;
            case 26: 
              setName(paramCodedInputStreamMicro.readString());
              break;
            case 34: 
              Sidekick.Photo localPhoto = new Sidekick.Photo();
              paramCodedInputStreamMicro.readMessage(localPhoto);
              setProfilePhoto(localPhoto);
              break;
            case 42: 
              Sidekick.Location localLocation = new Sidekick.Location();
              paramCodedInputStreamMicro.readMessage(localLocation);
              setLocation(localLocation);
              break;
            case 48: 
              setLocationLastUpdateTimestampSeconds(paramCodedInputStreamMicro.readInt64());
              break;
            }
            setGender(paramCodedInputStreamMicro.readInt32());
          }
        }
        
        public LocationSharingContact setGender(int paramInt)
        {
          this.hasGender = true;
          this.gender_ = paramInt;
          return this;
        }
        
        public LocationSharingContact setHide(boolean paramBoolean)
        {
          this.hasHide = true;
          this.hide_ = paramBoolean;
          return this;
        }
        
        public LocationSharingContact setLocation(Sidekick.Location paramLocation)
        {
          if (paramLocation == null) {
            throw new NullPointerException();
          }
          this.hasLocation = true;
          this.location_ = paramLocation;
          return this;
        }
        
        public LocationSharingContact setLocationLastUpdateTimestampSeconds(long paramLong)
        {
          this.hasLocationLastUpdateTimestampSeconds = true;
          this.locationLastUpdateTimestampSeconds_ = paramLong;
          return this;
        }
        
        public LocationSharingContact setName(String paramString)
        {
          this.hasName = true;
          this.name_ = paramString;
          return this;
        }
        
        public LocationSharingContact setObfuscatedGaiaId(long paramLong)
        {
          this.hasObfuscatedGaiaId = true;
          this.obfuscatedGaiaId_ = paramLong;
          return this;
        }
        
        public LocationSharingContact setProfilePhoto(Sidekick.Photo paramPhoto)
        {
          if (paramPhoto == null) {
            throw new NullPointerException();
          }
          this.hasProfilePhoto = true;
          this.profilePhoto_ = paramPhoto;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasObfuscatedGaiaId()) {
            paramCodedOutputStreamMicro.writeInt64(1, getObfuscatedGaiaId());
          }
          if (hasHide()) {
            paramCodedOutputStreamMicro.writeBool(2, getHide());
          }
          if (hasName()) {
            paramCodedOutputStreamMicro.writeString(3, getName());
          }
          if (hasProfilePhoto()) {
            paramCodedOutputStreamMicro.writeMessage(4, getProfilePhoto());
          }
          if (hasLocation()) {
            paramCodedOutputStreamMicro.writeMessage(5, getLocation());
          }
          if (hasLocationLastUpdateTimestampSeconds()) {
            paramCodedOutputStreamMicro.writeInt64(6, getLocationLastUpdateTimestampSeconds());
          }
          if (hasGender()) {
            paramCodedOutputStreamMicro.writeInt32(7, getGender());
          }
        }
      }
    }
    
    public static final class TransitStations
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasNotificationSetting;
      private boolean hasShowBusStops;
      private boolean hasShowTrainStations;
      private boolean hasShowWhenTraveling;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private int notificationSetting_ = 0;
      private boolean showBusStops_ = true;
      private boolean showTrainStations_ = true;
      private boolean showWhenTraveling_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowTrainStations()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowTrainStations());
        }
        if (hasShowBusStops()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowBusStops());
        }
        if (hasShowWhenTraveling()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getShowWhenTraveling());
        }
        if (hasNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(5, getNotificationSetting());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowBusStops()
      {
        return this.showBusStops_;
      }
      
      public boolean getShowTrainStations()
      {
        return this.showTrainStations_;
      }
      
      public boolean getShowWhenTraveling()
      {
        return this.showWhenTraveling_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public boolean hasShowBusStops()
      {
        return this.hasShowBusStops;
      }
      
      public boolean hasShowTrainStations()
      {
        return this.hasShowTrainStations;
      }
      
      public boolean hasShowWhenTraveling()
      {
        return this.hasShowWhenTraveling;
      }
      
      public TransitStations mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setShowTrainStations(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowBusStops(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setShowWhenTraveling(paramCodedInputStreamMicro.readBool());
            break;
          }
          setNotificationSetting(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public TransitStations setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public TransitStations setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public TransitStations setShowBusStops(boolean paramBoolean)
      {
        this.hasShowBusStops = true;
        this.showBusStops_ = paramBoolean;
        return this;
      }
      
      public TransitStations setShowTrainStations(boolean paramBoolean)
      {
        this.hasShowTrainStations = true;
        this.showTrainStations_ = paramBoolean;
        return this;
      }
      
      public TransitStations setShowWhenTraveling(boolean paramBoolean)
      {
        this.hasShowWhenTraveling = true;
        this.showWhenTraveling_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowTrainStations()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowTrainStations());
        }
        if (hasShowBusStops()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowBusStops());
        }
        if (hasShowWhenTraveling()) {
          paramCodedOutputStreamMicro.writeBool(4, getShowWhenTraveling());
        }
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(5, getNotificationSetting());
        }
      }
    }
    
    public static final class Translate
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasShowWhenLanguageDifferent;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private boolean showWhenLanguageDifferent_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowWhenLanguageDifferent()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowWhenLanguageDifferent());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowWhenLanguageDifferent()
      {
        return this.showWhenLanguageDifferent_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasShowWhenLanguageDifferent()
      {
        return this.hasShowWhenLanguageDifferent;
      }
      
      public Translate mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          }
          setShowWhenLanguageDifferent(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public Translate setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public Translate setShowWhenLanguageDifferent(boolean paramBoolean)
      {
        this.hasShowWhenLanguageDifferent = true;
        this.showWhenLanguageDifferent_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowWhenLanguageDifferent()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowWhenLanguageDifferent());
        }
      }
    }
    
    public static final class TravelClock
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasShowWhenTimeZoneDifferent;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private boolean showWhenTimeZoneDifferent_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowWhenTimeZoneDifferent()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowWhenTimeZoneDifferent());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowWhenTimeZoneDifferent()
      {
        return this.showWhenTimeZoneDifferent_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasShowWhenTimeZoneDifferent()
      {
        return this.hasShowWhenTimeZoneDifferent;
      }
      
      public TravelClock mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          }
          setShowWhenTimeZoneDifferent(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public TravelClock setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public TravelClock setShowWhenTimeZoneDifferent(boolean paramBoolean)
      {
        this.hasShowWhenTimeZoneDifferent = true;
        this.showWhenTimeZoneDifferent_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowWhenTimeZoneDifferent()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowWhenTimeZoneDifferent());
        }
      }
    }
    
    public static final class UseGmailData
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasOptOutFirstShownTimestampSeconds;
      private boolean hasShowGmailCardSettings;
      private boolean hasUseData;
      private boolean hasUserActedOnCard;
      private long optOutFirstShownTimestampSeconds_ = 0L;
      private boolean showGmailCardSettings_ = false;
      private boolean useData_ = true;
      private boolean userActedOnCard_ = false;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public long getOptOutFirstShownTimestampSeconds()
      {
        return this.optOutFirstShownTimestampSeconds_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasUserActedOnCard();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getUserActedOnCard());
        }
        if (hasUseData()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getUseData());
        }
        if (hasOptOutFirstShownTimestampSeconds()) {
          i += CodedOutputStreamMicro.computeInt64Size(3, getOptOutFirstShownTimestampSeconds());
        }
        if (hasShowGmailCardSettings()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getShowGmailCardSettings());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowGmailCardSettings()
      {
        return this.showGmailCardSettings_;
      }
      
      public boolean getUseData()
      {
        return this.useData_;
      }
      
      public boolean getUserActedOnCard()
      {
        return this.userActedOnCard_;
      }
      
      public boolean hasOptOutFirstShownTimestampSeconds()
      {
        return this.hasOptOutFirstShownTimestampSeconds;
      }
      
      public boolean hasShowGmailCardSettings()
      {
        return this.hasShowGmailCardSettings;
      }
      
      public boolean hasUseData()
      {
        return this.hasUseData;
      }
      
      public boolean hasUserActedOnCard()
      {
        return this.hasUserActedOnCard;
      }
      
      public UseGmailData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setUserActedOnCard(paramCodedInputStreamMicro.readBool());
            break;
          case 16: 
            setUseData(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setOptOutFirstShownTimestampSeconds(paramCodedInputStreamMicro.readInt64());
            break;
          }
          setShowGmailCardSettings(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public UseGmailData setOptOutFirstShownTimestampSeconds(long paramLong)
      {
        this.hasOptOutFirstShownTimestampSeconds = true;
        this.optOutFirstShownTimestampSeconds_ = paramLong;
        return this;
      }
      
      public UseGmailData setShowGmailCardSettings(boolean paramBoolean)
      {
        this.hasShowGmailCardSettings = true;
        this.showGmailCardSettings_ = paramBoolean;
        return this;
      }
      
      public UseGmailData setUseData(boolean paramBoolean)
      {
        this.hasUseData = true;
        this.useData_ = paramBoolean;
        return this;
      }
      
      public UseGmailData setUserActedOnCard(boolean paramBoolean)
      {
        this.hasUserActedOnCard = true;
        this.userActedOnCard_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasUserActedOnCard()) {
          paramCodedOutputStreamMicro.writeBool(1, getUserActedOnCard());
        }
        if (hasUseData()) {
          paramCodedOutputStreamMicro.writeBool(2, getUseData());
        }
        if (hasOptOutFirstShownTimestampSeconds()) {
          paramCodedOutputStreamMicro.writeInt64(3, getOptOutFirstShownTimestampSeconds());
        }
        if (hasShowGmailCardSettings()) {
          paramCodedOutputStreamMicro.writeBool(4, getShowGmailCardSettings());
        }
      }
    }
    
    public static final class Weather
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNotificationPolicy;
      private boolean hasNotificationSetting;
      private boolean hasShowAlways;
      private boolean hasShowAtCurrentLocation;
      private boolean hasShowAtHome;
      private boolean hasShowAtWork;
      private boolean hasShowEvening;
      private boolean hasShowMorning;
      private boolean hasShowUpcomingTrips;
      private Sidekick.SidekickConfiguration.NotificationPolicy notificationPolicy_ = null;
      private int notificationSetting_ = 1;
      private boolean showAlways_ = true;
      private boolean showAtCurrentLocation_ = true;
      private boolean showAtHome_ = false;
      private boolean showAtWork_ = false;
      private boolean showEvening_ = true;
      private boolean showMorning_ = true;
      private boolean showUpcomingTrips_ = true;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.SidekickConfiguration.NotificationPolicy getNotificationPolicy()
      {
        return this.notificationPolicy_;
      }
      
      public int getNotificationSetting()
      {
        return this.notificationSetting_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasNotificationPolicy();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNotificationPolicy());
        }
        if (hasShowMorning()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getShowMorning());
        }
        if (hasShowEvening()) {
          i += CodedOutputStreamMicro.computeBoolSize(3, getShowEvening());
        }
        if (hasShowAtHome()) {
          i += CodedOutputStreamMicro.computeBoolSize(4, getShowAtHome());
        }
        if (hasShowAtWork()) {
          i += CodedOutputStreamMicro.computeBoolSize(5, getShowAtWork());
        }
        if (hasShowAtCurrentLocation()) {
          i += CodedOutputStreamMicro.computeBoolSize(6, getShowAtCurrentLocation());
        }
        if (hasShowAlways()) {
          i += CodedOutputStreamMicro.computeBoolSize(7, getShowAlways());
        }
        if (hasNotificationSetting()) {
          i += CodedOutputStreamMicro.computeInt32Size(8, getNotificationSetting());
        }
        if (hasShowUpcomingTrips()) {
          i += CodedOutputStreamMicro.computeBoolSize(9, getShowUpcomingTrips());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean getShowAlways()
      {
        return this.showAlways_;
      }
      
      public boolean getShowAtCurrentLocation()
      {
        return this.showAtCurrentLocation_;
      }
      
      public boolean getShowAtHome()
      {
        return this.showAtHome_;
      }
      
      public boolean getShowAtWork()
      {
        return this.showAtWork_;
      }
      
      public boolean getShowEvening()
      {
        return this.showEvening_;
      }
      
      public boolean getShowMorning()
      {
        return this.showMorning_;
      }
      
      public boolean getShowUpcomingTrips()
      {
        return this.showUpcomingTrips_;
      }
      
      public boolean hasNotificationPolicy()
      {
        return this.hasNotificationPolicy;
      }
      
      public boolean hasNotificationSetting()
      {
        return this.hasNotificationSetting;
      }
      
      public boolean hasShowAlways()
      {
        return this.hasShowAlways;
      }
      
      public boolean hasShowAtCurrentLocation()
      {
        return this.hasShowAtCurrentLocation;
      }
      
      public boolean hasShowAtHome()
      {
        return this.hasShowAtHome;
      }
      
      public boolean hasShowAtWork()
      {
        return this.hasShowAtWork;
      }
      
      public boolean hasShowEvening()
      {
        return this.hasShowEvening;
      }
      
      public boolean hasShowMorning()
      {
        return this.hasShowMorning;
      }
      
      public boolean hasShowUpcomingTrips()
      {
        return this.hasShowUpcomingTrips;
      }
      
      public Weather mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.SidekickConfiguration.NotificationPolicy localNotificationPolicy = new Sidekick.SidekickConfiguration.NotificationPolicy();
            paramCodedInputStreamMicro.readMessage(localNotificationPolicy);
            setNotificationPolicy(localNotificationPolicy);
            break;
          case 16: 
            setShowMorning(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setShowEvening(paramCodedInputStreamMicro.readBool());
            break;
          case 32: 
            setShowAtHome(paramCodedInputStreamMicro.readBool());
            break;
          case 40: 
            setShowAtWork(paramCodedInputStreamMicro.readBool());
            break;
          case 48: 
            setShowAtCurrentLocation(paramCodedInputStreamMicro.readBool());
            break;
          case 56: 
            setShowAlways(paramCodedInputStreamMicro.readBool());
            break;
          case 64: 
            setNotificationSetting(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setShowUpcomingTrips(paramCodedInputStreamMicro.readBool());
        }
      }
      
      public Weather setNotificationPolicy(Sidekick.SidekickConfiguration.NotificationPolicy paramNotificationPolicy)
      {
        if (paramNotificationPolicy == null) {
          throw new NullPointerException();
        }
        this.hasNotificationPolicy = true;
        this.notificationPolicy_ = paramNotificationPolicy;
        return this;
      }
      
      public Weather setNotificationSetting(int paramInt)
      {
        this.hasNotificationSetting = true;
        this.notificationSetting_ = paramInt;
        return this;
      }
      
      public Weather setShowAlways(boolean paramBoolean)
      {
        this.hasShowAlways = true;
        this.showAlways_ = paramBoolean;
        return this;
      }
      
      public Weather setShowAtCurrentLocation(boolean paramBoolean)
      {
        this.hasShowAtCurrentLocation = true;
        this.showAtCurrentLocation_ = paramBoolean;
        return this;
      }
      
      public Weather setShowAtHome(boolean paramBoolean)
      {
        this.hasShowAtHome = true;
        this.showAtHome_ = paramBoolean;
        return this;
      }
      
      public Weather setShowAtWork(boolean paramBoolean)
      {
        this.hasShowAtWork = true;
        this.showAtWork_ = paramBoolean;
        return this;
      }
      
      public Weather setShowEvening(boolean paramBoolean)
      {
        this.hasShowEvening = true;
        this.showEvening_ = paramBoolean;
        return this;
      }
      
      public Weather setShowMorning(boolean paramBoolean)
      {
        this.hasShowMorning = true;
        this.showMorning_ = paramBoolean;
        return this;
      }
      
      public Weather setShowUpcomingTrips(boolean paramBoolean)
      {
        this.hasShowUpcomingTrips = true;
        this.showUpcomingTrips_ = paramBoolean;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasNotificationPolicy()) {
          paramCodedOutputStreamMicro.writeMessage(1, getNotificationPolicy());
        }
        if (hasShowMorning()) {
          paramCodedOutputStreamMicro.writeBool(2, getShowMorning());
        }
        if (hasShowEvening()) {
          paramCodedOutputStreamMicro.writeBool(3, getShowEvening());
        }
        if (hasShowAtHome()) {
          paramCodedOutputStreamMicro.writeBool(4, getShowAtHome());
        }
        if (hasShowAtWork()) {
          paramCodedOutputStreamMicro.writeBool(5, getShowAtWork());
        }
        if (hasShowAtCurrentLocation()) {
          paramCodedOutputStreamMicro.writeBool(6, getShowAtCurrentLocation());
        }
        if (hasShowAlways()) {
          paramCodedOutputStreamMicro.writeBool(7, getShowAlways());
        }
        if (hasNotificationSetting()) {
          paramCodedOutputStreamMicro.writeInt32(8, getNotificationSetting());
        }
        if (hasShowUpcomingTrips()) {
          paramCodedOutputStreamMicro.writeBool(9, getShowUpcomingTrips());
        }
      }
    }
    
    public static final class WebsiteUpdate
      extends MessageMicro
    {
      private int cachedSize = -1;
      private List<WebsiteInterest> site_ = Collections.emptyList();
      
      public WebsiteUpdate addSite(WebsiteInterest paramWebsiteInterest)
      {
        if (paramWebsiteInterest == null) {
          throw new NullPointerException();
        }
        if (this.site_.isEmpty()) {
          this.site_ = new ArrayList();
        }
        this.site_.add(paramWebsiteInterest);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getSerializedSize()
      {
        int i = 0;
        Iterator localIterator = getSiteList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(1, (WebsiteInterest)localIterator.next());
        }
        this.cachedSize = i;
        return i;
      }
      
      public List<WebsiteInterest> getSiteList()
      {
        return this.site_;
      }
      
      public WebsiteUpdate mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          }
          WebsiteInterest localWebsiteInterest = new WebsiteInterest();
          paramCodedInputStreamMicro.readMessage(localWebsiteInterest);
          addSite(localWebsiteInterest);
        }
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        Iterator localIterator = getSiteList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(1, (WebsiteInterest)localIterator.next());
        }
      }
      
      public static final class WebsiteInterest
        extends MessageMicro
      {
        private int cachedSize = -1;
        private boolean hasUrl;
        private boolean hasWantsUpdates;
        private String url_ = "";
        private boolean wantsUpdates_ = false;
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasUrl();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeStringSize(1, getUrl());
          }
          if (hasWantsUpdates()) {
            i += CodedOutputStreamMicro.computeBoolSize(2, getWantsUpdates());
          }
          this.cachedSize = i;
          return i;
        }
        
        public String getUrl()
        {
          return this.url_;
        }
        
        public boolean getWantsUpdates()
        {
          return this.wantsUpdates_;
        }
        
        public boolean hasUrl()
        {
          return this.hasUrl;
        }
        
        public boolean hasWantsUpdates()
        {
          return this.hasWantsUpdates;
        }
        
        public WebsiteInterest mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 10: 
              setUrl(paramCodedInputStreamMicro.readString());
              break;
            }
            setWantsUpdates(paramCodedInputStreamMicro.readBool());
          }
        }
        
        public WebsiteInterest setUrl(String paramString)
        {
          this.hasUrl = true;
          this.url_ = paramString;
          return this;
        }
        
        public WebsiteInterest setWantsUpdates(boolean paramBoolean)
        {
          this.hasWantsUpdates = true;
          this.wantsUpdates_ = paramBoolean;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasUrl()) {
            paramCodedOutputStreamMicro.writeString(1, getUrl());
          }
          if (hasWantsUpdates()) {
            paramCodedOutputStreamMicro.writeBool(2, getWantsUpdates());
          }
        }
      }
    }
  }
  
  public static final class SidekickConfigurationChanges
    extends MessageMicro
  {
    private Sidekick.SidekickConfiguration adds_ = null;
    private int cachedSize = -1;
    private Sidekick.SidekickConfiguration deletes_ = null;
    private boolean hasAdds;
    private boolean hasDeletes;
    private boolean hasUpdates;
    private Sidekick.SidekickConfiguration updates_ = null;
    
    public Sidekick.SidekickConfiguration getAdds()
    {
      return this.adds_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.SidekickConfiguration getDeletes()
    {
      return this.deletes_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasUpdates();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getUpdates());
      }
      if (hasAdds()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getAdds());
      }
      if (hasDeletes()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getDeletes());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.SidekickConfiguration getUpdates()
    {
      return this.updates_;
    }
    
    public boolean hasAdds()
    {
      return this.hasAdds;
    }
    
    public boolean hasDeletes()
    {
      return this.hasDeletes;
    }
    
    public boolean hasUpdates()
    {
      return this.hasUpdates;
    }
    
    public SidekickConfigurationChanges mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.SidekickConfiguration localSidekickConfiguration3 = new Sidekick.SidekickConfiguration();
          paramCodedInputStreamMicro.readMessage(localSidekickConfiguration3);
          setUpdates(localSidekickConfiguration3);
          break;
        case 18: 
          Sidekick.SidekickConfiguration localSidekickConfiguration2 = new Sidekick.SidekickConfiguration();
          paramCodedInputStreamMicro.readMessage(localSidekickConfiguration2);
          setAdds(localSidekickConfiguration2);
          break;
        }
        Sidekick.SidekickConfiguration localSidekickConfiguration1 = new Sidekick.SidekickConfiguration();
        paramCodedInputStreamMicro.readMessage(localSidekickConfiguration1);
        setDeletes(localSidekickConfiguration1);
      }
    }
    
    public SidekickConfigurationChanges setAdds(Sidekick.SidekickConfiguration paramSidekickConfiguration)
    {
      if (paramSidekickConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasAdds = true;
      this.adds_ = paramSidekickConfiguration;
      return this;
    }
    
    public SidekickConfigurationChanges setDeletes(Sidekick.SidekickConfiguration paramSidekickConfiguration)
    {
      if (paramSidekickConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasDeletes = true;
      this.deletes_ = paramSidekickConfiguration;
      return this;
    }
    
    public SidekickConfigurationChanges setUpdates(Sidekick.SidekickConfiguration paramSidekickConfiguration)
    {
      if (paramSidekickConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasUpdates = true;
      this.updates_ = paramSidekickConfiguration;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasUpdates()) {
        paramCodedOutputStreamMicro.writeMessage(1, getUpdates());
      }
      if (hasAdds()) {
        paramCodedOutputStreamMicro.writeMessage(2, getAdds());
      }
      if (hasDeletes()) {
        paramCodedOutputStreamMicro.writeMessage(3, getDeletes());
      }
    }
  }
  
  public static final class SidekickHttpRequest
    extends MessageMicro
  {
    private int cachedSize = -1;
    private Sidekick.ClientDescription client_ = null;
    private boolean hasClient;
    private boolean hasPayload;
    private boolean hasTimeoutSeconds;
    private boolean hasTimestampSeconds;
    private Sidekick.RequestPayload payload_ = null;
    private int timeoutSeconds_ = 0;
    private long timestampSeconds_ = 0L;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ClientDescription getClient()
    {
      return this.client_;
    }
    
    public Sidekick.RequestPayload getPayload()
    {
      return this.payload_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTimestampSeconds();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getTimestampSeconds());
      }
      if (hasTimeoutSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getTimeoutSeconds());
      }
      if (hasClient()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getClient());
      }
      if (hasPayload()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getPayload());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getTimeoutSeconds()
    {
      return this.timeoutSeconds_;
    }
    
    public long getTimestampSeconds()
    {
      return this.timestampSeconds_;
    }
    
    public boolean hasClient()
    {
      return this.hasClient;
    }
    
    public boolean hasPayload()
    {
      return this.hasPayload;
    }
    
    public boolean hasTimeoutSeconds()
    {
      return this.hasTimeoutSeconds;
    }
    
    public boolean hasTimestampSeconds()
    {
      return this.hasTimestampSeconds;
    }
    
    public SidekickHttpRequest mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 16: 
          setTimeoutSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 26: 
          Sidekick.ClientDescription localClientDescription = new Sidekick.ClientDescription();
          paramCodedInputStreamMicro.readMessage(localClientDescription);
          setClient(localClientDescription);
          break;
        }
        Sidekick.RequestPayload localRequestPayload = new Sidekick.RequestPayload();
        paramCodedInputStreamMicro.readMessage(localRequestPayload);
        setPayload(localRequestPayload);
      }
    }
    
    public SidekickHttpRequest setClient(Sidekick.ClientDescription paramClientDescription)
    {
      if (paramClientDescription == null) {
        throw new NullPointerException();
      }
      this.hasClient = true;
      this.client_ = paramClientDescription;
      return this;
    }
    
    public SidekickHttpRequest setPayload(Sidekick.RequestPayload paramRequestPayload)
    {
      if (paramRequestPayload == null) {
        throw new NullPointerException();
      }
      this.hasPayload = true;
      this.payload_ = paramRequestPayload;
      return this;
    }
    
    public SidekickHttpRequest setTimeoutSeconds(int paramInt)
    {
      this.hasTimeoutSeconds = true;
      this.timeoutSeconds_ = paramInt;
      return this;
    }
    
    public SidekickHttpRequest setTimestampSeconds(long paramLong)
    {
      this.hasTimestampSeconds = true;
      this.timestampSeconds_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(1, getTimestampSeconds());
      }
      if (hasTimeoutSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(2, getTimeoutSeconds());
      }
      if (hasClient()) {
        paramCodedOutputStreamMicro.writeMessage(3, getClient());
      }
      if (hasPayload()) {
        paramCodedOutputStreamMicro.writeMessage(4, getPayload());
      }
    }
  }
  
  public static final class SidekickHttpResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private ByteStringMicro encodedEventId_ = ByteStringMicro.EMPTY;
    private int errorCode_ = 12;
    private boolean hasEncodedEventId;
    private boolean hasErrorCode;
    private boolean hasPayload;
    private boolean hasStatus;
    private Sidekick.ResponsePayload payload_ = null;
    private int status_ = 1;
    
    public static SidekickHttpResponse parseFrom(byte[] paramArrayOfByte)
      throws InvalidProtocolBufferMicroException
    {
      return (SidekickHttpResponse)new SidekickHttpResponse().mergeFrom(paramArrayOfByte);
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public ByteStringMicro getEncodedEventId()
    {
      return this.encodedEventId_;
    }
    
    public int getErrorCode()
    {
      return this.errorCode_;
    }
    
    public Sidekick.ResponsePayload getPayload()
    {
      return this.payload_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasStatus();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getStatus());
      }
      if (hasErrorCode()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getErrorCode());
      }
      if (hasPayload()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getPayload());
      }
      if (hasEncodedEventId()) {
        i += CodedOutputStreamMicro.computeBytesSize(4, getEncodedEventId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getStatus()
    {
      return this.status_;
    }
    
    public boolean hasEncodedEventId()
    {
      return this.hasEncodedEventId;
    }
    
    public boolean hasErrorCode()
    {
      return this.hasErrorCode;
    }
    
    public boolean hasPayload()
    {
      return this.hasPayload;
    }
    
    public boolean hasStatus()
    {
      return this.hasStatus;
    }
    
    public SidekickHttpResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setStatus(paramCodedInputStreamMicro.readInt32());
          break;
        case 16: 
          setErrorCode(paramCodedInputStreamMicro.readInt32());
          break;
        case 26: 
          Sidekick.ResponsePayload localResponsePayload = new Sidekick.ResponsePayload();
          paramCodedInputStreamMicro.readMessage(localResponsePayload);
          setPayload(localResponsePayload);
          break;
        }
        setEncodedEventId(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public SidekickHttpResponse setEncodedEventId(ByteStringMicro paramByteStringMicro)
    {
      this.hasEncodedEventId = true;
      this.encodedEventId_ = paramByteStringMicro;
      return this;
    }
    
    public SidekickHttpResponse setErrorCode(int paramInt)
    {
      this.hasErrorCode = true;
      this.errorCode_ = paramInt;
      return this;
    }
    
    public SidekickHttpResponse setPayload(Sidekick.ResponsePayload paramResponsePayload)
    {
      if (paramResponsePayload == null) {
        throw new NullPointerException();
      }
      this.hasPayload = true;
      this.payload_ = paramResponsePayload;
      return this;
    }
    
    public SidekickHttpResponse setStatus(int paramInt)
    {
      this.hasStatus = true;
      this.status_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasStatus()) {
        paramCodedOutputStreamMicro.writeInt32(1, getStatus());
      }
      if (hasErrorCode()) {
        paramCodedOutputStreamMicro.writeInt32(2, getErrorCode());
      }
      if (hasPayload()) {
        paramCodedOutputStreamMicro.writeMessage(3, getPayload());
      }
      if (hasEncodedEventId()) {
        paramCodedOutputStreamMicro.writeBytes(4, getEncodedEventId());
      }
    }
  }
  
  public static final class SidekickPushMessage
    extends MessageMicro
  {
    private String accountHash_ = "";
    private int cachedSize = -1;
    private Sidekick.EntryChanges entryChanges_ = null;
    private boolean hasAccountHash;
    private boolean hasEntryChanges;
    private boolean hasInterest;
    private Sidekick.Interest interest_ = null;
    
    public String getAccountHash()
    {
      return this.accountHash_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.EntryChanges getEntryChanges()
    {
      return this.entryChanges_;
    }
    
    public Sidekick.Interest getInterest()
    {
      return this.interest_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasInterest();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getInterest());
      }
      if (hasAccountHash()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getAccountHash());
      }
      if (hasEntryChanges()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getEntryChanges());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasAccountHash()
    {
      return this.hasAccountHash;
    }
    
    public boolean hasEntryChanges()
    {
      return this.hasEntryChanges;
    }
    
    public boolean hasInterest()
    {
      return this.hasInterest;
    }
    
    public SidekickPushMessage mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Interest localInterest = new Sidekick.Interest();
          paramCodedInputStreamMicro.readMessage(localInterest);
          setInterest(localInterest);
          break;
        case 18: 
          setAccountHash(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.EntryChanges localEntryChanges = new Sidekick.EntryChanges();
        paramCodedInputStreamMicro.readMessage(localEntryChanges);
        setEntryChanges(localEntryChanges);
      }
    }
    
    public SidekickPushMessage setAccountHash(String paramString)
    {
      this.hasAccountHash = true;
      this.accountHash_ = paramString;
      return this;
    }
    
    public SidekickPushMessage setEntryChanges(Sidekick.EntryChanges paramEntryChanges)
    {
      if (paramEntryChanges == null) {
        throw new NullPointerException();
      }
      this.hasEntryChanges = true;
      this.entryChanges_ = paramEntryChanges;
      return this;
    }
    
    public SidekickPushMessage setInterest(Sidekick.Interest paramInterest)
    {
      if (paramInterest == null) {
        throw new NullPointerException();
      }
      this.hasInterest = true;
      this.interest_ = paramInterest;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasInterest()) {
        paramCodedOutputStreamMicro.writeMessage(1, getInterest());
      }
      if (hasAccountHash()) {
        paramCodedOutputStreamMicro.writeString(2, getAccountHash());
      }
      if (hasEntryChanges()) {
        paramCodedOutputStreamMicro.writeMessage(3, getEntryChanges());
      }
    }
  }
  
  public static final class SportScoreEntry
    extends MessageMicro
  {
    private String boxScoresUrl_ = "";
    private int cachedSize = -1;
    private boolean hasBoxScoresUrl;
    private boolean hasIsNcaa;
    private boolean hasLiveStreamUrl;
    private boolean hasLiveUpdateUrl;
    private boolean hasLocation;
    private boolean hasNumRemainingPeriods;
    private boolean hasOneboxData;
    private boolean hasPreviewUrl;
    private boolean hasPrimaryKey;
    private boolean hasRecapUrl;
    private boolean hasSource;
    private boolean hasSport;
    private boolean hasSpriteUrl;
    private boolean hasStartTimeSeconds;
    private boolean hasStartTimeZone;
    private boolean hasStatus;
    private boolean hasStatusCode;
    private boolean hasTicketsUrl;
    private boolean hasTournamentRound;
    private boolean hasWebSearchQuery;
    private boolean isNcaa_ = false;
    private String liveStreamUrl_ = "";
    private String liveUpdateUrl_ = "";
    private String location_ = "";
    private int numRemainingPeriods_ = 0;
    private Sidekick.AuxiliaryMessage oneboxData_ = null;
    private List<Period> period_ = Collections.emptyList();
    private String previewUrl_ = "";
    private String primaryKey_ = "";
    private String recapUrl_ = "";
    private int source_ = 0;
    private List<SportEntity> sportEntity_ = Collections.emptyList();
    private int sport_ = 0;
    private String spriteUrl_ = "";
    private long startTimeSeconds_ = 0L;
    private String startTimeZone_ = "";
    private int statusCode_ = 0;
    private String status_ = "";
    private String ticketsUrl_ = "";
    private String tournamentRound_ = "";
    private String webSearchQuery_ = "";
    
    public SportScoreEntry addPeriod(Period paramPeriod)
    {
      if (paramPeriod == null) {
        throw new NullPointerException();
      }
      if (this.period_.isEmpty()) {
        this.period_ = new ArrayList();
      }
      this.period_.add(paramPeriod);
      return this;
    }
    
    public SportScoreEntry addSportEntity(SportEntity paramSportEntity)
    {
      if (paramSportEntity == null) {
        throw new NullPointerException();
      }
      if (this.sportEntity_.isEmpty()) {
        this.sportEntity_ = new ArrayList();
      }
      this.sportEntity_.add(paramSportEntity);
      return this;
    }
    
    public String getBoxScoresUrl()
    {
      return this.boxScoresUrl_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getIsNcaa()
    {
      return this.isNcaa_;
    }
    
    public String getLiveStreamUrl()
    {
      return this.liveStreamUrl_;
    }
    
    public String getLiveUpdateUrl()
    {
      return this.liveUpdateUrl_;
    }
    
    public String getLocation()
    {
      return this.location_;
    }
    
    public int getNumRemainingPeriods()
    {
      return this.numRemainingPeriods_;
    }
    
    public Sidekick.AuxiliaryMessage getOneboxData()
    {
      return this.oneboxData_;
    }
    
    public Period getPeriod(int paramInt)
    {
      return (Period)this.period_.get(paramInt);
    }
    
    public int getPeriodCount()
    {
      return this.period_.size();
    }
    
    public List<Period> getPeriodList()
    {
      return this.period_;
    }
    
    public String getPreviewUrl()
    {
      return this.previewUrl_;
    }
    
    public String getPrimaryKey()
    {
      return this.primaryKey_;
    }
    
    public String getRecapUrl()
    {
      return this.recapUrl_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSport();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getSport());
      }
      if (hasStatusCode()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getStatusCode());
      }
      if (hasStatus()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getStatus());
      }
      if (hasStartTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(4, getStartTimeSeconds());
      }
      if (hasStartTimeZone()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getStartTimeZone());
      }
      if (hasLocation()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getLocation());
      }
      Iterator localIterator1 = getPeriodList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, (Period)localIterator1.next());
      }
      if (hasNumRemainingPeriods()) {
        i += CodedOutputStreamMicro.computeInt32Size(8, getNumRemainingPeriods());
      }
      Iterator localIterator2 = getSportEntityList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, (SportEntity)localIterator2.next());
      }
      if (hasSpriteUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getSpriteUrl());
      }
      if (hasRecapUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(11, getRecapUrl());
      }
      if (hasBoxScoresUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(12, getBoxScoresUrl());
      }
      if (hasLiveUpdateUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(13, getLiveUpdateUrl());
      }
      if (hasLiveStreamUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(14, getLiveStreamUrl());
      }
      if (hasPreviewUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(15, getPreviewUrl());
      }
      if (hasTicketsUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(16, getTicketsUrl());
      }
      if (hasOneboxData()) {
        i += CodedOutputStreamMicro.computeMessageSize(17, getOneboxData());
      }
      if (hasSource()) {
        i += CodedOutputStreamMicro.computeInt32Size(18, getSource());
      }
      if (hasWebSearchQuery()) {
        i += CodedOutputStreamMicro.computeStringSize(19, getWebSearchQuery());
      }
      if (hasPrimaryKey()) {
        i += CodedOutputStreamMicro.computeStringSize(20, getPrimaryKey());
      }
      if (hasTournamentRound()) {
        i += CodedOutputStreamMicro.computeStringSize(21, getTournamentRound());
      }
      if (hasIsNcaa()) {
        i += CodedOutputStreamMicro.computeBoolSize(22, getIsNcaa());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getSource()
    {
      return this.source_;
    }
    
    public int getSport()
    {
      return this.sport_;
    }
    
    public SportEntity getSportEntity(int paramInt)
    {
      return (SportEntity)this.sportEntity_.get(paramInt);
    }
    
    public int getSportEntityCount()
    {
      return this.sportEntity_.size();
    }
    
    public List<SportEntity> getSportEntityList()
    {
      return this.sportEntity_;
    }
    
    public String getSpriteUrl()
    {
      return this.spriteUrl_;
    }
    
    public long getStartTimeSeconds()
    {
      return this.startTimeSeconds_;
    }
    
    public String getStartTimeZone()
    {
      return this.startTimeZone_;
    }
    
    public String getStatus()
    {
      return this.status_;
    }
    
    public int getStatusCode()
    {
      return this.statusCode_;
    }
    
    public String getTicketsUrl()
    {
      return this.ticketsUrl_;
    }
    
    public String getTournamentRound()
    {
      return this.tournamentRound_;
    }
    
    public String getWebSearchQuery()
    {
      return this.webSearchQuery_;
    }
    
    public boolean hasBoxScoresUrl()
    {
      return this.hasBoxScoresUrl;
    }
    
    public boolean hasIsNcaa()
    {
      return this.hasIsNcaa;
    }
    
    public boolean hasLiveStreamUrl()
    {
      return this.hasLiveStreamUrl;
    }
    
    public boolean hasLiveUpdateUrl()
    {
      return this.hasLiveUpdateUrl;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasNumRemainingPeriods()
    {
      return this.hasNumRemainingPeriods;
    }
    
    public boolean hasOneboxData()
    {
      return this.hasOneboxData;
    }
    
    public boolean hasPreviewUrl()
    {
      return this.hasPreviewUrl;
    }
    
    public boolean hasPrimaryKey()
    {
      return this.hasPrimaryKey;
    }
    
    public boolean hasRecapUrl()
    {
      return this.hasRecapUrl;
    }
    
    public boolean hasSource()
    {
      return this.hasSource;
    }
    
    public boolean hasSport()
    {
      return this.hasSport;
    }
    
    public boolean hasSpriteUrl()
    {
      return this.hasSpriteUrl;
    }
    
    public boolean hasStartTimeSeconds()
    {
      return this.hasStartTimeSeconds;
    }
    
    public boolean hasStartTimeZone()
    {
      return this.hasStartTimeZone;
    }
    
    public boolean hasStatus()
    {
      return this.hasStatus;
    }
    
    public boolean hasStatusCode()
    {
      return this.hasStatusCode;
    }
    
    public boolean hasTicketsUrl()
    {
      return this.hasTicketsUrl;
    }
    
    public boolean hasTournamentRound()
    {
      return this.hasTournamentRound;
    }
    
    public boolean hasWebSearchQuery()
    {
      return this.hasWebSearchQuery;
    }
    
    public SportScoreEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setSport(paramCodedInputStreamMicro.readInt32());
          break;
        case 16: 
          setStatusCode(paramCodedInputStreamMicro.readInt32());
          break;
        case 26: 
          setStatus(paramCodedInputStreamMicro.readString());
          break;
        case 32: 
          setStartTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 42: 
          setStartTimeZone(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setLocation(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          Period localPeriod = new Period();
          paramCodedInputStreamMicro.readMessage(localPeriod);
          addPeriod(localPeriod);
          break;
        case 64: 
          setNumRemainingPeriods(paramCodedInputStreamMicro.readInt32());
          break;
        case 74: 
          SportEntity localSportEntity = new SportEntity();
          paramCodedInputStreamMicro.readMessage(localSportEntity);
          addSportEntity(localSportEntity);
          break;
        case 82: 
          setSpriteUrl(paramCodedInputStreamMicro.readString());
          break;
        case 90: 
          setRecapUrl(paramCodedInputStreamMicro.readString());
          break;
        case 98: 
          setBoxScoresUrl(paramCodedInputStreamMicro.readString());
          break;
        case 106: 
          setLiveUpdateUrl(paramCodedInputStreamMicro.readString());
          break;
        case 114: 
          setLiveStreamUrl(paramCodedInputStreamMicro.readString());
          break;
        case 122: 
          setPreviewUrl(paramCodedInputStreamMicro.readString());
          break;
        case 130: 
          setTicketsUrl(paramCodedInputStreamMicro.readString());
          break;
        case 138: 
          Sidekick.AuxiliaryMessage localAuxiliaryMessage = new Sidekick.AuxiliaryMessage();
          paramCodedInputStreamMicro.readMessage(localAuxiliaryMessage);
          setOneboxData(localAuxiliaryMessage);
          break;
        case 144: 
          setSource(paramCodedInputStreamMicro.readInt32());
          break;
        case 154: 
          setWebSearchQuery(paramCodedInputStreamMicro.readString());
          break;
        case 162: 
          setPrimaryKey(paramCodedInputStreamMicro.readString());
          break;
        case 170: 
          setTournamentRound(paramCodedInputStreamMicro.readString());
          break;
        }
        setIsNcaa(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public SportScoreEntry setBoxScoresUrl(String paramString)
    {
      this.hasBoxScoresUrl = true;
      this.boxScoresUrl_ = paramString;
      return this;
    }
    
    public SportScoreEntry setIsNcaa(boolean paramBoolean)
    {
      this.hasIsNcaa = true;
      this.isNcaa_ = paramBoolean;
      return this;
    }
    
    public SportScoreEntry setLiveStreamUrl(String paramString)
    {
      this.hasLiveStreamUrl = true;
      this.liveStreamUrl_ = paramString;
      return this;
    }
    
    public SportScoreEntry setLiveUpdateUrl(String paramString)
    {
      this.hasLiveUpdateUrl = true;
      this.liveUpdateUrl_ = paramString;
      return this;
    }
    
    public SportScoreEntry setLocation(String paramString)
    {
      this.hasLocation = true;
      this.location_ = paramString;
      return this;
    }
    
    public SportScoreEntry setNumRemainingPeriods(int paramInt)
    {
      this.hasNumRemainingPeriods = true;
      this.numRemainingPeriods_ = paramInt;
      return this;
    }
    
    public SportScoreEntry setOneboxData(Sidekick.AuxiliaryMessage paramAuxiliaryMessage)
    {
      if (paramAuxiliaryMessage == null) {
        throw new NullPointerException();
      }
      this.hasOneboxData = true;
      this.oneboxData_ = paramAuxiliaryMessage;
      return this;
    }
    
    public SportScoreEntry setPreviewUrl(String paramString)
    {
      this.hasPreviewUrl = true;
      this.previewUrl_ = paramString;
      return this;
    }
    
    public SportScoreEntry setPrimaryKey(String paramString)
    {
      this.hasPrimaryKey = true;
      this.primaryKey_ = paramString;
      return this;
    }
    
    public SportScoreEntry setRecapUrl(String paramString)
    {
      this.hasRecapUrl = true;
      this.recapUrl_ = paramString;
      return this;
    }
    
    public SportScoreEntry setSource(int paramInt)
    {
      this.hasSource = true;
      this.source_ = paramInt;
      return this;
    }
    
    public SportScoreEntry setSport(int paramInt)
    {
      this.hasSport = true;
      this.sport_ = paramInt;
      return this;
    }
    
    public SportScoreEntry setSpriteUrl(String paramString)
    {
      this.hasSpriteUrl = true;
      this.spriteUrl_ = paramString;
      return this;
    }
    
    public SportScoreEntry setStartTimeSeconds(long paramLong)
    {
      this.hasStartTimeSeconds = true;
      this.startTimeSeconds_ = paramLong;
      return this;
    }
    
    public SportScoreEntry setStartTimeZone(String paramString)
    {
      this.hasStartTimeZone = true;
      this.startTimeZone_ = paramString;
      return this;
    }
    
    public SportScoreEntry setStatus(String paramString)
    {
      this.hasStatus = true;
      this.status_ = paramString;
      return this;
    }
    
    public SportScoreEntry setStatusCode(int paramInt)
    {
      this.hasStatusCode = true;
      this.statusCode_ = paramInt;
      return this;
    }
    
    public SportScoreEntry setTicketsUrl(String paramString)
    {
      this.hasTicketsUrl = true;
      this.ticketsUrl_ = paramString;
      return this;
    }
    
    public SportScoreEntry setTournamentRound(String paramString)
    {
      this.hasTournamentRound = true;
      this.tournamentRound_ = paramString;
      return this;
    }
    
    public SportScoreEntry setWebSearchQuery(String paramString)
    {
      this.hasWebSearchQuery = true;
      this.webSearchQuery_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSport()) {
        paramCodedOutputStreamMicro.writeInt32(1, getSport());
      }
      if (hasStatusCode()) {
        paramCodedOutputStreamMicro.writeInt32(2, getStatusCode());
      }
      if (hasStatus()) {
        paramCodedOutputStreamMicro.writeString(3, getStatus());
      }
      if (hasStartTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(4, getStartTimeSeconds());
      }
      if (hasStartTimeZone()) {
        paramCodedOutputStreamMicro.writeString(5, getStartTimeZone());
      }
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeString(6, getLocation());
      }
      Iterator localIterator1 = getPeriodList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(7, (Period)localIterator1.next());
      }
      if (hasNumRemainingPeriods()) {
        paramCodedOutputStreamMicro.writeInt32(8, getNumRemainingPeriods());
      }
      Iterator localIterator2 = getSportEntityList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(9, (SportEntity)localIterator2.next());
      }
      if (hasSpriteUrl()) {
        paramCodedOutputStreamMicro.writeString(10, getSpriteUrl());
      }
      if (hasRecapUrl()) {
        paramCodedOutputStreamMicro.writeString(11, getRecapUrl());
      }
      if (hasBoxScoresUrl()) {
        paramCodedOutputStreamMicro.writeString(12, getBoxScoresUrl());
      }
      if (hasLiveUpdateUrl()) {
        paramCodedOutputStreamMicro.writeString(13, getLiveUpdateUrl());
      }
      if (hasLiveStreamUrl()) {
        paramCodedOutputStreamMicro.writeString(14, getLiveStreamUrl());
      }
      if (hasPreviewUrl()) {
        paramCodedOutputStreamMicro.writeString(15, getPreviewUrl());
      }
      if (hasTicketsUrl()) {
        paramCodedOutputStreamMicro.writeString(16, getTicketsUrl());
      }
      if (hasOneboxData()) {
        paramCodedOutputStreamMicro.writeMessage(17, getOneboxData());
      }
      if (hasSource()) {
        paramCodedOutputStreamMicro.writeInt32(18, getSource());
      }
      if (hasWebSearchQuery()) {
        paramCodedOutputStreamMicro.writeString(19, getWebSearchQuery());
      }
      if (hasPrimaryKey()) {
        paramCodedOutputStreamMicro.writeString(20, getPrimaryKey());
      }
      if (hasTournamentRound()) {
        paramCodedOutputStreamMicro.writeString(21, getTournamentRound());
      }
      if (hasIsNcaa()) {
        paramCodedOutputStreamMicro.writeBool(22, getIsNcaa());
      }
    }
    
    public static final class BaseballScore
      extends MessageMicro
    {
      private int cachedSize = -1;
      private int errors_ = 0;
      private boolean hasErrors;
      private boolean hasHits;
      private boolean hasRuns;
      private int hits_ = 0;
      private int runs_ = 0;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getErrors()
      {
        return this.errors_;
      }
      
      public int getHits()
      {
        return this.hits_;
      }
      
      public int getRuns()
      {
        return this.runs_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasRuns();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getRuns());
        }
        if (hasHits()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getHits());
        }
        if (hasErrors()) {
          i += CodedOutputStreamMicro.computeInt32Size(3, getErrors());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasErrors()
      {
        return this.hasErrors;
      }
      
      public boolean hasHits()
      {
        return this.hasHits;
      }
      
      public boolean hasRuns()
      {
        return this.hasRuns;
      }
      
      public BaseballScore mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 8: 
            setRuns(paramCodedInputStreamMicro.readInt32());
            break;
          case 16: 
            setHits(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setErrors(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public BaseballScore setErrors(int paramInt)
      {
        this.hasErrors = true;
        this.errors_ = paramInt;
        return this;
      }
      
      public BaseballScore setHits(int paramInt)
      {
        this.hasHits = true;
        this.hits_ = paramInt;
        return this;
      }
      
      public BaseballScore setRuns(int paramInt)
      {
        this.hasRuns = true;
        this.runs_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasRuns()) {
          paramCodedOutputStreamMicro.writeInt32(1, getRuns());
        }
        if (hasHits()) {
          paramCodedOutputStreamMicro.writeInt32(2, getHits());
        }
        if (hasErrors()) {
          paramCodedOutputStreamMicro.writeInt32(3, getErrors());
        }
      }
    }
    
    public static final class Period
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasNumber;
      private boolean hasPeriodType;
      private boolean hasTimeSeconds;
      private int number_ = 0;
      private int periodType_ = 0;
      private List<String> score_ = Collections.emptyList();
      private int timeSeconds_ = 0;
      
      public Period addScore(String paramString)
      {
        if (paramString == null) {
          throw new NullPointerException();
        }
        if (this.score_.isEmpty()) {
          this.score_ = new ArrayList();
        }
        this.score_.add(paramString);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getNumber()
      {
        return this.number_;
      }
      
      public int getPeriodType()
      {
        return this.periodType_;
      }
      
      public String getScore(int paramInt)
      {
        return (String)this.score_.get(paramInt);
      }
      
      public int getScoreCount()
      {
        return this.score_.size();
      }
      
      public List<String> getScoreList()
      {
        return this.score_;
      }
      
      public int getSerializedSize()
      {
        int i = 0;
        Iterator localIterator = getScoreList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator.next());
        }
        int j = 0 + i + 1 * getScoreList().size();
        if (hasTimeSeconds()) {
          j += CodedOutputStreamMicro.computeInt32Size(2, getTimeSeconds());
        }
        if (hasPeriodType()) {
          j += CodedOutputStreamMicro.computeInt32Size(3, getPeriodType());
        }
        if (hasNumber()) {
          j += CodedOutputStreamMicro.computeInt32Size(4, getNumber());
        }
        this.cachedSize = j;
        return j;
      }
      
      public int getTimeSeconds()
      {
        return this.timeSeconds_;
      }
      
      public boolean hasNumber()
      {
        return this.hasNumber;
      }
      
      public boolean hasPeriodType()
      {
        return this.hasPeriodType;
      }
      
      public boolean hasTimeSeconds()
      {
        return this.hasTimeSeconds;
      }
      
      public Period mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            addScore(paramCodedInputStreamMicro.readString());
            break;
          case 16: 
            setTimeSeconds(paramCodedInputStreamMicro.readInt32());
            break;
          case 24: 
            setPeriodType(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setNumber(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public Period setNumber(int paramInt)
      {
        this.hasNumber = true;
        this.number_ = paramInt;
        return this;
      }
      
      public Period setPeriodType(int paramInt)
      {
        this.hasPeriodType = true;
        this.periodType_ = paramInt;
        return this;
      }
      
      public Period setTimeSeconds(int paramInt)
      {
        this.hasTimeSeconds = true;
        this.timeSeconds_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        Iterator localIterator = getScoreList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeString(1, (String)localIterator.next());
        }
        if (hasTimeSeconds()) {
          paramCodedOutputStreamMicro.writeInt32(2, getTimeSeconds());
        }
        if (hasPeriodType()) {
          paramCodedOutputStreamMicro.writeInt32(3, getPeriodType());
        }
        if (hasNumber()) {
          paramCodedOutputStreamMicro.writeInt32(4, getNumber());
        }
      }
    }
    
    public static final class SportEntity
      extends MessageMicro
    {
      private Sidekick.SportScoreEntry.BaseballScore baseballScore_ = null;
      private int cachedSize = -1;
      private boolean hasBaseballScore;
      private boolean hasIsUserInterest;
      private boolean hasIsWinner;
      private boolean hasLogoUrl;
      private boolean hasName;
      private boolean hasPrimaryKey;
      private boolean hasScore;
      private boolean hasSpriteOffsetFromLeft;
      private boolean hasSpriteOffsetFromTop;
      private boolean hasTeamStats;
      private boolean isUserInterest_ = false;
      private boolean isWinner_ = false;
      private String logoUrl_ = "";
      private String name_ = "";
      private String primaryKey_ = "";
      private String score_ = "";
      private int spriteOffsetFromLeft_ = 0;
      private int spriteOffsetFromTop_ = 0;
      private Sidekick.SportScoreEntry.TeamStats teamStats_ = null;
      
      public Sidekick.SportScoreEntry.BaseballScore getBaseballScore()
      {
        return this.baseballScore_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public boolean getIsUserInterest()
      {
        return this.isUserInterest_;
      }
      
      public boolean getIsWinner()
      {
        return this.isWinner_;
      }
      
      public String getLogoUrl()
      {
        return this.logoUrl_;
      }
      
      public String getName()
      {
        return this.name_;
      }
      
      public String getPrimaryKey()
      {
        return this.primaryKey_;
      }
      
      public String getScore()
      {
        return this.score_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasName();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
        }
        if (hasIsWinner()) {
          i += CodedOutputStreamMicro.computeBoolSize(2, getIsWinner());
        }
        if (hasSpriteOffsetFromTop()) {
          i += CodedOutputStreamMicro.computeInt32Size(3, getSpriteOffsetFromTop());
        }
        if (hasSpriteOffsetFromLeft()) {
          i += CodedOutputStreamMicro.computeInt32Size(4, getSpriteOffsetFromLeft());
        }
        if (hasScore()) {
          i += CodedOutputStreamMicro.computeStringSize(5, getScore());
        }
        if (hasBaseballScore()) {
          i += CodedOutputStreamMicro.computeMessageSize(6, getBaseballScore());
        }
        if (hasIsUserInterest()) {
          i += CodedOutputStreamMicro.computeBoolSize(7, getIsUserInterest());
        }
        if (hasLogoUrl()) {
          i += CodedOutputStreamMicro.computeStringSize(8, getLogoUrl());
        }
        if (hasPrimaryKey()) {
          i += CodedOutputStreamMicro.computeStringSize(9, getPrimaryKey());
        }
        if (hasTeamStats()) {
          i += CodedOutputStreamMicro.computeMessageSize(10, getTeamStats());
        }
        this.cachedSize = i;
        return i;
      }
      
      public int getSpriteOffsetFromLeft()
      {
        return this.spriteOffsetFromLeft_;
      }
      
      public int getSpriteOffsetFromTop()
      {
        return this.spriteOffsetFromTop_;
      }
      
      public Sidekick.SportScoreEntry.TeamStats getTeamStats()
      {
        return this.teamStats_;
      }
      
      public boolean hasBaseballScore()
      {
        return this.hasBaseballScore;
      }
      
      public boolean hasIsUserInterest()
      {
        return this.hasIsUserInterest;
      }
      
      public boolean hasIsWinner()
      {
        return this.hasIsWinner;
      }
      
      public boolean hasLogoUrl()
      {
        return this.hasLogoUrl;
      }
      
      public boolean hasName()
      {
        return this.hasName;
      }
      
      public boolean hasPrimaryKey()
      {
        return this.hasPrimaryKey;
      }
      
      public boolean hasScore()
      {
        return this.hasScore;
      }
      
      public boolean hasSpriteOffsetFromLeft()
      {
        return this.hasSpriteOffsetFromLeft;
      }
      
      public boolean hasSpriteOffsetFromTop()
      {
        return this.hasSpriteOffsetFromTop;
      }
      
      public boolean hasTeamStats()
      {
        return this.hasTeamStats;
      }
      
      public SportEntity mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setName(paramCodedInputStreamMicro.readString());
            break;
          case 16: 
            setIsWinner(paramCodedInputStreamMicro.readBool());
            break;
          case 24: 
            setSpriteOffsetFromTop(paramCodedInputStreamMicro.readInt32());
            break;
          case 32: 
            setSpriteOffsetFromLeft(paramCodedInputStreamMicro.readInt32());
            break;
          case 42: 
            setScore(paramCodedInputStreamMicro.readString());
            break;
          case 50: 
            Sidekick.SportScoreEntry.BaseballScore localBaseballScore = new Sidekick.SportScoreEntry.BaseballScore();
            paramCodedInputStreamMicro.readMessage(localBaseballScore);
            setBaseballScore(localBaseballScore);
            break;
          case 56: 
            setIsUserInterest(paramCodedInputStreamMicro.readBool());
            break;
          case 66: 
            setLogoUrl(paramCodedInputStreamMicro.readString());
            break;
          case 74: 
            setPrimaryKey(paramCodedInputStreamMicro.readString());
            break;
          }
          Sidekick.SportScoreEntry.TeamStats localTeamStats = new Sidekick.SportScoreEntry.TeamStats();
          paramCodedInputStreamMicro.readMessage(localTeamStats);
          setTeamStats(localTeamStats);
        }
      }
      
      public SportEntity setBaseballScore(Sidekick.SportScoreEntry.BaseballScore paramBaseballScore)
      {
        if (paramBaseballScore == null) {
          throw new NullPointerException();
        }
        this.hasBaseballScore = true;
        this.baseballScore_ = paramBaseballScore;
        return this;
      }
      
      public SportEntity setIsUserInterest(boolean paramBoolean)
      {
        this.hasIsUserInterest = true;
        this.isUserInterest_ = paramBoolean;
        return this;
      }
      
      public SportEntity setIsWinner(boolean paramBoolean)
      {
        this.hasIsWinner = true;
        this.isWinner_ = paramBoolean;
        return this;
      }
      
      public SportEntity setLogoUrl(String paramString)
      {
        this.hasLogoUrl = true;
        this.logoUrl_ = paramString;
        return this;
      }
      
      public SportEntity setName(String paramString)
      {
        this.hasName = true;
        this.name_ = paramString;
        return this;
      }
      
      public SportEntity setPrimaryKey(String paramString)
      {
        this.hasPrimaryKey = true;
        this.primaryKey_ = paramString;
        return this;
      }
      
      public SportEntity setScore(String paramString)
      {
        this.hasScore = true;
        this.score_ = paramString;
        return this;
      }
      
      public SportEntity setSpriteOffsetFromLeft(int paramInt)
      {
        this.hasSpriteOffsetFromLeft = true;
        this.spriteOffsetFromLeft_ = paramInt;
        return this;
      }
      
      public SportEntity setSpriteOffsetFromTop(int paramInt)
      {
        this.hasSpriteOffsetFromTop = true;
        this.spriteOffsetFromTop_ = paramInt;
        return this;
      }
      
      public SportEntity setTeamStats(Sidekick.SportScoreEntry.TeamStats paramTeamStats)
      {
        if (paramTeamStats == null) {
          throw new NullPointerException();
        }
        this.hasTeamStats = true;
        this.teamStats_ = paramTeamStats;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasName()) {
          paramCodedOutputStreamMicro.writeString(1, getName());
        }
        if (hasIsWinner()) {
          paramCodedOutputStreamMicro.writeBool(2, getIsWinner());
        }
        if (hasSpriteOffsetFromTop()) {
          paramCodedOutputStreamMicro.writeInt32(3, getSpriteOffsetFromTop());
        }
        if (hasSpriteOffsetFromLeft()) {
          paramCodedOutputStreamMicro.writeInt32(4, getSpriteOffsetFromLeft());
        }
        if (hasScore()) {
          paramCodedOutputStreamMicro.writeString(5, getScore());
        }
        if (hasBaseballScore()) {
          paramCodedOutputStreamMicro.writeMessage(6, getBaseballScore());
        }
        if (hasIsUserInterest()) {
          paramCodedOutputStreamMicro.writeBool(7, getIsUserInterest());
        }
        if (hasLogoUrl()) {
          paramCodedOutputStreamMicro.writeString(8, getLogoUrl());
        }
        if (hasPrimaryKey()) {
          paramCodedOutputStreamMicro.writeString(9, getPrimaryKey());
        }
        if (hasTeamStats()) {
          paramCodedOutputStreamMicro.writeMessage(10, getTeamStats());
        }
      }
    }
    
    public static final class TeamStats
      extends MessageMicro
    {
      private int cachedSize = -1;
      private Record conferenceRecord_ = null;
      private Record divisionRecord_ = null;
      private double gamesBack_ = 0.0D;
      private int gamesPlayed_ = 0;
      private boolean hasConferenceRecord;
      private boolean hasDivisionRecord;
      private boolean hasGamesBack;
      private boolean hasGamesPlayed;
      private boolean hasLastTenRecord;
      private boolean hasLoseStreak;
      private boolean hasOverallRecord;
      private boolean hasPoints;
      private boolean hasPointsAgainst;
      private boolean hasPointsDifference;
      private boolean hasPointsFor;
      private boolean hasStreak;
      private boolean hasTeamPoints;
      private boolean hasWinFraction;
      private boolean hasWinStreak;
      private String lastTenRecord_ = "";
      private int loseStreak_ = 0;
      private Record overallRecord_ = null;
      private int pointsAgainst_ = 0;
      private int pointsDifference_ = 0;
      private int pointsFor_ = 0;
      private int points_ = 0;
      private String streak_ = "";
      private int teamPoints_ = 0;
      private double winFraction_ = 0.0D;
      private int winStreak_ = 0;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Record getConferenceRecord()
      {
        return this.conferenceRecord_;
      }
      
      public Record getDivisionRecord()
      {
        return this.divisionRecord_;
      }
      
      public double getGamesBack()
      {
        return this.gamesBack_;
      }
      
      public int getGamesPlayed()
      {
        return this.gamesPlayed_;
      }
      
      public String getLastTenRecord()
      {
        return this.lastTenRecord_;
      }
      
      public int getLoseStreak()
      {
        return this.loseStreak_;
      }
      
      public Record getOverallRecord()
      {
        return this.overallRecord_;
      }
      
      public int getPoints()
      {
        return this.points_;
      }
      
      public int getPointsAgainst()
      {
        return this.pointsAgainst_;
      }
      
      public int getPointsDifference()
      {
        return this.pointsDifference_;
      }
      
      public int getPointsFor()
      {
        return this.pointsFor_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasOverallRecord();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getOverallRecord());
        }
        if (hasConferenceRecord()) {
          i += CodedOutputStreamMicro.computeMessageSize(2, getConferenceRecord());
        }
        if (hasDivisionRecord()) {
          i += CodedOutputStreamMicro.computeMessageSize(3, getDivisionRecord());
        }
        if (hasWinFraction()) {
          i += CodedOutputStreamMicro.computeDoubleSize(4, getWinFraction());
        }
        if (hasLastTenRecord()) {
          i += CodedOutputStreamMicro.computeStringSize(5, getLastTenRecord());
        }
        if (hasStreak()) {
          i += CodedOutputStreamMicro.computeStringSize(6, getStreak());
        }
        if (hasTeamPoints()) {
          i += CodedOutputStreamMicro.computeInt32Size(7, getTeamPoints());
        }
        if (hasPointsFor()) {
          i += CodedOutputStreamMicro.computeInt32Size(8, getPointsFor());
        }
        if (hasPointsAgainst()) {
          i += CodedOutputStreamMicro.computeInt32Size(9, getPointsAgainst());
        }
        if (hasGamesPlayed()) {
          i += CodedOutputStreamMicro.computeInt32Size(10, getGamesPlayed());
        }
        if (hasGamesBack()) {
          i += CodedOutputStreamMicro.computeDoubleSize(11, getGamesBack());
        }
        if (hasWinStreak()) {
          i += CodedOutputStreamMicro.computeInt32Size(12, getWinStreak());
        }
        if (hasLoseStreak()) {
          i += CodedOutputStreamMicro.computeInt32Size(13, getLoseStreak());
        }
        if (hasPointsDifference()) {
          i += CodedOutputStreamMicro.computeInt32Size(14, getPointsDifference());
        }
        if (hasPoints()) {
          i += CodedOutputStreamMicro.computeInt32Size(15, getPoints());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getStreak()
      {
        return this.streak_;
      }
      
      public int getTeamPoints()
      {
        return this.teamPoints_;
      }
      
      public double getWinFraction()
      {
        return this.winFraction_;
      }
      
      public int getWinStreak()
      {
        return this.winStreak_;
      }
      
      public boolean hasConferenceRecord()
      {
        return this.hasConferenceRecord;
      }
      
      public boolean hasDivisionRecord()
      {
        return this.hasDivisionRecord;
      }
      
      public boolean hasGamesBack()
      {
        return this.hasGamesBack;
      }
      
      public boolean hasGamesPlayed()
      {
        return this.hasGamesPlayed;
      }
      
      public boolean hasLastTenRecord()
      {
        return this.hasLastTenRecord;
      }
      
      public boolean hasLoseStreak()
      {
        return this.hasLoseStreak;
      }
      
      public boolean hasOverallRecord()
      {
        return this.hasOverallRecord;
      }
      
      public boolean hasPoints()
      {
        return this.hasPoints;
      }
      
      public boolean hasPointsAgainst()
      {
        return this.hasPointsAgainst;
      }
      
      public boolean hasPointsDifference()
      {
        return this.hasPointsDifference;
      }
      
      public boolean hasPointsFor()
      {
        return this.hasPointsFor;
      }
      
      public boolean hasStreak()
      {
        return this.hasStreak;
      }
      
      public boolean hasTeamPoints()
      {
        return this.hasTeamPoints;
      }
      
      public boolean hasWinFraction()
      {
        return this.hasWinFraction;
      }
      
      public boolean hasWinStreak()
      {
        return this.hasWinStreak;
      }
      
      public TeamStats mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Record localRecord3 = new Record();
            paramCodedInputStreamMicro.readMessage(localRecord3);
            setOverallRecord(localRecord3);
            break;
          case 18: 
            Record localRecord2 = new Record();
            paramCodedInputStreamMicro.readMessage(localRecord2);
            setConferenceRecord(localRecord2);
            break;
          case 26: 
            Record localRecord1 = new Record();
            paramCodedInputStreamMicro.readMessage(localRecord1);
            setDivisionRecord(localRecord1);
            break;
          case 33: 
            setWinFraction(paramCodedInputStreamMicro.readDouble());
            break;
          case 42: 
            setLastTenRecord(paramCodedInputStreamMicro.readString());
            break;
          case 50: 
            setStreak(paramCodedInputStreamMicro.readString());
            break;
          case 56: 
            setTeamPoints(paramCodedInputStreamMicro.readInt32());
            break;
          case 64: 
            setPointsFor(paramCodedInputStreamMicro.readInt32());
            break;
          case 72: 
            setPointsAgainst(paramCodedInputStreamMicro.readInt32());
            break;
          case 80: 
            setGamesPlayed(paramCodedInputStreamMicro.readInt32());
            break;
          case 89: 
            setGamesBack(paramCodedInputStreamMicro.readDouble());
            break;
          case 96: 
            setWinStreak(paramCodedInputStreamMicro.readInt32());
            break;
          case 104: 
            setLoseStreak(paramCodedInputStreamMicro.readInt32());
            break;
          case 112: 
            setPointsDifference(paramCodedInputStreamMicro.readInt32());
            break;
          }
          setPoints(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public TeamStats setConferenceRecord(Record paramRecord)
      {
        if (paramRecord == null) {
          throw new NullPointerException();
        }
        this.hasConferenceRecord = true;
        this.conferenceRecord_ = paramRecord;
        return this;
      }
      
      public TeamStats setDivisionRecord(Record paramRecord)
      {
        if (paramRecord == null) {
          throw new NullPointerException();
        }
        this.hasDivisionRecord = true;
        this.divisionRecord_ = paramRecord;
        return this;
      }
      
      public TeamStats setGamesBack(double paramDouble)
      {
        this.hasGamesBack = true;
        this.gamesBack_ = paramDouble;
        return this;
      }
      
      public TeamStats setGamesPlayed(int paramInt)
      {
        this.hasGamesPlayed = true;
        this.gamesPlayed_ = paramInt;
        return this;
      }
      
      public TeamStats setLastTenRecord(String paramString)
      {
        this.hasLastTenRecord = true;
        this.lastTenRecord_ = paramString;
        return this;
      }
      
      public TeamStats setLoseStreak(int paramInt)
      {
        this.hasLoseStreak = true;
        this.loseStreak_ = paramInt;
        return this;
      }
      
      public TeamStats setOverallRecord(Record paramRecord)
      {
        if (paramRecord == null) {
          throw new NullPointerException();
        }
        this.hasOverallRecord = true;
        this.overallRecord_ = paramRecord;
        return this;
      }
      
      public TeamStats setPoints(int paramInt)
      {
        this.hasPoints = true;
        this.points_ = paramInt;
        return this;
      }
      
      public TeamStats setPointsAgainst(int paramInt)
      {
        this.hasPointsAgainst = true;
        this.pointsAgainst_ = paramInt;
        return this;
      }
      
      public TeamStats setPointsDifference(int paramInt)
      {
        this.hasPointsDifference = true;
        this.pointsDifference_ = paramInt;
        return this;
      }
      
      public TeamStats setPointsFor(int paramInt)
      {
        this.hasPointsFor = true;
        this.pointsFor_ = paramInt;
        return this;
      }
      
      public TeamStats setStreak(String paramString)
      {
        this.hasStreak = true;
        this.streak_ = paramString;
        return this;
      }
      
      public TeamStats setTeamPoints(int paramInt)
      {
        this.hasTeamPoints = true;
        this.teamPoints_ = paramInt;
        return this;
      }
      
      public TeamStats setWinFraction(double paramDouble)
      {
        this.hasWinFraction = true;
        this.winFraction_ = paramDouble;
        return this;
      }
      
      public TeamStats setWinStreak(int paramInt)
      {
        this.hasWinStreak = true;
        this.winStreak_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasOverallRecord()) {
          paramCodedOutputStreamMicro.writeMessage(1, getOverallRecord());
        }
        if (hasConferenceRecord()) {
          paramCodedOutputStreamMicro.writeMessage(2, getConferenceRecord());
        }
        if (hasDivisionRecord()) {
          paramCodedOutputStreamMicro.writeMessage(3, getDivisionRecord());
        }
        if (hasWinFraction()) {
          paramCodedOutputStreamMicro.writeDouble(4, getWinFraction());
        }
        if (hasLastTenRecord()) {
          paramCodedOutputStreamMicro.writeString(5, getLastTenRecord());
        }
        if (hasStreak()) {
          paramCodedOutputStreamMicro.writeString(6, getStreak());
        }
        if (hasTeamPoints()) {
          paramCodedOutputStreamMicro.writeInt32(7, getTeamPoints());
        }
        if (hasPointsFor()) {
          paramCodedOutputStreamMicro.writeInt32(8, getPointsFor());
        }
        if (hasPointsAgainst()) {
          paramCodedOutputStreamMicro.writeInt32(9, getPointsAgainst());
        }
        if (hasGamesPlayed()) {
          paramCodedOutputStreamMicro.writeInt32(10, getGamesPlayed());
        }
        if (hasGamesBack()) {
          paramCodedOutputStreamMicro.writeDouble(11, getGamesBack());
        }
        if (hasWinStreak()) {
          paramCodedOutputStreamMicro.writeInt32(12, getWinStreak());
        }
        if (hasLoseStreak()) {
          paramCodedOutputStreamMicro.writeInt32(13, getLoseStreak());
        }
        if (hasPointsDifference()) {
          paramCodedOutputStreamMicro.writeInt32(14, getPointsDifference());
        }
        if (hasPoints()) {
          paramCodedOutputStreamMicro.writeInt32(15, getPoints());
        }
      }
      
      public static final class Record
        extends MessageMicro
      {
        private int cachedSize = -1;
        private boolean hasLosses;
        private boolean hasOvertimeLosses;
        private boolean hasPosition;
        private boolean hasTies;
        private boolean hasWins;
        private int losses_ = 0;
        private int overtimeLosses_ = 0;
        private int position_ = 0;
        private int ties_ = 0;
        private int wins_ = 0;
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public int getLosses()
        {
          return this.losses_;
        }
        
        public int getOvertimeLosses()
        {
          return this.overtimeLosses_;
        }
        
        public int getPosition()
        {
          return this.position_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasPosition();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getPosition());
          }
          if (hasWins()) {
            i += CodedOutputStreamMicro.computeInt32Size(2, getWins());
          }
          if (hasLosses()) {
            i += CodedOutputStreamMicro.computeInt32Size(3, getLosses());
          }
          if (hasTies()) {
            i += CodedOutputStreamMicro.computeInt32Size(4, getTies());
          }
          if (hasOvertimeLosses()) {
            i += CodedOutputStreamMicro.computeInt32Size(5, getOvertimeLosses());
          }
          this.cachedSize = i;
          return i;
        }
        
        public int getTies()
        {
          return this.ties_;
        }
        
        public int getWins()
        {
          return this.wins_;
        }
        
        public boolean hasLosses()
        {
          return this.hasLosses;
        }
        
        public boolean hasOvertimeLosses()
        {
          return this.hasOvertimeLosses;
        }
        
        public boolean hasPosition()
        {
          return this.hasPosition;
        }
        
        public boolean hasTies()
        {
          return this.hasTies;
        }
        
        public boolean hasWins()
        {
          return this.hasWins;
        }
        
        public Record mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 8: 
              setPosition(paramCodedInputStreamMicro.readInt32());
              break;
            case 16: 
              setWins(paramCodedInputStreamMicro.readInt32());
              break;
            case 24: 
              setLosses(paramCodedInputStreamMicro.readInt32());
              break;
            case 32: 
              setTies(paramCodedInputStreamMicro.readInt32());
              break;
            }
            setOvertimeLosses(paramCodedInputStreamMicro.readInt32());
          }
        }
        
        public Record setLosses(int paramInt)
        {
          this.hasLosses = true;
          this.losses_ = paramInt;
          return this;
        }
        
        public Record setOvertimeLosses(int paramInt)
        {
          this.hasOvertimeLosses = true;
          this.overtimeLosses_ = paramInt;
          return this;
        }
        
        public Record setPosition(int paramInt)
        {
          this.hasPosition = true;
          this.position_ = paramInt;
          return this;
        }
        
        public Record setTies(int paramInt)
        {
          this.hasTies = true;
          this.ties_ = paramInt;
          return this;
        }
        
        public Record setWins(int paramInt)
        {
          this.hasWins = true;
          this.wins_ = paramInt;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasPosition()) {
            paramCodedOutputStreamMicro.writeInt32(1, getPosition());
          }
          if (hasWins()) {
            paramCodedOutputStreamMicro.writeInt32(2, getWins());
          }
          if (hasLosses()) {
            paramCodedOutputStreamMicro.writeInt32(3, getLosses());
          }
          if (hasTies()) {
            paramCodedOutputStreamMicro.writeInt32(4, getTies());
          }
          if (hasOvertimeLosses()) {
            paramCodedOutputStreamMicro.writeInt32(5, getOvertimeLosses());
          }
        }
      }
    }
  }
  
  public static final class SportsTeams
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Sidekick.SidekickConfiguration.Sports.SportTeamPlayer> sportTeamPlayer_ = Collections.emptyList();
    
    public static SportsTeams parseFrom(byte[] paramArrayOfByte)
      throws InvalidProtocolBufferMicroException
    {
      return (SportsTeams)new SportsTeams().mergeFrom(paramArrayOfByte);
    }
    
    public SportsTeams addSportTeamPlayer(Sidekick.SidekickConfiguration.Sports.SportTeamPlayer paramSportTeamPlayer)
    {
      if (paramSportTeamPlayer == null) {
        throw new NullPointerException();
      }
      if (this.sportTeamPlayer_.isEmpty()) {
        this.sportTeamPlayer_ = new ArrayList();
      }
      this.sportTeamPlayer_.add(paramSportTeamPlayer);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getSportTeamPlayerList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.SidekickConfiguration.Sports.SportTeamPlayer)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getSportTeamPlayerCount()
    {
      return this.sportTeamPlayer_.size();
    }
    
    public List<Sidekick.SidekickConfiguration.Sports.SportTeamPlayer> getSportTeamPlayerList()
    {
      return this.sportTeamPlayer_;
    }
    
    public SportsTeams mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.SidekickConfiguration.Sports.SportTeamPlayer localSportTeamPlayer = new Sidekick.SidekickConfiguration.Sports.SportTeamPlayer();
        paramCodedInputStreamMicro.readMessage(localSportTeamPlayer);
        addSportTeamPlayer(localSportTeamPlayer);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getSportTeamPlayerList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.SidekickConfiguration.Sports.SportTeamPlayer)localIterator.next());
      }
    }
  }
  
  public static final class StateChanges
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasSidekickConfigurationChanges;
    private Sidekick.SidekickConfigurationChanges sidekickConfigurationChanges_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSidekickConfigurationChanges();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getSidekickConfigurationChanges());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.SidekickConfigurationChanges getSidekickConfigurationChanges()
    {
      return this.sidekickConfigurationChanges_;
    }
    
    public boolean hasSidekickConfigurationChanges()
    {
      return this.hasSidekickConfigurationChanges;
    }
    
    public StateChanges mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.SidekickConfigurationChanges localSidekickConfigurationChanges = new Sidekick.SidekickConfigurationChanges();
        paramCodedInputStreamMicro.readMessage(localSidekickConfigurationChanges);
        setSidekickConfigurationChanges(localSidekickConfigurationChanges);
      }
    }
    
    public StateChanges setSidekickConfigurationChanges(Sidekick.SidekickConfigurationChanges paramSidekickConfigurationChanges)
    {
      if (paramSidekickConfigurationChanges == null) {
        throw new NullPointerException();
      }
      this.hasSidekickConfigurationChanges = true;
      this.sidekickConfigurationChanges_ = paramSidekickConfigurationChanges;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSidekickConfigurationChanges()) {
        paramCodedOutputStreamMicro.writeMessage(1, getSidekickConfigurationChanges());
      }
    }
  }
  
  public static final class StaticMapQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasHeight;
    private boolean hasOverlayAvatarObfuscatedGaiaId;
    private boolean hasPlaceEntry;
    private boolean hasStartLocation;
    private boolean hasWidth;
    private int height_ = 0;
    private long overlayAvatarObfuscatedGaiaId_ = 0L;
    private Sidekick.FrequentPlaceEntry placeEntry_ = null;
    private Sidekick.Location startLocation_ = null;
    private int width_ = 0;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getHeight()
    {
      return this.height_;
    }
    
    public long getOverlayAvatarObfuscatedGaiaId()
    {
      return this.overlayAvatarObfuscatedGaiaId_;
    }
    
    public Sidekick.FrequentPlaceEntry getPlaceEntry()
    {
      return this.placeEntry_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasPlaceEntry();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getPlaceEntry());
      }
      if (hasWidth()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getWidth());
      }
      if (hasHeight()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getHeight());
      }
      if (hasStartLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getStartLocation());
      }
      if (hasOverlayAvatarObfuscatedGaiaId()) {
        i += CodedOutputStreamMicro.computeInt64Size(5, getOverlayAvatarObfuscatedGaiaId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.Location getStartLocation()
    {
      return this.startLocation_;
    }
    
    public int getWidth()
    {
      return this.width_;
    }
    
    public boolean hasHeight()
    {
      return this.hasHeight;
    }
    
    public boolean hasOverlayAvatarObfuscatedGaiaId()
    {
      return this.hasOverlayAvatarObfuscatedGaiaId;
    }
    
    public boolean hasPlaceEntry()
    {
      return this.hasPlaceEntry;
    }
    
    public boolean hasStartLocation()
    {
      return this.hasStartLocation;
    }
    
    public boolean hasWidth()
    {
      return this.hasWidth;
    }
    
    public StaticMapQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.FrequentPlaceEntry localFrequentPlaceEntry = new Sidekick.FrequentPlaceEntry();
          paramCodedInputStreamMicro.readMessage(localFrequentPlaceEntry);
          setPlaceEntry(localFrequentPlaceEntry);
          break;
        case 16: 
          setWidth(paramCodedInputStreamMicro.readInt32());
          break;
        case 24: 
          setHeight(paramCodedInputStreamMicro.readInt32());
          break;
        case 34: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setStartLocation(localLocation);
          break;
        }
        setOverlayAvatarObfuscatedGaiaId(paramCodedInputStreamMicro.readInt64());
      }
    }
    
    public StaticMapQuery setHeight(int paramInt)
    {
      this.hasHeight = true;
      this.height_ = paramInt;
      return this;
    }
    
    public StaticMapQuery setOverlayAvatarObfuscatedGaiaId(long paramLong)
    {
      this.hasOverlayAvatarObfuscatedGaiaId = true;
      this.overlayAvatarObfuscatedGaiaId_ = paramLong;
      return this;
    }
    
    public StaticMapQuery setPlaceEntry(Sidekick.FrequentPlaceEntry paramFrequentPlaceEntry)
    {
      if (paramFrequentPlaceEntry == null) {
        throw new NullPointerException();
      }
      this.hasPlaceEntry = true;
      this.placeEntry_ = paramFrequentPlaceEntry;
      return this;
    }
    
    public StaticMapQuery setStartLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasStartLocation = true;
      this.startLocation_ = paramLocation;
      return this;
    }
    
    public StaticMapQuery setWidth(int paramInt)
    {
      this.hasWidth = true;
      this.width_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasPlaceEntry()) {
        paramCodedOutputStreamMicro.writeMessage(1, getPlaceEntry());
      }
      if (hasWidth()) {
        paramCodedOutputStreamMicro.writeInt32(2, getWidth());
      }
      if (hasHeight()) {
        paramCodedOutputStreamMicro.writeInt32(3, getHeight());
      }
      if (hasStartLocation()) {
        paramCodedOutputStreamMicro.writeMessage(4, getStartLocation());
      }
      if (hasOverlayAvatarObfuscatedGaiaId()) {
        paramCodedOutputStreamMicro.writeInt64(5, getOverlayAvatarObfuscatedGaiaId());
      }
    }
  }
  
  public static final class StaticMapResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasMapPng;
    private ByteStringMicro mapPng_ = ByteStringMicro.EMPTY;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public ByteStringMicro getMapPng()
    {
      return this.mapPng_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasMapPng();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeBytesSize(1, getMapPng());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasMapPng()
    {
      return this.hasMapPng;
    }
    
    public StaticMapResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setMapPng(paramCodedInputStreamMicro.readBytes());
      }
    }
    
    public StaticMapResponse setMapPng(ByteStringMicro paramByteStringMicro)
    {
      this.hasMapPng = true;
      this.mapPng_ = paramByteStringMicro;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasMapPng()) {
        paramCodedOutputStreamMicro.writeBytes(1, getMapPng());
      }
    }
  }
  
  public static final class StockQuote
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String chartUrl_ = "";
    private String exchange_ = "";
    private boolean hasChartUrl;
    private boolean hasExchange;
    private boolean hasLastPrice;
    private boolean hasLastUpdateSeconds;
    private boolean hasName;
    private boolean hasPriceVariation;
    private boolean hasPriceVariationPercent;
    private boolean hasPrimaryKey;
    private boolean hasQuoteserverData;
    private boolean hasShortName;
    private boolean hasSource;
    private boolean hasSymbol;
    private boolean hasWebUrl;
    private float lastPrice_ = 0.0F;
    private long lastUpdateSeconds_ = 0L;
    private String name_ = "";
    private float priceVariationPercent_ = 0.0F;
    private float priceVariation_ = 0.0F;
    private String primaryKey_ = "";
    private Sidekick.AuxiliaryMessage quoteserverData_ = null;
    private String shortName_ = "";
    private int source_ = 0;
    private String symbol_ = "";
    private String webUrl_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getChartUrl()
    {
      return this.chartUrl_;
    }
    
    public String getExchange()
    {
      return this.exchange_;
    }
    
    public float getLastPrice()
    {
      return this.lastPrice_;
    }
    
    public long getLastUpdateSeconds()
    {
      return this.lastUpdateSeconds_;
    }
    
    public String getName()
    {
      return this.name_;
    }
    
    public float getPriceVariation()
    {
      return this.priceVariation_;
    }
    
    public float getPriceVariationPercent()
    {
      return this.priceVariationPercent_;
    }
    
    public String getPrimaryKey()
    {
      return this.primaryKey_;
    }
    
    public Sidekick.AuxiliaryMessage getQuoteserverData()
    {
      return this.quoteserverData_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasExchange();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getExchange());
      }
      if (hasSymbol()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSymbol());
      }
      if (hasLastUpdateSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(3, getLastUpdateSeconds());
      }
      if (hasLastPrice()) {
        i += CodedOutputStreamMicro.computeFloatSize(4, getLastPrice());
      }
      if (hasPriceVariation()) {
        i += CodedOutputStreamMicro.computeFloatSize(5, getPriceVariation());
      }
      if (hasPriceVariationPercent()) {
        i += CodedOutputStreamMicro.computeFloatSize(6, getPriceVariationPercent());
      }
      if (hasChartUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getChartUrl());
      }
      if (hasWebUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getWebUrl());
      }
      if (hasQuoteserverData()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getQuoteserverData());
      }
      if (hasPrimaryKey()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getPrimaryKey());
      }
      if (hasName()) {
        i += CodedOutputStreamMicro.computeStringSize(11, getName());
      }
      if (hasSource()) {
        i += CodedOutputStreamMicro.computeInt32Size(12, getSource());
      }
      if (hasShortName()) {
        i += CodedOutputStreamMicro.computeStringSize(13, getShortName());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getShortName()
    {
      return this.shortName_;
    }
    
    public int getSource()
    {
      return this.source_;
    }
    
    public String getSymbol()
    {
      return this.symbol_;
    }
    
    public String getWebUrl()
    {
      return this.webUrl_;
    }
    
    public boolean hasChartUrl()
    {
      return this.hasChartUrl;
    }
    
    public boolean hasExchange()
    {
      return this.hasExchange;
    }
    
    public boolean hasLastPrice()
    {
      return this.hasLastPrice;
    }
    
    public boolean hasLastUpdateSeconds()
    {
      return this.hasLastUpdateSeconds;
    }
    
    public boolean hasName()
    {
      return this.hasName;
    }
    
    public boolean hasPriceVariation()
    {
      return this.hasPriceVariation;
    }
    
    public boolean hasPriceVariationPercent()
    {
      return this.hasPriceVariationPercent;
    }
    
    public boolean hasPrimaryKey()
    {
      return this.hasPrimaryKey;
    }
    
    public boolean hasQuoteserverData()
    {
      return this.hasQuoteserverData;
    }
    
    public boolean hasShortName()
    {
      return this.hasShortName;
    }
    
    public boolean hasSource()
    {
      return this.hasSource;
    }
    
    public boolean hasSymbol()
    {
      return this.hasSymbol;
    }
    
    public boolean hasWebUrl()
    {
      return this.hasWebUrl;
    }
    
    public StockQuote mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setExchange(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSymbol(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setLastUpdateSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 37: 
          setLastPrice(paramCodedInputStreamMicro.readFloat());
          break;
        case 45: 
          setPriceVariation(paramCodedInputStreamMicro.readFloat());
          break;
        case 53: 
          setPriceVariationPercent(paramCodedInputStreamMicro.readFloat());
          break;
        case 58: 
          setChartUrl(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          setWebUrl(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          Sidekick.AuxiliaryMessage localAuxiliaryMessage = new Sidekick.AuxiliaryMessage();
          paramCodedInputStreamMicro.readMessage(localAuxiliaryMessage);
          setQuoteserverData(localAuxiliaryMessage);
          break;
        case 82: 
          setPrimaryKey(paramCodedInputStreamMicro.readString());
          break;
        case 90: 
          setName(paramCodedInputStreamMicro.readString());
          break;
        case 96: 
          setSource(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setShortName(paramCodedInputStreamMicro.readString());
      }
    }
    
    public StockQuote setChartUrl(String paramString)
    {
      this.hasChartUrl = true;
      this.chartUrl_ = paramString;
      return this;
    }
    
    public StockQuote setExchange(String paramString)
    {
      this.hasExchange = true;
      this.exchange_ = paramString;
      return this;
    }
    
    public StockQuote setLastPrice(float paramFloat)
    {
      this.hasLastPrice = true;
      this.lastPrice_ = paramFloat;
      return this;
    }
    
    public StockQuote setLastUpdateSeconds(long paramLong)
    {
      this.hasLastUpdateSeconds = true;
      this.lastUpdateSeconds_ = paramLong;
      return this;
    }
    
    public StockQuote setName(String paramString)
    {
      this.hasName = true;
      this.name_ = paramString;
      return this;
    }
    
    public StockQuote setPriceVariation(float paramFloat)
    {
      this.hasPriceVariation = true;
      this.priceVariation_ = paramFloat;
      return this;
    }
    
    public StockQuote setPriceVariationPercent(float paramFloat)
    {
      this.hasPriceVariationPercent = true;
      this.priceVariationPercent_ = paramFloat;
      return this;
    }
    
    public StockQuote setPrimaryKey(String paramString)
    {
      this.hasPrimaryKey = true;
      this.primaryKey_ = paramString;
      return this;
    }
    
    public StockQuote setQuoteserverData(Sidekick.AuxiliaryMessage paramAuxiliaryMessage)
    {
      if (paramAuxiliaryMessage == null) {
        throw new NullPointerException();
      }
      this.hasQuoteserverData = true;
      this.quoteserverData_ = paramAuxiliaryMessage;
      return this;
    }
    
    public StockQuote setShortName(String paramString)
    {
      this.hasShortName = true;
      this.shortName_ = paramString;
      return this;
    }
    
    public StockQuote setSource(int paramInt)
    {
      this.hasSource = true;
      this.source_ = paramInt;
      return this;
    }
    
    public StockQuote setSymbol(String paramString)
    {
      this.hasSymbol = true;
      this.symbol_ = paramString;
      return this;
    }
    
    public StockQuote setWebUrl(String paramString)
    {
      this.hasWebUrl = true;
      this.webUrl_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasExchange()) {
        paramCodedOutputStreamMicro.writeString(1, getExchange());
      }
      if (hasSymbol()) {
        paramCodedOutputStreamMicro.writeString(2, getSymbol());
      }
      if (hasLastUpdateSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(3, getLastUpdateSeconds());
      }
      if (hasLastPrice()) {
        paramCodedOutputStreamMicro.writeFloat(4, getLastPrice());
      }
      if (hasPriceVariation()) {
        paramCodedOutputStreamMicro.writeFloat(5, getPriceVariation());
      }
      if (hasPriceVariationPercent()) {
        paramCodedOutputStreamMicro.writeFloat(6, getPriceVariationPercent());
      }
      if (hasChartUrl()) {
        paramCodedOutputStreamMicro.writeString(7, getChartUrl());
      }
      if (hasWebUrl()) {
        paramCodedOutputStreamMicro.writeString(8, getWebUrl());
      }
      if (hasQuoteserverData()) {
        paramCodedOutputStreamMicro.writeMessage(9, getQuoteserverData());
      }
      if (hasPrimaryKey()) {
        paramCodedOutputStreamMicro.writeString(10, getPrimaryKey());
      }
      if (hasName()) {
        paramCodedOutputStreamMicro.writeString(11, getName());
      }
      if (hasSource()) {
        paramCodedOutputStreamMicro.writeInt32(12, getSource());
      }
      if (hasShortName()) {
        paramCodedOutputStreamMicro.writeString(13, getShortName());
      }
    }
  }
  
  public static final class StockQuoteListEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String disclaimerUrl_ = "";
    private boolean hasDisclaimerUrl;
    private List<Sidekick.StockQuote> stockQuoteEntry_ = Collections.emptyList();
    
    public StockQuoteListEntry addStockQuoteEntry(Sidekick.StockQuote paramStockQuote)
    {
      if (paramStockQuote == null) {
        throw new NullPointerException();
      }
      if (this.stockQuoteEntry_.isEmpty()) {
        this.stockQuoteEntry_ = new ArrayList();
      }
      this.stockQuoteEntry_.add(paramStockQuote);
      return this;
    }
    
    public StockQuoteListEntry clearStockQuoteEntry()
    {
      this.stockQuoteEntry_ = Collections.emptyList();
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getDisclaimerUrl()
    {
      return this.disclaimerUrl_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getStockQuoteEntryList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (Sidekick.StockQuote)localIterator.next());
      }
      if (hasDisclaimerUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getDisclaimerUrl());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.StockQuote getStockQuoteEntry(int paramInt)
    {
      return (Sidekick.StockQuote)this.stockQuoteEntry_.get(paramInt);
    }
    
    public int getStockQuoteEntryCount()
    {
      return this.stockQuoteEntry_.size();
    }
    
    public List<Sidekick.StockQuote> getStockQuoteEntryList()
    {
      return this.stockQuoteEntry_;
    }
    
    public boolean hasDisclaimerUrl()
    {
      return this.hasDisclaimerUrl;
    }
    
    public StockQuoteListEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.StockQuote localStockQuote = new Sidekick.StockQuote();
          paramCodedInputStreamMicro.readMessage(localStockQuote);
          addStockQuoteEntry(localStockQuote);
          break;
        }
        setDisclaimerUrl(paramCodedInputStreamMicro.readString());
      }
    }
    
    public StockQuoteListEntry setDisclaimerUrl(String paramString)
    {
      this.hasDisclaimerUrl = true;
      this.disclaimerUrl_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getStockQuoteEntryList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (Sidekick.StockQuote)localIterator.next());
      }
      if (hasDisclaimerUrl()) {
        paramCodedOutputStreamMicro.writeString(2, getDisclaimerUrl());
      }
    }
  }
  
  public static final class StringDictionary
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<DictionaryEntry> entry_ = Collections.emptyList();
    private boolean hasMetadata;
    private Sidekick.StringDictionaryMetadata metadata_ = null;
    
    public StringDictionary addEntry(DictionaryEntry paramDictionaryEntry)
    {
      if (paramDictionaryEntry == null) {
        throw new NullPointerException();
      }
      if (this.entry_.isEmpty()) {
        this.entry_ = new ArrayList();
      }
      this.entry_.add(paramDictionaryEntry);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public List<DictionaryEntry> getEntryList()
    {
      return this.entry_;
    }
    
    public Sidekick.StringDictionaryMetadata getMetadata()
    {
      return this.metadata_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasMetadata();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getMetadata());
      }
      Iterator localIterator = getEntryList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (DictionaryEntry)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasMetadata()
    {
      return this.hasMetadata;
    }
    
    public StringDictionary mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.StringDictionaryMetadata localStringDictionaryMetadata = new Sidekick.StringDictionaryMetadata();
          paramCodedInputStreamMicro.readMessage(localStringDictionaryMetadata);
          setMetadata(localStringDictionaryMetadata);
          break;
        }
        DictionaryEntry localDictionaryEntry = new DictionaryEntry();
        paramCodedInputStreamMicro.readMessage(localDictionaryEntry);
        addEntry(localDictionaryEntry);
      }
    }
    
    public StringDictionary setMetadata(Sidekick.StringDictionaryMetadata paramStringDictionaryMetadata)
    {
      if (paramStringDictionaryMetadata == null) {
        throw new NullPointerException();
      }
      this.hasMetadata = true;
      this.metadata_ = paramStringDictionaryMetadata;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasMetadata()) {
        paramCodedOutputStreamMicro.writeMessage(1, getMetadata());
      }
      Iterator localIterator = getEntryList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (DictionaryEntry)localIterator.next());
      }
    }
    
    public static final class DictionaryEntry
      extends MessageMicro
    {
      private int cachedSize = -1;
      private boolean hasKey;
      private boolean hasValue;
      private String key_ = "";
      private String value_ = "";
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public String getKey()
      {
        return this.key_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasKey();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getKey());
        }
        if (hasValue()) {
          i += CodedOutputStreamMicro.computeStringSize(2, getValue());
        }
        this.cachedSize = i;
        return i;
      }
      
      public String getValue()
      {
        return this.value_;
      }
      
      public boolean hasKey()
      {
        return this.hasKey;
      }
      
      public boolean hasValue()
      {
        return this.hasValue;
      }
      
      public DictionaryEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setKey(paramCodedInputStreamMicro.readString());
            break;
          }
          setValue(paramCodedInputStreamMicro.readString());
        }
      }
      
      public DictionaryEntry setKey(String paramString)
      {
        this.hasKey = true;
        this.key_ = paramString;
        return this;
      }
      
      public DictionaryEntry setValue(String paramString)
      {
        this.hasValue = true;
        this.value_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasKey()) {
          paramCodedOutputStreamMicro.writeString(1, getKey());
        }
        if (hasValue()) {
          paramCodedOutputStreamMicro.writeString(2, getValue());
        }
      }
    }
  }
  
  public static final class StringDictionaryMetadata
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasHash;
    private long hash_ = 0L;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getHash()
    {
      return this.hash_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasHash();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getHash());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasHash()
    {
      return this.hasHash;
    }
    
    public StringDictionaryMetadata mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setHash(paramCodedInputStreamMicro.readInt64());
      }
    }
    
    public StringDictionaryMetadata setHash(long paramLong)
    {
      this.hasHash = true;
      this.hash_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasHash()) {
        paramCodedOutputStreamMicro.writeInt64(1, getHash());
      }
    }
  }
  
  public static final class ThingsToWatchEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<ClickActionWithFallback> clickAction_ = Collections.emptyList();
    private String episodeTitle_ = "";
    private String formattedHtmlTimeString_ = "";
    private boolean hasEpisodeTitle;
    private boolean hasFormattedHtmlTimeString;
    private boolean hasJustification;
    private boolean hasProgramType;
    private boolean hasSubtitle;
    private boolean hasTitle;
    private List<Sidekick.Photo> image_ = Collections.emptyList();
    private String justification_ = "";
    private int programType_ = 1;
    private String subtitle_ = "";
    private String title_ = "";
    
    public ThingsToWatchEntry addClickAction(ClickActionWithFallback paramClickActionWithFallback)
    {
      if (paramClickActionWithFallback == null) {
        throw new NullPointerException();
      }
      if (this.clickAction_.isEmpty()) {
        this.clickAction_ = new ArrayList();
      }
      this.clickAction_.add(paramClickActionWithFallback);
      return this;
    }
    
    public ThingsToWatchEntry addImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      if (this.image_.isEmpty()) {
        this.image_ = new ArrayList();
      }
      this.image_.add(paramPhoto);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getClickActionCount()
    {
      return this.clickAction_.size();
    }
    
    public List<ClickActionWithFallback> getClickActionList()
    {
      return this.clickAction_;
    }
    
    public String getEpisodeTitle()
    {
      return this.episodeTitle_;
    }
    
    public String getFormattedHtmlTimeString()
    {
      return this.formattedHtmlTimeString_;
    }
    
    public Sidekick.Photo getImage(int paramInt)
    {
      return (Sidekick.Photo)this.image_.get(paramInt);
    }
    
    public int getImageCount()
    {
      return this.image_.size();
    }
    
    public List<Sidekick.Photo> getImageList()
    {
      return this.image_;
    }
    
    public String getJustification()
    {
      return this.justification_;
    }
    
    public int getProgramType()
    {
      return this.programType_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasSubtitle()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSubtitle());
      }
      Iterator localIterator1 = getImageList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.Photo)localIterator1.next());
      }
      if (hasJustification()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getJustification());
      }
      if (hasFormattedHtmlTimeString()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getFormattedHtmlTimeString());
      }
      Iterator localIterator2 = getClickActionList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, (ClickActionWithFallback)localIterator2.next());
      }
      if (hasEpisodeTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getEpisodeTitle());
      }
      if (hasProgramType()) {
        i += CodedOutputStreamMicro.computeInt32Size(11, getProgramType());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSubtitle()
    {
      return this.subtitle_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasEpisodeTitle()
    {
      return this.hasEpisodeTitle;
    }
    
    public boolean hasFormattedHtmlTimeString()
    {
      return this.hasFormattedHtmlTimeString;
    }
    
    public boolean hasJustification()
    {
      return this.hasJustification;
    }
    
    public boolean hasProgramType()
    {
      return this.hasProgramType;
    }
    
    public boolean hasSubtitle()
    {
      return this.hasSubtitle;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public ThingsToWatchEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSubtitle(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          addImage(localPhoto);
          break;
        case 34: 
          setJustification(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          setFormattedHtmlTimeString(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          ClickActionWithFallback localClickActionWithFallback = new ClickActionWithFallback();
          paramCodedInputStreamMicro.readMessage(localClickActionWithFallback);
          addClickAction(localClickActionWithFallback);
          break;
        case 82: 
          setEpisodeTitle(paramCodedInputStreamMicro.readString());
          break;
        }
        setProgramType(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public ThingsToWatchEntry setEpisodeTitle(String paramString)
    {
      this.hasEpisodeTitle = true;
      this.episodeTitle_ = paramString;
      return this;
    }
    
    public ThingsToWatchEntry setFormattedHtmlTimeString(String paramString)
    {
      this.hasFormattedHtmlTimeString = true;
      this.formattedHtmlTimeString_ = paramString;
      return this;
    }
    
    public ThingsToWatchEntry setJustification(String paramString)
    {
      this.hasJustification = true;
      this.justification_ = paramString;
      return this;
    }
    
    public ThingsToWatchEntry setProgramType(int paramInt)
    {
      this.hasProgramType = true;
      this.programType_ = paramInt;
      return this;
    }
    
    public ThingsToWatchEntry setSubtitle(String paramString)
    {
      this.hasSubtitle = true;
      this.subtitle_ = paramString;
      return this;
    }
    
    public ThingsToWatchEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasSubtitle()) {
        paramCodedOutputStreamMicro.writeString(2, getSubtitle());
      }
      Iterator localIterator1 = getImageList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.Photo)localIterator1.next());
      }
      if (hasJustification()) {
        paramCodedOutputStreamMicro.writeString(4, getJustification());
      }
      if (hasFormattedHtmlTimeString()) {
        paramCodedOutputStreamMicro.writeString(5, getFormattedHtmlTimeString());
      }
      Iterator localIterator2 = getClickActionList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(9, (ClickActionWithFallback)localIterator2.next());
      }
      if (hasEpisodeTitle()) {
        paramCodedOutputStreamMicro.writeString(10, getEpisodeTitle());
      }
      if (hasProgramType()) {
        paramCodedOutputStreamMicro.writeInt32(11, getProgramType());
      }
    }
    
    public static final class ClickActionWithFallback
      extends MessageMicro
    {
      private int cachedSize = -1;
      private Sidekick.ClickAction fallbackClickAction_ = null;
      private boolean hasFallbackClickAction;
      private boolean hasPreferredClickAction;
      private Sidekick.ClickAction preferredClickAction_ = null;
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public Sidekick.ClickAction getFallbackClickAction()
      {
        return this.fallbackClickAction_;
      }
      
      public Sidekick.ClickAction getPreferredClickAction()
      {
        return this.preferredClickAction_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasPreferredClickAction();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getPreferredClickAction());
        }
        if (hasFallbackClickAction()) {
          i += CodedOutputStreamMicro.computeMessageSize(2, getFallbackClickAction());
        }
        this.cachedSize = i;
        return i;
      }
      
      public boolean hasFallbackClickAction()
      {
        return this.hasFallbackClickAction;
      }
      
      public boolean hasPreferredClickAction()
      {
        return this.hasPreferredClickAction;
      }
      
      public ClickActionWithFallback mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            Sidekick.ClickAction localClickAction2 = new Sidekick.ClickAction();
            paramCodedInputStreamMicro.readMessage(localClickAction2);
            setPreferredClickAction(localClickAction2);
            break;
          }
          Sidekick.ClickAction localClickAction1 = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction1);
          setFallbackClickAction(localClickAction1);
        }
      }
      
      public ClickActionWithFallback setFallbackClickAction(Sidekick.ClickAction paramClickAction)
      {
        if (paramClickAction == null) {
          throw new NullPointerException();
        }
        this.hasFallbackClickAction = true;
        this.fallbackClickAction_ = paramClickAction;
        return this;
      }
      
      public ClickActionWithFallback setPreferredClickAction(Sidekick.ClickAction paramClickAction)
      {
        if (paramClickAction == null) {
          throw new NullPointerException();
        }
        this.hasPreferredClickAction = true;
        this.preferredClickAction_ = paramClickAction;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasPreferredClickAction()) {
          paramCodedOutputStreamMicro.writeMessage(1, getPreferredClickAction());
        }
        if (hasFallbackClickAction()) {
          paramCodedOutputStreamMicro.writeMessage(2, getFallbackClickAction());
        }
      }
    }
  }
  
  public static final class TimeToLeaveAttributes
    extends MessageMicro
  {
    private int arriveEarlyTimeSeconds_ = 0;
    private int cachedSize = -1;
    private boolean hasArriveEarlyTimeSeconds;
    private boolean hasStartingLocation;
    private boolean hasTravelMode;
    private int startingLocation_ = 3;
    private int travelMode_ = 0;
    
    public int getArriveEarlyTimeSeconds()
    {
      return this.arriveEarlyTimeSeconds_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasStartingLocation();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getStartingLocation());
      }
      if (hasArriveEarlyTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(2, getArriveEarlyTimeSeconds());
      }
      if (hasTravelMode()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getTravelMode());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getStartingLocation()
    {
      return this.startingLocation_;
    }
    
    public int getTravelMode()
    {
      return this.travelMode_;
    }
    
    public boolean hasArriveEarlyTimeSeconds()
    {
      return this.hasArriveEarlyTimeSeconds;
    }
    
    public boolean hasStartingLocation()
    {
      return this.hasStartingLocation;
    }
    
    public boolean hasTravelMode()
    {
      return this.hasTravelMode;
    }
    
    public TimeToLeaveAttributes mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setStartingLocation(paramCodedInputStreamMicro.readInt32());
          break;
        case 16: 
          setArriveEarlyTimeSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setTravelMode(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public TimeToLeaveAttributes setArriveEarlyTimeSeconds(int paramInt)
    {
      this.hasArriveEarlyTimeSeconds = true;
      this.arriveEarlyTimeSeconds_ = paramInt;
      return this;
    }
    
    public TimeToLeaveAttributes setStartingLocation(int paramInt)
    {
      this.hasStartingLocation = true;
      this.startingLocation_ = paramInt;
      return this;
    }
    
    public TimeToLeaveAttributes setTravelMode(int paramInt)
    {
      this.hasTravelMode = true;
      this.travelMode_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasStartingLocation()) {
        paramCodedOutputStreamMicro.writeInt32(1, getStartingLocation());
      }
      if (hasArriveEarlyTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(2, getArriveEarlyTimeSeconds());
      }
      if (hasTravelMode()) {
        paramCodedOutputStreamMicro.writeInt32(3, getTravelMode());
      }
    }
  }
  
  public static final class TimeToLeaveDetails
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasTimeToLeave;
    private boolean hasTtlAttributes;
    private long timeToLeave_ = 0L;
    private Sidekick.TimeToLeaveAttributes ttlAttributes_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTtlAttributes();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getTtlAttributes());
      }
      if (hasTimeToLeave()) {
        i += CodedOutputStreamMicro.computeInt64Size(2, getTimeToLeave());
      }
      this.cachedSize = i;
      return i;
    }
    
    public long getTimeToLeave()
    {
      return this.timeToLeave_;
    }
    
    public Sidekick.TimeToLeaveAttributes getTtlAttributes()
    {
      return this.ttlAttributes_;
    }
    
    public boolean hasTimeToLeave()
    {
      return this.hasTimeToLeave;
    }
    
    public boolean hasTtlAttributes()
    {
      return this.hasTtlAttributes;
    }
    
    public TimeToLeaveDetails mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.TimeToLeaveAttributes localTimeToLeaveAttributes = new Sidekick.TimeToLeaveAttributes();
          paramCodedInputStreamMicro.readMessage(localTimeToLeaveAttributes);
          setTtlAttributes(localTimeToLeaveAttributes);
          break;
        }
        setTimeToLeave(paramCodedInputStreamMicro.readInt64());
      }
    }
    
    public TimeToLeaveDetails setTimeToLeave(long paramLong)
    {
      this.hasTimeToLeave = true;
      this.timeToLeave_ = paramLong;
      return this;
    }
    
    public TimeToLeaveDetails setTtlAttributes(Sidekick.TimeToLeaveAttributes paramTimeToLeaveAttributes)
    {
      if (paramTimeToLeaveAttributes == null) {
        throw new NullPointerException();
      }
      this.hasTtlAttributes = true;
      this.ttlAttributes_ = paramTimeToLeaveAttributes;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTtlAttributes()) {
        paramCodedOutputStreamMicro.writeMessage(1, getTtlAttributes());
      }
      if (hasTimeToLeave()) {
        paramCodedOutputStreamMicro.writeInt64(2, getTimeToLeave());
      }
    }
  }
  
  public static final class TimeWithZone
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasSeconds;
    private boolean hasTimezoneId;
    private long seconds_ = 0L;
    private String timezoneId_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getSeconds()
    {
      return this.seconds_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSeconds();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeInt64Size(1, getSeconds());
      }
      if (hasTimezoneId()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getTimezoneId());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTimezoneId()
    {
      return this.timezoneId_;
    }
    
    public boolean hasSeconds()
    {
      return this.hasSeconds;
    }
    
    public boolean hasTimezoneId()
    {
      return this.hasTimezoneId;
    }
    
    public TimeWithZone mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          setSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        }
        setTimezoneId(paramCodedInputStreamMicro.readString());
      }
    }
    
    public TimeWithZone setSeconds(long paramLong)
    {
      this.hasSeconds = true;
      this.seconds_ = paramLong;
      return this;
    }
    
    public TimeWithZone setTimezoneId(String paramString)
    {
      this.hasTimezoneId = true;
      this.timezoneId_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(1, getSeconds());
      }
      if (hasTimezoneId()) {
        paramCodedOutputStreamMicro.writeString(2, getTimezoneId());
      }
    }
  }
  
  public static final class TimestampedLocation
    extends MessageMicro
  {
    private int accuracyMeters_ = 0;
    private int cachedSize = -1;
    private int dEPRECATEDTimezoneOffsetSeconds_ = 0;
    private boolean hasAccuracyMeters;
    private boolean hasDEPRECATEDTimezoneOffsetSeconds;
    private boolean hasLocation;
    private boolean hasNetworkLocationType;
    private boolean hasProvider;
    private boolean hasSource;
    private boolean hasTimestampSeconds;
    private Sidekick.Location location_ = null;
    private String networkLocationType_ = "";
    private String provider_ = "";
    private int source_ = 0;
    private long timestampSeconds_ = 0L;
    
    public int getAccuracyMeters()
    {
      return this.accuracyMeters_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getDEPRECATEDTimezoneOffsetSeconds()
    {
      return this.dEPRECATEDTimezoneOffsetSeconds_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public String getNetworkLocationType()
    {
      return this.networkLocationType_;
    }
    
    public String getProvider()
    {
      return this.provider_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLocation();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getLocation());
      }
      if (hasTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(2, getTimestampSeconds());
      }
      if (hasAccuracyMeters()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getAccuracyMeters());
      }
      if (hasDEPRECATEDTimezoneOffsetSeconds()) {
        i += CodedOutputStreamMicro.computeInt32Size(4, getDEPRECATEDTimezoneOffsetSeconds());
      }
      if (hasProvider()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getProvider());
      }
      if (hasNetworkLocationType()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getNetworkLocationType());
      }
      if (hasSource()) {
        i += CodedOutputStreamMicro.computeInt32Size(7, getSource());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getSource()
    {
      return this.source_;
    }
    
    public long getTimestampSeconds()
    {
      return this.timestampSeconds_;
    }
    
    public boolean hasAccuracyMeters()
    {
      return this.hasAccuracyMeters;
    }
    
    public boolean hasDEPRECATEDTimezoneOffsetSeconds()
    {
      return this.hasDEPRECATEDTimezoneOffsetSeconds;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasNetworkLocationType()
    {
      return this.hasNetworkLocationType;
    }
    
    public boolean hasProvider()
    {
      return this.hasProvider;
    }
    
    public boolean hasSource()
    {
      return this.hasSource;
    }
    
    public boolean hasTimestampSeconds()
    {
      return this.hasTimestampSeconds;
    }
    
    public TimestampedLocation mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 16: 
          setTimestampSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 24: 
          setAccuracyMeters(paramCodedInputStreamMicro.readInt32());
          break;
        case 32: 
          setDEPRECATEDTimezoneOffsetSeconds(paramCodedInputStreamMicro.readInt32());
          break;
        case 42: 
          setProvider(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setNetworkLocationType(paramCodedInputStreamMicro.readString());
          break;
        }
        setSource(paramCodedInputStreamMicro.readInt32());
      }
    }
    
    public TimestampedLocation setAccuracyMeters(int paramInt)
    {
      this.hasAccuracyMeters = true;
      this.accuracyMeters_ = paramInt;
      return this;
    }
    
    public TimestampedLocation setDEPRECATEDTimezoneOffsetSeconds(int paramInt)
    {
      this.hasDEPRECATEDTimezoneOffsetSeconds = true;
      this.dEPRECATEDTimezoneOffsetSeconds_ = paramInt;
      return this;
    }
    
    public TimestampedLocation setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public TimestampedLocation setNetworkLocationType(String paramString)
    {
      this.hasNetworkLocationType = true;
      this.networkLocationType_ = paramString;
      return this;
    }
    
    public TimestampedLocation setProvider(String paramString)
    {
      this.hasProvider = true;
      this.provider_ = paramString;
      return this;
    }
    
    public TimestampedLocation setSource(int paramInt)
    {
      this.hasSource = true;
      this.source_ = paramInt;
      return this;
    }
    
    public TimestampedLocation setTimestampSeconds(long paramLong)
    {
      this.hasTimestampSeconds = true;
      this.timestampSeconds_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(1, getLocation());
      }
      if (hasTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(2, getTimestampSeconds());
      }
      if (hasAccuracyMeters()) {
        paramCodedOutputStreamMicro.writeInt32(3, getAccuracyMeters());
      }
      if (hasDEPRECATEDTimezoneOffsetSeconds()) {
        paramCodedOutputStreamMicro.writeInt32(4, getDEPRECATEDTimezoneOffsetSeconds());
      }
      if (hasProvider()) {
        paramCodedOutputStreamMicro.writeString(5, getProvider());
      }
      if (hasNetworkLocationType()) {
        paramCodedOutputStreamMicro.writeString(6, getNetworkLocationType());
      }
      if (hasSource()) {
        paramCodedOutputStreamMicro.writeInt32(7, getSource());
      }
    }
  }
  
  public static final class TrafficIncident
    extends MessageMicro
  {
    private String attribution_ = "";
    private int cachedSize = -1;
    private String description_ = "";
    private boolean hasAttribution;
    private boolean hasDescription;
    private boolean hasIncidentId;
    private boolean hasType;
    private long incidentId_ = 0L;
    private int type_ = 1;
    
    public String getAttribution()
    {
      return this.attribution_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getDescription()
    {
      return this.description_;
    }
    
    public long getIncidentId()
    {
      return this.incidentId_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasIncidentId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeFixed64Size(1, getIncidentId());
      }
      if (hasDescription()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getDescription());
      }
      if (hasType()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getType());
      }
      if (hasAttribution()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getAttribution());
      }
      this.cachedSize = i;
      return i;
    }
    
    public int getType()
    {
      return this.type_;
    }
    
    public boolean hasAttribution()
    {
      return this.hasAttribution;
    }
    
    public boolean hasDescription()
    {
      return this.hasDescription;
    }
    
    public boolean hasIncidentId()
    {
      return this.hasIncidentId;
    }
    
    public boolean hasType()
    {
      return this.hasType;
    }
    
    public TrafficIncident mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 9: 
          setIncidentId(paramCodedInputStreamMicro.readFixed64());
          break;
        case 18: 
          setDescription(paramCodedInputStreamMicro.readString());
          break;
        case 24: 
          setType(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setAttribution(paramCodedInputStreamMicro.readString());
      }
    }
    
    public TrafficIncident setAttribution(String paramString)
    {
      this.hasAttribution = true;
      this.attribution_ = paramString;
      return this;
    }
    
    public TrafficIncident setDescription(String paramString)
    {
      this.hasDescription = true;
      this.description_ = paramString;
      return this;
    }
    
    public TrafficIncident setIncidentId(long paramLong)
    {
      this.hasIncidentId = true;
      this.incidentId_ = paramLong;
      return this;
    }
    
    public TrafficIncident setType(int paramInt)
    {
      this.hasType = true;
      this.type_ = paramInt;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasIncidentId()) {
        paramCodedOutputStreamMicro.writeFixed64(1, getIncidentId());
      }
      if (hasDescription()) {
        paramCodedOutputStreamMicro.writeString(2, getDescription());
      }
      if (hasType()) {
        paramCodedOutputStreamMicro.writeInt32(3, getType());
      }
      if (hasAttribution()) {
        paramCodedOutputStreamMicro.writeString(4, getAttribution());
      }
    }
  }
  
  public static final class TrainingModeClosetQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      this.cachedSize = 0;
      return 0;
    }
    
    public TrainingModeClosetQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      int i;
      do
      {
        i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        }
      } while (parseUnknownField(paramCodedInputStreamMicro, i));
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro) {}
  }
  
  public static final class TrainingModeClosetResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<QuestionGroup> questionGroup_ = Collections.emptyList();
    
    public TrainingModeClosetResponse addQuestionGroup(QuestionGroup paramQuestionGroup)
    {
      if (paramQuestionGroup == null) {
        throw new NullPointerException();
      }
      if (this.questionGroup_.isEmpty()) {
        this.questionGroup_ = new ArrayList();
      }
      this.questionGroup_.add(paramQuestionGroup);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public QuestionGroup getQuestionGroup(int paramInt)
    {
      return (QuestionGroup)this.questionGroup_.get(paramInt);
    }
    
    public int getQuestionGroupCount()
    {
      return this.questionGroup_.size();
    }
    
    public List<QuestionGroup> getQuestionGroupList()
    {
      return this.questionGroup_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator = getQuestionGroupList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(1, (QuestionGroup)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public TrainingModeClosetResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        QuestionGroup localQuestionGroup = new QuestionGroup();
        paramCodedInputStreamMicro.readMessage(localQuestionGroup);
        addQuestionGroup(localQuestionGroup);
      }
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator = getQuestionGroupList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(1, (QuestionGroup)localIterator.next());
      }
    }
    
    public static final class QuestionGroup
      extends MessageMicro
    {
      private List<Integer> attribute_ = Collections.emptyList();
      private int cachedSize = -1;
      private List<QuestionGroup> child_ = Collections.emptyList();
      private int groupType_ = 0;
      private boolean hasGroupType;
      private boolean hasTitle;
      private List<Sidekick.QuestionNode> questionNode_ = Collections.emptyList();
      private String title_ = "";
      
      public QuestionGroup addAttribute(int paramInt)
      {
        if (this.attribute_.isEmpty()) {
          this.attribute_ = new ArrayList();
        }
        this.attribute_.add(Integer.valueOf(paramInt));
        return this;
      }
      
      public QuestionGroup addChild(QuestionGroup paramQuestionGroup)
      {
        if (paramQuestionGroup == null) {
          throw new NullPointerException();
        }
        if (this.child_.isEmpty()) {
          this.child_ = new ArrayList();
        }
        this.child_.add(paramQuestionGroup);
        return this;
      }
      
      public QuestionGroup addQuestionNode(Sidekick.QuestionNode paramQuestionNode)
      {
        if (paramQuestionNode == null) {
          throw new NullPointerException();
        }
        if (this.questionNode_.isEmpty()) {
          this.questionNode_ = new ArrayList();
        }
        this.questionNode_.add(paramQuestionNode);
        return this;
      }
      
      public QuestionGroup clearQuestionNode()
      {
        this.questionNode_ = Collections.emptyList();
        return this;
      }
      
      public List<Integer> getAttributeList()
      {
        return this.attribute_;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getChildCount()
      {
        return this.child_.size();
      }
      
      public List<QuestionGroup> getChildList()
      {
        return this.child_;
      }
      
      public int getGroupType()
      {
        return this.groupType_;
      }
      
      public int getQuestionNodeCount()
      {
        return this.questionNode_.size();
      }
      
      public List<Sidekick.QuestionNode> getQuestionNodeList()
      {
        return this.questionNode_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasTitle();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
        }
        int j = 0;
        Iterator localIterator1 = getAttributeList().iterator();
        while (localIterator1.hasNext()) {
          j += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator1.next()).intValue());
        }
        int k = i + j + 1 * getAttributeList().size();
        Iterator localIterator2 = getQuestionNodeList().iterator();
        while (localIterator2.hasNext()) {
          k += CodedOutputStreamMicro.computeMessageSize(3, (Sidekick.QuestionNode)localIterator2.next());
        }
        Iterator localIterator3 = getChildList().iterator();
        while (localIterator3.hasNext()) {
          k += CodedOutputStreamMicro.computeMessageSize(4, (QuestionGroup)localIterator3.next());
        }
        if (hasGroupType()) {
          k += CodedOutputStreamMicro.computeInt32Size(6, getGroupType());
        }
        this.cachedSize = k;
        return k;
      }
      
      public String getTitle()
      {
        return this.title_;
      }
      
      public boolean hasGroupType()
      {
        return this.hasGroupType;
      }
      
      public boolean hasTitle()
      {
        return this.hasTitle;
      }
      
      public QuestionGroup mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setTitle(paramCodedInputStreamMicro.readString());
            break;
          case 16: 
            addAttribute(paramCodedInputStreamMicro.readInt32());
            break;
          case 26: 
            Sidekick.QuestionNode localQuestionNode = new Sidekick.QuestionNode();
            paramCodedInputStreamMicro.readMessage(localQuestionNode);
            addQuestionNode(localQuestionNode);
            break;
          case 34: 
            QuestionGroup localQuestionGroup = new QuestionGroup();
            paramCodedInputStreamMicro.readMessage(localQuestionGroup);
            addChild(localQuestionGroup);
            break;
          }
          setGroupType(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public QuestionGroup setGroupType(int paramInt)
      {
        this.hasGroupType = true;
        this.groupType_ = paramInt;
        return this;
      }
      
      public QuestionGroup setTitle(String paramString)
      {
        this.hasTitle = true;
        this.title_ = paramString;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasTitle()) {
          paramCodedOutputStreamMicro.writeString(1, getTitle());
        }
        Iterator localIterator1 = getAttributeList().iterator();
        while (localIterator1.hasNext()) {
          paramCodedOutputStreamMicro.writeInt32(2, ((Integer)localIterator1.next()).intValue());
        }
        Iterator localIterator2 = getQuestionNodeList().iterator();
        while (localIterator2.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(3, (Sidekick.QuestionNode)localIterator2.next());
        }
        Iterator localIterator3 = getChildList().iterator();
        while (localIterator3.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(4, (QuestionGroup)localIterator3.next());
        }
        if (hasGroupType()) {
          paramCodedOutputStreamMicro.writeInt32(6, getGroupType());
        }
      }
    }
  }
  
  public static final class TrainingModeDataQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasMetadata;
    private Sidekick.TrainingModeMetadata metadata_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.TrainingModeMetadata getMetadata()
    {
      return this.metadata_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasMetadata();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getMetadata());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasMetadata()
    {
      return this.hasMetadata;
    }
    
    public TrainingModeDataQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        Sidekick.TrainingModeMetadata localTrainingModeMetadata = new Sidekick.TrainingModeMetadata();
        paramCodedInputStreamMicro.readMessage(localTrainingModeMetadata);
        setMetadata(localTrainingModeMetadata);
      }
    }
    
    public TrainingModeDataQuery setMetadata(Sidekick.TrainingModeMetadata paramTrainingModeMetadata)
    {
      if (paramTrainingModeMetadata == null) {
        throw new NullPointerException();
      }
      this.hasMetadata = true;
      this.metadata_ = paramTrainingModeMetadata;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasMetadata()) {
        paramCodedOutputStreamMicro.writeMessage(1, getMetadata());
      }
    }
  }
  
  public static final class TrainingModeDataResponse
    extends MessageMicro
  {
    private Sidekick.AnsweredQuestions answeredQuestions_ = null;
    private int cachedSize = -1;
    private boolean hasAnsweredQuestions;
    private boolean hasQuestionTemplates;
    private boolean hasStringDictionary;
    private boolean hasUpdatedSidekickConfiguration;
    private Sidekick.QuestionTemplates questionTemplates_ = null;
    private Sidekick.StringDictionary stringDictionary_ = null;
    private Sidekick.SidekickConfiguration updatedSidekickConfiguration_ = null;
    
    public Sidekick.AnsweredQuestions getAnsweredQuestions()
    {
      return this.answeredQuestions_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.QuestionTemplates getQuestionTemplates()
    {
      return this.questionTemplates_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasStringDictionary();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getStringDictionary());
      }
      if (hasQuestionTemplates()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getQuestionTemplates());
      }
      if (hasAnsweredQuestions()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getAnsweredQuestions());
      }
      if (hasUpdatedSidekickConfiguration()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getUpdatedSidekickConfiguration());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.StringDictionary getStringDictionary()
    {
      return this.stringDictionary_;
    }
    
    public Sidekick.SidekickConfiguration getUpdatedSidekickConfiguration()
    {
      return this.updatedSidekickConfiguration_;
    }
    
    public boolean hasAnsweredQuestions()
    {
      return this.hasAnsweredQuestions;
    }
    
    public boolean hasQuestionTemplates()
    {
      return this.hasQuestionTemplates;
    }
    
    public boolean hasStringDictionary()
    {
      return this.hasStringDictionary;
    }
    
    public boolean hasUpdatedSidekickConfiguration()
    {
      return this.hasUpdatedSidekickConfiguration;
    }
    
    public TrainingModeDataResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.StringDictionary localStringDictionary = new Sidekick.StringDictionary();
          paramCodedInputStreamMicro.readMessage(localStringDictionary);
          setStringDictionary(localStringDictionary);
          break;
        case 18: 
          Sidekick.QuestionTemplates localQuestionTemplates = new Sidekick.QuestionTemplates();
          paramCodedInputStreamMicro.readMessage(localQuestionTemplates);
          setQuestionTemplates(localQuestionTemplates);
          break;
        case 26: 
          Sidekick.AnsweredQuestions localAnsweredQuestions = new Sidekick.AnsweredQuestions();
          paramCodedInputStreamMicro.readMessage(localAnsweredQuestions);
          setAnsweredQuestions(localAnsweredQuestions);
          break;
        }
        Sidekick.SidekickConfiguration localSidekickConfiguration = new Sidekick.SidekickConfiguration();
        paramCodedInputStreamMicro.readMessage(localSidekickConfiguration);
        setUpdatedSidekickConfiguration(localSidekickConfiguration);
      }
    }
    
    public TrainingModeDataResponse setAnsweredQuestions(Sidekick.AnsweredQuestions paramAnsweredQuestions)
    {
      if (paramAnsweredQuestions == null) {
        throw new NullPointerException();
      }
      this.hasAnsweredQuestions = true;
      this.answeredQuestions_ = paramAnsweredQuestions;
      return this;
    }
    
    public TrainingModeDataResponse setQuestionTemplates(Sidekick.QuestionTemplates paramQuestionTemplates)
    {
      if (paramQuestionTemplates == null) {
        throw new NullPointerException();
      }
      this.hasQuestionTemplates = true;
      this.questionTemplates_ = paramQuestionTemplates;
      return this;
    }
    
    public TrainingModeDataResponse setStringDictionary(Sidekick.StringDictionary paramStringDictionary)
    {
      if (paramStringDictionary == null) {
        throw new NullPointerException();
      }
      this.hasStringDictionary = true;
      this.stringDictionary_ = paramStringDictionary;
      return this;
    }
    
    public TrainingModeDataResponse setUpdatedSidekickConfiguration(Sidekick.SidekickConfiguration paramSidekickConfiguration)
    {
      if (paramSidekickConfiguration == null) {
        throw new NullPointerException();
      }
      this.hasUpdatedSidekickConfiguration = true;
      this.updatedSidekickConfiguration_ = paramSidekickConfiguration;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasStringDictionary()) {
        paramCodedOutputStreamMicro.writeMessage(1, getStringDictionary());
      }
      if (hasQuestionTemplates()) {
        paramCodedOutputStreamMicro.writeMessage(2, getQuestionTemplates());
      }
      if (hasAnsweredQuestions()) {
        paramCodedOutputStreamMicro.writeMessage(3, getAnsweredQuestions());
      }
      if (hasUpdatedSidekickConfiguration()) {
        paramCodedOutputStreamMicro.writeMessage(4, getUpdatedSidekickConfiguration());
      }
    }
  }
  
  public static final class TrainingModeMetadata
    extends MessageMicro
  {
    private Sidekick.AnsweredQuestionsMetadata answeredQuestionsMetadata_ = null;
    private int cachedSize = -1;
    private boolean hasAnsweredQuestionsMetadata;
    private boolean hasQuestionTemplatesMetadata;
    private boolean hasStringDictionaryMetadata;
    private Sidekick.QuestionTemplatesMetadata questionTemplatesMetadata_ = null;
    private Sidekick.StringDictionaryMetadata stringDictionaryMetadata_ = null;
    
    public Sidekick.AnsweredQuestionsMetadata getAnsweredQuestionsMetadata()
    {
      return this.answeredQuestionsMetadata_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.QuestionTemplatesMetadata getQuestionTemplatesMetadata()
    {
      return this.questionTemplatesMetadata_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasStringDictionaryMetadata();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getStringDictionaryMetadata());
      }
      if (hasQuestionTemplatesMetadata()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getQuestionTemplatesMetadata());
      }
      if (hasAnsweredQuestionsMetadata()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getAnsweredQuestionsMetadata());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.StringDictionaryMetadata getStringDictionaryMetadata()
    {
      return this.stringDictionaryMetadata_;
    }
    
    public boolean hasAnsweredQuestionsMetadata()
    {
      return this.hasAnsweredQuestionsMetadata;
    }
    
    public boolean hasQuestionTemplatesMetadata()
    {
      return this.hasQuestionTemplatesMetadata;
    }
    
    public boolean hasStringDictionaryMetadata()
    {
      return this.hasStringDictionaryMetadata;
    }
    
    public TrainingModeMetadata mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.StringDictionaryMetadata localStringDictionaryMetadata = new Sidekick.StringDictionaryMetadata();
          paramCodedInputStreamMicro.readMessage(localStringDictionaryMetadata);
          setStringDictionaryMetadata(localStringDictionaryMetadata);
          break;
        case 18: 
          Sidekick.QuestionTemplatesMetadata localQuestionTemplatesMetadata = new Sidekick.QuestionTemplatesMetadata();
          paramCodedInputStreamMicro.readMessage(localQuestionTemplatesMetadata);
          setQuestionTemplatesMetadata(localQuestionTemplatesMetadata);
          break;
        }
        Sidekick.AnsweredQuestionsMetadata localAnsweredQuestionsMetadata = new Sidekick.AnsweredQuestionsMetadata();
        paramCodedInputStreamMicro.readMessage(localAnsweredQuestionsMetadata);
        setAnsweredQuestionsMetadata(localAnsweredQuestionsMetadata);
      }
    }
    
    public TrainingModeMetadata setAnsweredQuestionsMetadata(Sidekick.AnsweredQuestionsMetadata paramAnsweredQuestionsMetadata)
    {
      if (paramAnsweredQuestionsMetadata == null) {
        throw new NullPointerException();
      }
      this.hasAnsweredQuestionsMetadata = true;
      this.answeredQuestionsMetadata_ = paramAnsweredQuestionsMetadata;
      return this;
    }
    
    public TrainingModeMetadata setQuestionTemplatesMetadata(Sidekick.QuestionTemplatesMetadata paramQuestionTemplatesMetadata)
    {
      if (paramQuestionTemplatesMetadata == null) {
        throw new NullPointerException();
      }
      this.hasQuestionTemplatesMetadata = true;
      this.questionTemplatesMetadata_ = paramQuestionTemplatesMetadata;
      return this;
    }
    
    public TrainingModeMetadata setStringDictionaryMetadata(Sidekick.StringDictionaryMetadata paramStringDictionaryMetadata)
    {
      if (paramStringDictionaryMetadata == null) {
        throw new NullPointerException();
      }
      this.hasStringDictionaryMetadata = true;
      this.stringDictionaryMetadata_ = paramStringDictionaryMetadata;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasStringDictionaryMetadata()) {
        paramCodedOutputStreamMicro.writeMessage(1, getStringDictionaryMetadata());
      }
      if (hasQuestionTemplatesMetadata()) {
        paramCodedOutputStreamMicro.writeMessage(2, getQuestionTemplatesMetadata());
      }
      if (hasAnsweredQuestionsMetadata()) {
        paramCodedOutputStreamMicro.writeMessage(3, getAnsweredQuestionsMetadata());
      }
    }
  }
  
  public static final class TransitStationEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasResponseEpochSeconds;
    private boolean hasScheduleUrl;
    private boolean hasStationId;
    private boolean hasStationName;
    private List<Line> line_ = Collections.emptyList();
    private long responseEpochSeconds_ = 0L;
    private String scheduleUrl_ = "";
    private Sidekick.GeostoreFeatureId stationId_ = null;
    private String stationName_ = "";
    
    public TransitStationEntry addLine(Line paramLine)
    {
      if (paramLine == null) {
        throw new NullPointerException();
      }
      if (this.line_.isEmpty()) {
        this.line_ = new ArrayList();
      }
      this.line_.add(paramLine);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getLineCount()
    {
      return this.line_.size();
    }
    
    public List<Line> getLineList()
    {
      return this.line_;
    }
    
    public long getResponseEpochSeconds()
    {
      return this.responseEpochSeconds_;
    }
    
    public String getScheduleUrl()
    {
      return this.scheduleUrl_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasStationId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getStationId());
      }
      if (hasResponseEpochSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(2, getResponseEpochSeconds());
      }
      if (hasStationName()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getStationName());
      }
      if (hasScheduleUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getScheduleUrl());
      }
      Iterator localIterator = getLineList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, (Line)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public Sidekick.GeostoreFeatureId getStationId()
    {
      return this.stationId_;
    }
    
    public String getStationName()
    {
      return this.stationName_;
    }
    
    public boolean hasResponseEpochSeconds()
    {
      return this.hasResponseEpochSeconds;
    }
    
    public boolean hasScheduleUrl()
    {
      return this.hasScheduleUrl;
    }
    
    public boolean hasStationId()
    {
      return this.hasStationId;
    }
    
    public boolean hasStationName()
    {
      return this.hasStationName;
    }
    
    public TransitStationEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.GeostoreFeatureId localGeostoreFeatureId = new Sidekick.GeostoreFeatureId();
          paramCodedInputStreamMicro.readMessage(localGeostoreFeatureId);
          setStationId(localGeostoreFeatureId);
          break;
        case 16: 
          setResponseEpochSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 26: 
          setStationName(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setScheduleUrl(paramCodedInputStreamMicro.readString());
          break;
        }
        Line localLine = new Line();
        paramCodedInputStreamMicro.readMessage(localLine);
        addLine(localLine);
      }
    }
    
    public TransitStationEntry setResponseEpochSeconds(long paramLong)
    {
      this.hasResponseEpochSeconds = true;
      this.responseEpochSeconds_ = paramLong;
      return this;
    }
    
    public TransitStationEntry setScheduleUrl(String paramString)
    {
      this.hasScheduleUrl = true;
      this.scheduleUrl_ = paramString;
      return this;
    }
    
    public TransitStationEntry setStationId(Sidekick.GeostoreFeatureId paramGeostoreFeatureId)
    {
      if (paramGeostoreFeatureId == null) {
        throw new NullPointerException();
      }
      this.hasStationId = true;
      this.stationId_ = paramGeostoreFeatureId;
      return this;
    }
    
    public TransitStationEntry setStationName(String paramString)
    {
      this.hasStationName = true;
      this.stationName_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasStationId()) {
        paramCodedOutputStreamMicro.writeMessage(1, getStationId());
      }
      if (hasResponseEpochSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(2, getResponseEpochSeconds());
      }
      if (hasStationName()) {
        paramCodedOutputStreamMicro.writeString(3, getStationName());
      }
      if (hasScheduleUrl()) {
        paramCodedOutputStreamMicro.writeString(4, getScheduleUrl());
      }
      Iterator localIterator = getLineList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(5, (Line)localIterator.next());
      }
    }
    
    public static final class Line
      extends MessageMicro
    {
      private int cachedSize = -1;
      private int color_ = 0;
      private List<DepartureGroup> departureGroup_ = Collections.emptyList();
      private boolean hasColor;
      private boolean hasLineIconUrl;
      private boolean hasName;
      private boolean hasTextColor;
      private boolean hasVehicleType;
      private String lineIconUrl_ = "";
      private String name_ = "";
      private int textColor_ = 0;
      private int vehicleType_ = 0;
      
      public Line addDepartureGroup(DepartureGroup paramDepartureGroup)
      {
        if (paramDepartureGroup == null) {
          throw new NullPointerException();
        }
        if (this.departureGroup_.isEmpty()) {
          this.departureGroup_ = new ArrayList();
        }
        this.departureGroup_.add(paramDepartureGroup);
        return this;
      }
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getColor()
      {
        return this.color_;
      }
      
      public List<DepartureGroup> getDepartureGroupList()
      {
        return this.departureGroup_;
      }
      
      public String getLineIconUrl()
      {
        return this.lineIconUrl_;
      }
      
      public String getName()
      {
        return this.name_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasName();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getName());
        }
        if (hasColor()) {
          i += CodedOutputStreamMicro.computeInt32Size(2, getColor());
        }
        if (hasTextColor()) {
          i += CodedOutputStreamMicro.computeInt32Size(3, getTextColor());
        }
        if (hasVehicleType()) {
          i += CodedOutputStreamMicro.computeInt32Size(4, getVehicleType());
        }
        Iterator localIterator = getDepartureGroupList().iterator();
        while (localIterator.hasNext()) {
          i += CodedOutputStreamMicro.computeMessageSize(5, (DepartureGroup)localIterator.next());
        }
        if (hasLineIconUrl()) {
          i += CodedOutputStreamMicro.computeStringSize(6, getLineIconUrl());
        }
        this.cachedSize = i;
        return i;
      }
      
      public int getTextColor()
      {
        return this.textColor_;
      }
      
      public int getVehicleType()
      {
        return this.vehicleType_;
      }
      
      public boolean hasColor()
      {
        return this.hasColor;
      }
      
      public boolean hasLineIconUrl()
      {
        return this.hasLineIconUrl;
      }
      
      public boolean hasName()
      {
        return this.hasName;
      }
      
      public boolean hasTextColor()
      {
        return this.hasTextColor;
      }
      
      public boolean hasVehicleType()
      {
        return this.hasVehicleType;
      }
      
      public Line mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setName(paramCodedInputStreamMicro.readString());
            break;
          case 16: 
            setColor(paramCodedInputStreamMicro.readInt32());
            break;
          case 24: 
            setTextColor(paramCodedInputStreamMicro.readInt32());
            break;
          case 32: 
            setVehicleType(paramCodedInputStreamMicro.readInt32());
            break;
          case 42: 
            DepartureGroup localDepartureGroup = new DepartureGroup();
            paramCodedInputStreamMicro.readMessage(localDepartureGroup);
            addDepartureGroup(localDepartureGroup);
            break;
          }
          setLineIconUrl(paramCodedInputStreamMicro.readString());
        }
      }
      
      public Line setColor(int paramInt)
      {
        this.hasColor = true;
        this.color_ = paramInt;
        return this;
      }
      
      public Line setLineIconUrl(String paramString)
      {
        this.hasLineIconUrl = true;
        this.lineIconUrl_ = paramString;
        return this;
      }
      
      public Line setName(String paramString)
      {
        this.hasName = true;
        this.name_ = paramString;
        return this;
      }
      
      public Line setTextColor(int paramInt)
      {
        this.hasTextColor = true;
        this.textColor_ = paramInt;
        return this;
      }
      
      public Line setVehicleType(int paramInt)
      {
        this.hasVehicleType = true;
        this.vehicleType_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasName()) {
          paramCodedOutputStreamMicro.writeString(1, getName());
        }
        if (hasColor()) {
          paramCodedOutputStreamMicro.writeInt32(2, getColor());
        }
        if (hasTextColor()) {
          paramCodedOutputStreamMicro.writeInt32(3, getTextColor());
        }
        if (hasVehicleType()) {
          paramCodedOutputStreamMicro.writeInt32(4, getVehicleType());
        }
        Iterator localIterator = getDepartureGroupList().iterator();
        while (localIterator.hasNext()) {
          paramCodedOutputStreamMicro.writeMessage(5, (DepartureGroup)localIterator.next());
        }
        if (hasLineIconUrl()) {
          paramCodedOutputStreamMicro.writeString(6, getLineIconUrl());
        }
      }
      
      public static final class DepartureGroup
        extends MessageMicro
      {
        private int cachedSize = -1;
        private List<Departure> departure_ = Collections.emptyList();
        private boolean hasHeadsign;
        private boolean hasLineLongName;
        private String headsign_ = "";
        private String lineLongName_ = "";
        
        public DepartureGroup addDeparture(Departure paramDeparture)
        {
          if (paramDeparture == null) {
            throw new NullPointerException();
          }
          if (this.departure_.isEmpty()) {
            this.departure_ = new ArrayList();
          }
          this.departure_.add(paramDeparture);
          return this;
        }
        
        public int getCachedSize()
        {
          if (this.cachedSize < 0) {
            getSerializedSize();
          }
          return this.cachedSize;
        }
        
        public List<Departure> getDepartureList()
        {
          return this.departure_;
        }
        
        public String getHeadsign()
        {
          return this.headsign_;
        }
        
        public String getLineLongName()
        {
          return this.lineLongName_;
        }
        
        public int getSerializedSize()
        {
          boolean bool = hasHeadsign();
          int i = 0;
          if (bool) {
            i = 0 + CodedOutputStreamMicro.computeStringSize(1, getHeadsign());
          }
          Iterator localIterator = getDepartureList().iterator();
          while (localIterator.hasNext()) {
            i += CodedOutputStreamMicro.computeMessageSize(2, (Departure)localIterator.next());
          }
          if (hasLineLongName()) {
            i += CodedOutputStreamMicro.computeStringSize(3, getLineLongName());
          }
          this.cachedSize = i;
          return i;
        }
        
        public boolean hasHeadsign()
        {
          return this.hasHeadsign;
        }
        
        public boolean hasLineLongName()
        {
          return this.hasLineLongName;
        }
        
        public DepartureGroup mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
          throws IOException
        {
          for (;;)
          {
            int i = paramCodedInputStreamMicro.readTag();
            switch (i)
            {
            default: 
              if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                continue;
              }
            case 0: 
              return this;
            case 10: 
              setHeadsign(paramCodedInputStreamMicro.readString());
              break;
            case 18: 
              Departure localDeparture = new Departure();
              paramCodedInputStreamMicro.readMessage(localDeparture);
              addDeparture(localDeparture);
              break;
            }
            setLineLongName(paramCodedInputStreamMicro.readString());
          }
        }
        
        public DepartureGroup setHeadsign(String paramString)
        {
          this.hasHeadsign = true;
          this.headsign_ = paramString;
          return this;
        }
        
        public DepartureGroup setLineLongName(String paramString)
        {
          this.hasLineLongName = true;
          this.lineLongName_ = paramString;
          return this;
        }
        
        public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
          throws IOException
        {
          if (hasHeadsign()) {
            paramCodedOutputStreamMicro.writeString(1, getHeadsign());
          }
          Iterator localIterator = getDepartureList().iterator();
          while (localIterator.hasNext()) {
            paramCodedOutputStreamMicro.writeMessage(2, (Departure)localIterator.next());
          }
          if (hasLineLongName()) {
            paramCodedOutputStreamMicro.writeString(3, getLineLongName());
          }
        }
        
        public static final class Departure
          extends MessageMicro
        {
          private int cachedSize = -1;
          private boolean hasRelativeArrivalTimeSeconds;
          private boolean hasRelativeDepartureTimeSeconds;
          private int relativeArrivalTimeSeconds_ = 0;
          private int relativeDepartureTimeSeconds_ = 0;
          
          public int getCachedSize()
          {
            if (this.cachedSize < 0) {
              getSerializedSize();
            }
            return this.cachedSize;
          }
          
          public int getRelativeArrivalTimeSeconds()
          {
            return this.relativeArrivalTimeSeconds_;
          }
          
          public int getRelativeDepartureTimeSeconds()
          {
            return this.relativeDepartureTimeSeconds_;
          }
          
          public int getSerializedSize()
          {
            boolean bool = hasRelativeArrivalTimeSeconds();
            int i = 0;
            if (bool) {
              i = 0 + CodedOutputStreamMicro.computeInt32Size(1, getRelativeArrivalTimeSeconds());
            }
            if (hasRelativeDepartureTimeSeconds()) {
              i += CodedOutputStreamMicro.computeInt32Size(2, getRelativeDepartureTimeSeconds());
            }
            this.cachedSize = i;
            return i;
          }
          
          public boolean hasRelativeArrivalTimeSeconds()
          {
            return this.hasRelativeArrivalTimeSeconds;
          }
          
          public boolean hasRelativeDepartureTimeSeconds()
          {
            return this.hasRelativeDepartureTimeSeconds;
          }
          
          public Departure mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
            throws IOException
          {
            for (;;)
            {
              int i = paramCodedInputStreamMicro.readTag();
              switch (i)
              {
              default: 
                if (parseUnknownField(paramCodedInputStreamMicro, i)) {
                  continue;
                }
              case 0: 
                return this;
              case 8: 
                setRelativeArrivalTimeSeconds(paramCodedInputStreamMicro.readInt32());
                break;
              }
              setRelativeDepartureTimeSeconds(paramCodedInputStreamMicro.readInt32());
            }
          }
          
          public Departure setRelativeArrivalTimeSeconds(int paramInt)
          {
            this.hasRelativeArrivalTimeSeconds = true;
            this.relativeArrivalTimeSeconds_ = paramInt;
            return this;
          }
          
          public Departure setRelativeDepartureTimeSeconds(int paramInt)
          {
            this.hasRelativeDepartureTimeSeconds = true;
            this.relativeDepartureTimeSeconds_ = paramInt;
            return this;
          }
          
          public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
            throws IOException
          {
            if (hasRelativeArrivalTimeSeconds()) {
              paramCodedOutputStreamMicro.writeInt32(1, getRelativeArrivalTimeSeconds());
            }
            if (hasRelativeDepartureTimeSeconds()) {
              paramCodedOutputStreamMicro.writeInt32(2, getRelativeDepartureTimeSeconds());
            }
          }
        }
      }
    }
  }
  
  public static final class TranslateEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasSourceLanguage;
    private boolean hasSourceLanguageCode;
    private boolean hasSourceText;
    private boolean hasTargetLanguage;
    private boolean hasTargetLanguageCode;
    private boolean hasTargetText;
    private String sourceLanguageCode_ = "";
    private String sourceLanguage_ = "";
    private String sourceText_ = "";
    private String targetLanguageCode_ = "";
    private String targetLanguage_ = "";
    private String targetText_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSourceLanguage();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getSourceLanguage());
      }
      if (hasSourceLanguageCode()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSourceLanguageCode());
      }
      if (hasSourceText()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getSourceText());
      }
      if (hasTargetLanguage()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getTargetLanguage());
      }
      if (hasTargetLanguageCode()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getTargetLanguageCode());
      }
      if (hasTargetText()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getTargetText());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSourceLanguage()
    {
      return this.sourceLanguage_;
    }
    
    public String getSourceLanguageCode()
    {
      return this.sourceLanguageCode_;
    }
    
    public String getSourceText()
    {
      return this.sourceText_;
    }
    
    public String getTargetLanguage()
    {
      return this.targetLanguage_;
    }
    
    public String getTargetLanguageCode()
    {
      return this.targetLanguageCode_;
    }
    
    public String getTargetText()
    {
      return this.targetText_;
    }
    
    public boolean hasSourceLanguage()
    {
      return this.hasSourceLanguage;
    }
    
    public boolean hasSourceLanguageCode()
    {
      return this.hasSourceLanguageCode;
    }
    
    public boolean hasSourceText()
    {
      return this.hasSourceText;
    }
    
    public boolean hasTargetLanguage()
    {
      return this.hasTargetLanguage;
    }
    
    public boolean hasTargetLanguageCode()
    {
      return this.hasTargetLanguageCode;
    }
    
    public boolean hasTargetText()
    {
      return this.hasTargetText;
    }
    
    public TranslateEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setSourceLanguage(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSourceLanguageCode(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setSourceText(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setTargetLanguage(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          setTargetLanguageCode(paramCodedInputStreamMicro.readString());
          break;
        }
        setTargetText(paramCodedInputStreamMicro.readString());
      }
    }
    
    public TranslateEntry setSourceLanguage(String paramString)
    {
      this.hasSourceLanguage = true;
      this.sourceLanguage_ = paramString;
      return this;
    }
    
    public TranslateEntry setSourceLanguageCode(String paramString)
    {
      this.hasSourceLanguageCode = true;
      this.sourceLanguageCode_ = paramString;
      return this;
    }
    
    public TranslateEntry setSourceText(String paramString)
    {
      this.hasSourceText = true;
      this.sourceText_ = paramString;
      return this;
    }
    
    public TranslateEntry setTargetLanguage(String paramString)
    {
      this.hasTargetLanguage = true;
      this.targetLanguage_ = paramString;
      return this;
    }
    
    public TranslateEntry setTargetLanguageCode(String paramString)
    {
      this.hasTargetLanguageCode = true;
      this.targetLanguageCode_ = paramString;
      return this;
    }
    
    public TranslateEntry setTargetText(String paramString)
    {
      this.hasTargetText = true;
      this.targetText_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSourceLanguage()) {
        paramCodedOutputStreamMicro.writeString(1, getSourceLanguage());
      }
      if (hasSourceLanguageCode()) {
        paramCodedOutputStreamMicro.writeString(2, getSourceLanguageCode());
      }
      if (hasSourceText()) {
        paramCodedOutputStreamMicro.writeString(3, getSourceText());
      }
      if (hasTargetLanguage()) {
        paramCodedOutputStreamMicro.writeString(4, getTargetLanguage());
      }
      if (hasTargetLanguageCode()) {
        paramCodedOutputStreamMicro.writeString(5, getTargetLanguageCode());
      }
      if (hasTargetText()) {
        paramCodedOutputStreamMicro.writeString(6, getTargetText());
      }
    }
  }
  
  public static final class TranslateInPlaceQuery
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasQueryText;
    private boolean hasSourceLanguageCode;
    private boolean hasTargetLanguageCode;
    private String queryText_ = "";
    private String sourceLanguageCode_ = "";
    private String targetLanguageCode_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getQueryText()
    {
      return this.queryText_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasQueryText();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getQueryText());
      }
      if (hasSourceLanguageCode()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSourceLanguageCode());
      }
      if (hasTargetLanguageCode()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getTargetLanguageCode());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSourceLanguageCode()
    {
      return this.sourceLanguageCode_;
    }
    
    public String getTargetLanguageCode()
    {
      return this.targetLanguageCode_;
    }
    
    public boolean hasQueryText()
    {
      return this.hasQueryText;
    }
    
    public boolean hasSourceLanguageCode()
    {
      return this.hasSourceLanguageCode;
    }
    
    public boolean hasTargetLanguageCode()
    {
      return this.hasTargetLanguageCode;
    }
    
    public TranslateInPlaceQuery mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setQueryText(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSourceLanguageCode(paramCodedInputStreamMicro.readString());
          break;
        }
        setTargetLanguageCode(paramCodedInputStreamMicro.readString());
      }
    }
    
    public TranslateInPlaceQuery setQueryText(String paramString)
    {
      this.hasQueryText = true;
      this.queryText_ = paramString;
      return this;
    }
    
    public TranslateInPlaceQuery setSourceLanguageCode(String paramString)
    {
      this.hasSourceLanguageCode = true;
      this.sourceLanguageCode_ = paramString;
      return this;
    }
    
    public TranslateInPlaceQuery setTargetLanguageCode(String paramString)
    {
      this.hasTargetLanguageCode = true;
      this.targetLanguageCode_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasQueryText()) {
        paramCodedOutputStreamMicro.writeString(1, getQueryText());
      }
      if (hasSourceLanguageCode()) {
        paramCodedOutputStreamMicro.writeString(2, getSourceLanguageCode());
      }
      if (hasTargetLanguageCode()) {
        paramCodedOutputStreamMicro.writeString(3, getTargetLanguageCode());
      }
    }
  }
  
  public static final class TranslateInPlaceResponse
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasTranslatedText;
    private String translatedText_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTranslatedText();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTranslatedText());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTranslatedText()
    {
      return this.translatedText_;
    }
    
    public boolean hasTranslatedText()
    {
      return this.hasTranslatedText;
    }
    
    public TranslateInPlaceResponse mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setTranslatedText(paramCodedInputStreamMicro.readString());
      }
    }
    
    public TranslateInPlaceResponse setTranslatedText(String paramString)
    {
      this.hasTranslatedText = true;
      this.translatedText_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTranslatedText()) {
        paramCodedOutputStreamMicro.writeString(1, getTranslatedText());
      }
    }
  }
  
  public static final class TriggerCondition
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<Integer> condition_ = Collections.emptyList();
    private List<Sidekick.DiscUnion> discRegion_ = Collections.emptyList();
    private boolean hasTimeSeconds;
    private List<Sidekick.Location> location_ = Collections.emptyList();
    private long timeSeconds_ = 0L;
    
    public TriggerCondition addCondition(int paramInt)
    {
      if (this.condition_.isEmpty()) {
        this.condition_ = new ArrayList();
      }
      this.condition_.add(Integer.valueOf(paramInt));
      return this;
    }
    
    public TriggerCondition addDiscRegion(Sidekick.DiscUnion paramDiscUnion)
    {
      if (paramDiscUnion == null) {
        throw new NullPointerException();
      }
      if (this.discRegion_.isEmpty()) {
        this.discRegion_ = new ArrayList();
      }
      this.discRegion_.add(paramDiscUnion);
      return this;
    }
    
    public TriggerCondition addLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      if (this.location_.isEmpty()) {
        this.location_ = new ArrayList();
      }
      this.location_.add(paramLocation);
      return this;
    }
    
    public TriggerCondition clearDiscRegion()
    {
      this.discRegion_ = Collections.emptyList();
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getCondition(int paramInt)
    {
      return ((Integer)this.condition_.get(paramInt)).intValue();
    }
    
    public int getConditionCount()
    {
      return this.condition_.size();
    }
    
    public List<Integer> getConditionList()
    {
      return this.condition_;
    }
    
    public Sidekick.DiscUnion getDiscRegion(int paramInt)
    {
      return (Sidekick.DiscUnion)this.discRegion_.get(paramInt);
    }
    
    public int getDiscRegionCount()
    {
      return this.discRegion_.size();
    }
    
    public List<Sidekick.DiscUnion> getDiscRegionList()
    {
      return this.discRegion_;
    }
    
    public int getLocationCount()
    {
      return this.location_.size();
    }
    
    public List<Sidekick.Location> getLocationList()
    {
      return this.location_;
    }
    
    public int getSerializedSize()
    {
      int i = 0;
      Iterator localIterator1 = getConditionList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeInt32SizeNoTag(((Integer)localIterator1.next()).intValue());
      }
      int j = 0 + i + 1 * getConditionList().size();
      Iterator localIterator2 = getLocationList().iterator();
      while (localIterator2.hasNext()) {
        j += CodedOutputStreamMicro.computeMessageSize(2, (Sidekick.Location)localIterator2.next());
      }
      if (hasTimeSeconds()) {
        j += CodedOutputStreamMicro.computeInt64Size(3, getTimeSeconds());
      }
      Iterator localIterator3 = getDiscRegionList().iterator();
      while (localIterator3.hasNext()) {
        j += CodedOutputStreamMicro.computeMessageSize(5, (Sidekick.DiscUnion)localIterator3.next());
      }
      this.cachedSize = j;
      return j;
    }
    
    public long getTimeSeconds()
    {
      return this.timeSeconds_;
    }
    
    public boolean hasTimeSeconds()
    {
      return this.hasTimeSeconds;
    }
    
    public TriggerCondition mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 8: 
          addCondition(paramCodedInputStreamMicro.readInt32());
          break;
        case 18: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          addLocation(localLocation);
          break;
        case 24: 
          setTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        }
        Sidekick.DiscUnion localDiscUnion = new Sidekick.DiscUnion();
        paramCodedInputStreamMicro.readMessage(localDiscUnion);
        addDiscRegion(localDiscUnion);
      }
    }
    
    public TriggerCondition setTimeSeconds(long paramLong)
    {
      this.hasTimeSeconds = true;
      this.timeSeconds_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      Iterator localIterator1 = getConditionList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeInt32(1, ((Integer)localIterator1.next()).intValue());
      }
      Iterator localIterator2 = getLocationList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (Sidekick.Location)localIterator2.next());
      }
      if (hasTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(3, getTimeSeconds());
      }
      Iterator localIterator3 = getDiscRegionList().iterator();
      while (localIterator3.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(5, (Sidekick.DiscUnion)localIterator3.next());
      }
    }
  }
  
  public static final class TvEpisodeEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String episodeInfo_ = "";
    private String formattedShowtimeAndStation_ = "";
    private boolean hasEpisodeInfo;
    private boolean hasFormattedShowtimeAndStation;
    private boolean hasImage;
    private boolean hasReasonEntityName;
    private boolean hasStartTimeSecs;
    private boolean hasStationShortName;
    private boolean hasTitle;
    private Sidekick.Photo image_ = null;
    private String reasonEntityName_ = "";
    private long startTimeSecs_ = 0L;
    private String stationShortName_ = "";
    private String title_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getEpisodeInfo()
    {
      return this.episodeInfo_;
    }
    
    public String getFormattedShowtimeAndStation()
    {
      return this.formattedShowtimeAndStation_;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public String getReasonEntityName()
    {
      return this.reasonEntityName_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getImage());
      }
      if (hasStationShortName()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getStationShortName());
      }
      if (hasStartTimeSecs()) {
        i += CodedOutputStreamMicro.computeInt64Size(4, getStartTimeSecs());
      }
      if (hasReasonEntityName()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getReasonEntityName());
      }
      if (hasFormattedShowtimeAndStation()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getFormattedShowtimeAndStation());
      }
      if (hasEpisodeInfo()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getEpisodeInfo());
      }
      this.cachedSize = i;
      return i;
    }
    
    public long getStartTimeSecs()
    {
      return this.startTimeSecs_;
    }
    
    public String getStationShortName()
    {
      return this.stationShortName_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasEpisodeInfo()
    {
      return this.hasEpisodeInfo;
    }
    
    public boolean hasFormattedShowtimeAndStation()
    {
      return this.hasFormattedShowtimeAndStation;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasReasonEntityName()
    {
      return this.hasReasonEntityName;
    }
    
    public boolean hasStartTimeSecs()
    {
      return this.hasStartTimeSecs;
    }
    
    public boolean hasStationShortName()
    {
      return this.hasStationShortName;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public TvEpisodeEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 26: 
          setStationShortName(paramCodedInputStreamMicro.readString());
          break;
        case 32: 
          setStartTimeSecs(paramCodedInputStreamMicro.readInt64());
          break;
        case 42: 
          setReasonEntityName(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setFormattedShowtimeAndStation(paramCodedInputStreamMicro.readString());
          break;
        }
        setEpisodeInfo(paramCodedInputStreamMicro.readString());
      }
    }
    
    public TvEpisodeEntry setEpisodeInfo(String paramString)
    {
      this.hasEpisodeInfo = true;
      this.episodeInfo_ = paramString;
      return this;
    }
    
    public TvEpisodeEntry setFormattedShowtimeAndStation(String paramString)
    {
      this.hasFormattedShowtimeAndStation = true;
      this.formattedShowtimeAndStation_ = paramString;
      return this;
    }
    
    public TvEpisodeEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public TvEpisodeEntry setReasonEntityName(String paramString)
    {
      this.hasReasonEntityName = true;
      this.reasonEntityName_ = paramString;
      return this;
    }
    
    public TvEpisodeEntry setStartTimeSecs(long paramLong)
    {
      this.hasStartTimeSecs = true;
      this.startTimeSecs_ = paramLong;
      return this;
    }
    
    public TvEpisodeEntry setStationShortName(String paramString)
    {
      this.hasStationShortName = true;
      this.stationShortName_ = paramString;
      return this;
    }
    
    public TvEpisodeEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(2, getImage());
      }
      if (hasStationShortName()) {
        paramCodedOutputStreamMicro.writeString(3, getStationShortName());
      }
      if (hasStartTimeSecs()) {
        paramCodedOutputStreamMicro.writeInt64(4, getStartTimeSecs());
      }
      if (hasReasonEntityName()) {
        paramCodedOutputStreamMicro.writeString(5, getReasonEntityName());
      }
      if (hasFormattedShowtimeAndStation()) {
        paramCodedOutputStreamMicro.writeString(6, getFormattedShowtimeAndStation());
      }
      if (hasEpisodeInfo()) {
        paramCodedOutputStreamMicro.writeString(7, getEpisodeInfo());
      }
    }
  }
  
  public static final class TvKnowledgeEntry
    extends MessageMicro
  {
    private Sidekick.Destination attributionDestination_ = null;
    private int cachedSize = -1;
    private Sidekick.ClickAction clickAction_ = null;
    private Sidekick.Destination destination_ = null;
    private List<Sidekick.KnowledgeFact> fact_ = Collections.emptyList();
    private boolean hasAttributionDestination;
    private boolean hasClickAction;
    private boolean hasDestination;
    private boolean hasLastMentionedTimeDescription;
    private boolean hasPhoto;
    private boolean hasSnippet;
    private boolean hasSnippetAttribution;
    private boolean hasSnippetAttributionAction;
    private boolean hasSubTitle;
    private boolean hasTitle;
    private String lastMentionedTimeDescription_ = "";
    private Sidekick.Photo photo_ = null;
    private Sidekick.ClickAction snippetAttributionAction_ = null;
    private String snippetAttribution_ = "";
    private String snippet_ = "";
    private String subTitle_ = "";
    private String title_ = "";
    
    public TvKnowledgeEntry addFact(Sidekick.KnowledgeFact paramKnowledgeFact)
    {
      if (paramKnowledgeFact == null) {
        throw new NullPointerException();
      }
      if (this.fact_.isEmpty()) {
        this.fact_ = new ArrayList();
      }
      this.fact_.add(paramKnowledgeFact);
      return this;
    }
    
    public Sidekick.Destination getAttributionDestination()
    {
      return this.attributionDestination_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ClickAction getClickAction()
    {
      return this.clickAction_;
    }
    
    public Sidekick.Destination getDestination()
    {
      return this.destination_;
    }
    
    public List<Sidekick.KnowledgeFact> getFactList()
    {
      return this.fact_;
    }
    
    public String getLastMentionedTimeDescription()
    {
      return this.lastMentionedTimeDescription_;
    }
    
    public Sidekick.Photo getPhoto()
    {
      return this.photo_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      if (hasSubTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getSubTitle());
      }
      if (hasSnippet()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getSnippet());
      }
      if (hasSnippetAttribution()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getSnippetAttribution());
      }
      if (hasAttributionDestination()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getAttributionDestination());
      }
      Iterator localIterator = getFactList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, (Sidekick.KnowledgeFact)localIterator.next());
      }
      if (hasLastMentionedTimeDescription()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getLastMentionedTimeDescription());
      }
      if (hasPhoto()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, getPhoto());
      }
      if (hasDestination()) {
        i += CodedOutputStreamMicro.computeMessageSize(9, getDestination());
      }
      if (hasSnippetAttributionAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(10, getSnippetAttributionAction());
      }
      if (hasClickAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(11, getClickAction());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSnippet()
    {
      return this.snippet_;
    }
    
    public String getSnippetAttribution()
    {
      return this.snippetAttribution_;
    }
    
    public Sidekick.ClickAction getSnippetAttributionAction()
    {
      return this.snippetAttributionAction_;
    }
    
    public String getSubTitle()
    {
      return this.subTitle_;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasAttributionDestination()
    {
      return this.hasAttributionDestination;
    }
    
    public boolean hasClickAction()
    {
      return this.hasClickAction;
    }
    
    public boolean hasDestination()
    {
      return this.hasDestination;
    }
    
    public boolean hasLastMentionedTimeDescription()
    {
      return this.hasLastMentionedTimeDescription;
    }
    
    public boolean hasPhoto()
    {
      return this.hasPhoto;
    }
    
    public boolean hasSnippet()
    {
      return this.hasSnippet;
    }
    
    public boolean hasSnippetAttribution()
    {
      return this.hasSnippetAttribution;
    }
    
    public boolean hasSnippetAttributionAction()
    {
      return this.hasSnippetAttributionAction;
    }
    
    public boolean hasSubTitle()
    {
      return this.hasSubTitle;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public TvKnowledgeEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setSubTitle(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setSnippet(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          setSnippetAttribution(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          Sidekick.Destination localDestination2 = new Sidekick.Destination();
          paramCodedInputStreamMicro.readMessage(localDestination2);
          setAttributionDestination(localDestination2);
          break;
        case 50: 
          Sidekick.KnowledgeFact localKnowledgeFact = new Sidekick.KnowledgeFact();
          paramCodedInputStreamMicro.readMessage(localKnowledgeFact);
          addFact(localKnowledgeFact);
          break;
        case 58: 
          setLastMentionedTimeDescription(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setPhoto(localPhoto);
          break;
        case 74: 
          Sidekick.Destination localDestination1 = new Sidekick.Destination();
          paramCodedInputStreamMicro.readMessage(localDestination1);
          setDestination(localDestination1);
          break;
        case 82: 
          Sidekick.ClickAction localClickAction2 = new Sidekick.ClickAction();
          paramCodedInputStreamMicro.readMessage(localClickAction2);
          setSnippetAttributionAction(localClickAction2);
          break;
        }
        Sidekick.ClickAction localClickAction1 = new Sidekick.ClickAction();
        paramCodedInputStreamMicro.readMessage(localClickAction1);
        setClickAction(localClickAction1);
      }
    }
    
    public TvKnowledgeEntry setAttributionDestination(Sidekick.Destination paramDestination)
    {
      if (paramDestination == null) {
        throw new NullPointerException();
      }
      this.hasAttributionDestination = true;
      this.attributionDestination_ = paramDestination;
      return this;
    }
    
    public TvKnowledgeEntry setClickAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasClickAction = true;
      this.clickAction_ = paramClickAction;
      return this;
    }
    
    public TvKnowledgeEntry setDestination(Sidekick.Destination paramDestination)
    {
      if (paramDestination == null) {
        throw new NullPointerException();
      }
      this.hasDestination = true;
      this.destination_ = paramDestination;
      return this;
    }
    
    public TvKnowledgeEntry setLastMentionedTimeDescription(String paramString)
    {
      this.hasLastMentionedTimeDescription = true;
      this.lastMentionedTimeDescription_ = paramString;
      return this;
    }
    
    public TvKnowledgeEntry setPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasPhoto = true;
      this.photo_ = paramPhoto;
      return this;
    }
    
    public TvKnowledgeEntry setSnippet(String paramString)
    {
      this.hasSnippet = true;
      this.snippet_ = paramString;
      return this;
    }
    
    public TvKnowledgeEntry setSnippetAttribution(String paramString)
    {
      this.hasSnippetAttribution = true;
      this.snippetAttribution_ = paramString;
      return this;
    }
    
    public TvKnowledgeEntry setSnippetAttributionAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasSnippetAttributionAction = true;
      this.snippetAttributionAction_ = paramClickAction;
      return this;
    }
    
    public TvKnowledgeEntry setSubTitle(String paramString)
    {
      this.hasSubTitle = true;
      this.subTitle_ = paramString;
      return this;
    }
    
    public TvKnowledgeEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      if (hasSubTitle()) {
        paramCodedOutputStreamMicro.writeString(2, getSubTitle());
      }
      if (hasSnippet()) {
        paramCodedOutputStreamMicro.writeString(3, getSnippet());
      }
      if (hasSnippetAttribution()) {
        paramCodedOutputStreamMicro.writeString(4, getSnippetAttribution());
      }
      if (hasAttributionDestination()) {
        paramCodedOutputStreamMicro.writeMessage(5, getAttributionDestination());
      }
      Iterator localIterator = getFactList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(6, (Sidekick.KnowledgeFact)localIterator.next());
      }
      if (hasLastMentionedTimeDescription()) {
        paramCodedOutputStreamMicro.writeString(7, getLastMentionedTimeDescription());
      }
      if (hasPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(8, getPhoto());
      }
      if (hasDestination()) {
        paramCodedOutputStreamMicro.writeMessage(9, getDestination());
      }
      if (hasSnippetAttributionAction()) {
        paramCodedOutputStreamMicro.writeMessage(10, getSnippetAttributionAction());
      }
      if (hasClickAction()) {
        paramCodedOutputStreamMicro.writeMessage(11, getClickAction());
      }
    }
  }
  
  public static final class TvMusicEntry
    extends MessageMicro
  {
    private String albumName_ = "";
    private String artistName_ = "";
    private int cachedSize = -1;
    private List<Sidekick.ClickAction> clickAction_ = Collections.emptyList();
    private boolean hasAlbumName;
    private boolean hasArtistName;
    private boolean hasLastMentionedTimeDescription;
    private boolean hasPhoto;
    private boolean hasSongName;
    private String lastMentionedTimeDescription_ = "";
    private Sidekick.Photo photo_ = null;
    private String songName_ = "";
    
    public TvMusicEntry addClickAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      if (this.clickAction_.isEmpty()) {
        this.clickAction_ = new ArrayList();
      }
      this.clickAction_.add(paramClickAction);
      return this;
    }
    
    public String getAlbumName()
    {
      return this.albumName_;
    }
    
    public String getArtistName()
    {
      return this.artistName_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.ClickAction getClickAction(int paramInt)
    {
      return (Sidekick.ClickAction)this.clickAction_.get(paramInt);
    }
    
    public int getClickActionCount()
    {
      return this.clickAction_.size();
    }
    
    public List<Sidekick.ClickAction> getClickActionList()
    {
      return this.clickAction_;
    }
    
    public String getLastMentionedTimeDescription()
    {
      return this.lastMentionedTimeDescription_;
    }
    
    public Sidekick.Photo getPhoto()
    {
      return this.photo_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasSongName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getSongName());
      }
      if (hasArtistName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getArtistName());
      }
      if (hasPhoto()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getPhoto());
      }
      if (hasLastMentionedTimeDescription()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getLastMentionedTimeDescription());
      }
      if (hasAlbumName()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getAlbumName());
      }
      Iterator localIterator = getClickActionList().iterator();
      while (localIterator.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, (Sidekick.ClickAction)localIterator.next());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getSongName()
    {
      return this.songName_;
    }
    
    public boolean hasAlbumName()
    {
      return this.hasAlbumName;
    }
    
    public boolean hasArtistName()
    {
      return this.hasArtistName;
    }
    
    public boolean hasLastMentionedTimeDescription()
    {
      return this.hasLastMentionedTimeDescription;
    }
    
    public boolean hasPhoto()
    {
      return this.hasPhoto;
    }
    
    public boolean hasSongName()
    {
      return this.hasSongName;
    }
    
    public TvMusicEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setSongName(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setArtistName(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setPhoto(localPhoto);
          break;
        case 42: 
          setLastMentionedTimeDescription(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setAlbumName(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
        paramCodedInputStreamMicro.readMessage(localClickAction);
        addClickAction(localClickAction);
      }
    }
    
    public TvMusicEntry setAlbumName(String paramString)
    {
      this.hasAlbumName = true;
      this.albumName_ = paramString;
      return this;
    }
    
    public TvMusicEntry setArtistName(String paramString)
    {
      this.hasArtistName = true;
      this.artistName_ = paramString;
      return this;
    }
    
    public TvMusicEntry setLastMentionedTimeDescription(String paramString)
    {
      this.hasLastMentionedTimeDescription = true;
      this.lastMentionedTimeDescription_ = paramString;
      return this;
    }
    
    public TvMusicEntry setPhoto(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasPhoto = true;
      this.photo_ = paramPhoto;
      return this;
    }
    
    public TvMusicEntry setSongName(String paramString)
    {
      this.hasSongName = true;
      this.songName_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasSongName()) {
        paramCodedOutputStreamMicro.writeString(1, getSongName());
      }
      if (hasArtistName()) {
        paramCodedOutputStreamMicro.writeString(2, getArtistName());
      }
      if (hasPhoto()) {
        paramCodedOutputStreamMicro.writeMessage(3, getPhoto());
      }
      if (hasLastMentionedTimeDescription()) {
        paramCodedOutputStreamMicro.writeString(5, getLastMentionedTimeDescription());
      }
      if (hasAlbumName()) {
        paramCodedOutputStreamMicro.writeString(6, getAlbumName());
      }
      Iterator localIterator = getClickActionList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(7, (Sidekick.ClickAction)localIterator.next());
      }
    }
  }
  
  public static final class TvNewsEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasLastMentionedTimeDescription;
    private boolean hasNewsClusterAction;
    private boolean hasNewsEntry;
    private String lastMentionedTimeDescription_ = "";
    private Sidekick.ClickAction newsClusterAction_ = null;
    private Sidekick.NewsEntry newsEntry_ = null;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getLastMentionedTimeDescription()
    {
      return this.lastMentionedTimeDescription_;
    }
    
    public Sidekick.ClickAction getNewsClusterAction()
    {
      return this.newsClusterAction_;
    }
    
    public Sidekick.NewsEntry getNewsEntry()
    {
      return this.newsEntry_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasNewsEntry();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getNewsEntry());
      }
      if (hasLastMentionedTimeDescription()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getLastMentionedTimeDescription());
      }
      if (hasNewsClusterAction()) {
        i += CodedOutputStreamMicro.computeMessageSize(8, getNewsClusterAction());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasLastMentionedTimeDescription()
    {
      return this.hasLastMentionedTimeDescription;
    }
    
    public boolean hasNewsClusterAction()
    {
      return this.hasNewsClusterAction;
    }
    
    public boolean hasNewsEntry()
    {
      return this.hasNewsEntry;
    }
    
    public TvNewsEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.NewsEntry localNewsEntry = new Sidekick.NewsEntry();
          paramCodedInputStreamMicro.readMessage(localNewsEntry);
          setNewsEntry(localNewsEntry);
          break;
        case 18: 
          setLastMentionedTimeDescription(paramCodedInputStreamMicro.readString());
          break;
        }
        Sidekick.ClickAction localClickAction = new Sidekick.ClickAction();
        paramCodedInputStreamMicro.readMessage(localClickAction);
        setNewsClusterAction(localClickAction);
      }
    }
    
    public TvNewsEntry setLastMentionedTimeDescription(String paramString)
    {
      this.hasLastMentionedTimeDescription = true;
      this.lastMentionedTimeDescription_ = paramString;
      return this;
    }
    
    public TvNewsEntry setNewsClusterAction(Sidekick.ClickAction paramClickAction)
    {
      if (paramClickAction == null) {
        throw new NullPointerException();
      }
      this.hasNewsClusterAction = true;
      this.newsClusterAction_ = paramClickAction;
      return this;
    }
    
    public TvNewsEntry setNewsEntry(Sidekick.NewsEntry paramNewsEntry)
    {
      if (paramNewsEntry == null) {
        throw new NullPointerException();
      }
      this.hasNewsEntry = true;
      this.newsEntry_ = paramNewsEntry;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasNewsEntry()) {
        paramCodedOutputStreamMicro.writeMessage(1, getNewsEntry());
      }
      if (hasLastMentionedTimeDescription()) {
        paramCodedOutputStreamMicro.writeString(2, getLastMentionedTimeDescription());
      }
      if (hasNewsClusterAction()) {
        paramCodedOutputStreamMicro.writeMessage(8, getNewsClusterAction());
      }
    }
  }
  
  public static final class TvRecognitionEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasNetworkDeviceName;
    private String networkDeviceName_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getNetworkDeviceName()
    {
      return this.networkDeviceName_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasNetworkDeviceName();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getNetworkDeviceName());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasNetworkDeviceName()
    {
      return this.hasNetworkDeviceName;
    }
    
    public TvRecognitionEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setNetworkDeviceName(paramCodedInputStreamMicro.readString());
      }
    }
    
    public TvRecognitionEntry setNetworkDeviceName(String paramString)
    {
      this.hasNetworkDeviceName = true;
      this.networkDeviceName_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasNetworkDeviceName()) {
        paramCodedOutputStreamMicro.writeString(1, getNetworkDeviceName());
      }
    }
  }
  
  public static final class UploadCalendarData
    extends MessageMicro
  {
    private String accountHash_ = "";
    private int cachedSize = -1;
    private long endTimeSeconds_ = 0L;
    private boolean hasAccountHash;
    private boolean hasEndTimeSeconds;
    private boolean hasHash;
    private boolean hasLocation;
    private boolean hasSelfAttendeeStatus;
    private boolean hasStartTimeSeconds;
    private String hash_ = "";
    private Sidekick.Location location_ = null;
    private int selfAttendeeStatus_ = 0;
    private long startTimeSeconds_ = 0L;
    
    public String getAccountHash()
    {
      return this.accountHash_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getEndTimeSeconds()
    {
      return this.endTimeSeconds_;
    }
    
    public String getHash()
    {
      return this.hash_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public int getSelfAttendeeStatus()
    {
      return this.selfAttendeeStatus_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasHash();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getHash());
      }
      if (hasLocation()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, getLocation());
      }
      if (hasStartTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(3, getStartTimeSeconds());
      }
      if (hasEndTimeSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(4, getEndTimeSeconds());
      }
      if (hasSelfAttendeeStatus()) {
        i += CodedOutputStreamMicro.computeInt32Size(5, getSelfAttendeeStatus());
      }
      if (hasAccountHash()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getAccountHash());
      }
      this.cachedSize = i;
      return i;
    }
    
    public long getStartTimeSeconds()
    {
      return this.startTimeSeconds_;
    }
    
    public boolean hasAccountHash()
    {
      return this.hasAccountHash;
    }
    
    public boolean hasEndTimeSeconds()
    {
      return this.hasEndTimeSeconds;
    }
    
    public boolean hasHash()
    {
      return this.hasHash;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasSelfAttendeeStatus()
    {
      return this.hasSelfAttendeeStatus;
    }
    
    public boolean hasStartTimeSeconds()
    {
      return this.hasStartTimeSeconds;
    }
    
    public UploadCalendarData mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setHash(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 24: 
          setStartTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 32: 
          setEndTimeSeconds(paramCodedInputStreamMicro.readInt64());
          break;
        case 40: 
          setSelfAttendeeStatus(paramCodedInputStreamMicro.readInt32());
          break;
        }
        setAccountHash(paramCodedInputStreamMicro.readString());
      }
    }
    
    public UploadCalendarData setAccountHash(String paramString)
    {
      this.hasAccountHash = true;
      this.accountHash_ = paramString;
      return this;
    }
    
    public UploadCalendarData setEndTimeSeconds(long paramLong)
    {
      this.hasEndTimeSeconds = true;
      this.endTimeSeconds_ = paramLong;
      return this;
    }
    
    public UploadCalendarData setHash(String paramString)
    {
      this.hasHash = true;
      this.hash_ = paramString;
      return this;
    }
    
    public UploadCalendarData setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public UploadCalendarData setSelfAttendeeStatus(int paramInt)
    {
      this.hasSelfAttendeeStatus = true;
      this.selfAttendeeStatus_ = paramInt;
      return this;
    }
    
    public UploadCalendarData setStartTimeSeconds(long paramLong)
    {
      this.hasStartTimeSeconds = true;
      this.startTimeSeconds_ = paramLong;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasHash()) {
        paramCodedOutputStreamMicro.writeString(1, getHash());
      }
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(2, getLocation());
      }
      if (hasStartTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(3, getStartTimeSeconds());
      }
      if (hasEndTimeSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(4, getEndTimeSeconds());
      }
      if (hasSelfAttendeeStatus()) {
        paramCodedOutputStreamMicro.writeInt32(5, getSelfAttendeeStatus());
      }
      if (hasAccountHash()) {
        paramCodedOutputStreamMicro.writeString(6, getAccountHash());
      }
    }
  }
  
  public static final class VideoGameEntry
    extends MessageMicro
  {
    private String availability_ = "";
    private int cachedSize = -1;
    private boolean hasAvailability;
    private boolean hasImage;
    private boolean hasReasonEntityName;
    private boolean hasReleaseDateSecs;
    private boolean hasTitle;
    private Sidekick.Photo image_ = null;
    private List<String> platform_ = Collections.emptyList();
    private String reasonEntityName_ = "";
    private long releaseDateSecs_ = 0L;
    private String title_ = "";
    
    public VideoGameEntry addPlatform(String paramString)
    {
      if (paramString == null) {
        throw new NullPointerException();
      }
      if (this.platform_.isEmpty()) {
        this.platform_ = new ArrayList();
      }
      this.platform_.add(paramString);
      return this;
    }
    
    public String getAvailability()
    {
      return this.availability_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public List<String> getPlatformList()
    {
      return this.platform_;
    }
    
    public String getReasonEntityName()
    {
      return this.reasonEntityName_;
    }
    
    public long getReleaseDateSecs()
    {
      return this.releaseDateSecs_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      int j = 0;
      Iterator localIterator = getPlatformList().iterator();
      while (localIterator.hasNext()) {
        j += CodedOutputStreamMicro.computeStringSizeNoTag((String)localIterator.next());
      }
      int k = i + j + 1 * getPlatformList().size();
      if (hasImage()) {
        k += CodedOutputStreamMicro.computeMessageSize(3, getImage());
      }
      if (hasReleaseDateSecs()) {
        k += CodedOutputStreamMicro.computeInt64Size(4, getReleaseDateSecs());
      }
      if (hasReasonEntityName()) {
        k += CodedOutputStreamMicro.computeStringSize(5, getReasonEntityName());
      }
      if (hasAvailability()) {
        k += CodedOutputStreamMicro.computeStringSize(6, getAvailability());
      }
      this.cachedSize = k;
      return k;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasAvailability()
    {
      return this.hasAvailability;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasReasonEntityName()
    {
      return this.hasReasonEntityName;
    }
    
    public boolean hasReleaseDateSecs()
    {
      return this.hasReleaseDateSecs;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public VideoGameEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          addPlatform(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        case 32: 
          setReleaseDateSecs(paramCodedInputStreamMicro.readInt64());
          break;
        case 42: 
          setReasonEntityName(paramCodedInputStreamMicro.readString());
          break;
        }
        setAvailability(paramCodedInputStreamMicro.readString());
      }
    }
    
    public VideoGameEntry setAvailability(String paramString)
    {
      this.hasAvailability = true;
      this.availability_ = paramString;
      return this;
    }
    
    public VideoGameEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public VideoGameEntry setReasonEntityName(String paramString)
    {
      this.hasReasonEntityName = true;
      this.reasonEntityName_ = paramString;
      return this;
    }
    
    public VideoGameEntry setReleaseDateSecs(long paramLong)
    {
      this.hasReleaseDateSecs = true;
      this.releaseDateSecs_ = paramLong;
      return this;
    }
    
    public VideoGameEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
      Iterator localIterator = getPlatformList().iterator();
      while (localIterator.hasNext()) {
        paramCodedOutputStreamMicro.writeString(2, (String)localIterator.next());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(3, getImage());
      }
      if (hasReleaseDateSecs()) {
        paramCodedOutputStreamMicro.writeInt64(4, getReleaseDateSecs());
      }
      if (hasReasonEntityName()) {
        paramCodedOutputStreamMicro.writeString(5, getReasonEntityName());
      }
      if (hasAvailability()) {
        paramCodedOutputStreamMicro.writeString(6, getAvailability());
      }
    }
  }
  
  public static final class WalletLoyaltyEntry
    extends MessageMicro
  {
    private String barcodeAlternateText_ = "";
    private float barcodeAspectRatio_ = 0.0F;
    private Sidekick.Photo barcodeImage_ = null;
    private int cachedSize = -1;
    private boolean hasBarcodeAlternateText;
    private boolean hasBarcodeAspectRatio;
    private boolean hasBarcodeImage;
    private boolean hasId;
    private boolean hasLinkToWallet;
    private boolean hasPointsMsg;
    private boolean hasProgramLogoImage;
    private boolean hasProgramName;
    private boolean hasRedemptionCode;
    private String id_ = "";
    private String linkToWallet_ = "";
    private String pointsMsg_ = "";
    private Sidekick.Photo programLogoImage_ = null;
    private String programName_ = "";
    private String redemptionCode_ = "";
    
    public String getBarcodeAlternateText()
    {
      return this.barcodeAlternateText_;
    }
    
    public float getBarcodeAspectRatio()
    {
      return this.barcodeAspectRatio_;
    }
    
    public Sidekick.Photo getBarcodeImage()
    {
      return this.barcodeImage_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getId()
    {
      return this.id_;
    }
    
    public String getLinkToWallet()
    {
      return this.linkToWallet_;
    }
    
    public String getPointsMsg()
    {
      return this.pointsMsg_;
    }
    
    public Sidekick.Photo getProgramLogoImage()
    {
      return this.programLogoImage_;
    }
    
    public String getProgramName()
    {
      return this.programName_;
    }
    
    public String getRedemptionCode()
    {
      return this.redemptionCode_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getId());
      }
      if (hasProgramName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getProgramName());
      }
      if (hasProgramLogoImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(3, getProgramLogoImage());
      }
      if (hasBarcodeImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getBarcodeImage());
      }
      if (hasBarcodeAlternateText()) {
        i += CodedOutputStreamMicro.computeStringSize(5, getBarcodeAlternateText());
      }
      if (hasLinkToWallet()) {
        i += CodedOutputStreamMicro.computeStringSize(6, getLinkToWallet());
      }
      if (hasPointsMsg()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getPointsMsg());
      }
      if (hasRedemptionCode()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getRedemptionCode());
      }
      if (hasBarcodeAspectRatio()) {
        i += CodedOutputStreamMicro.computeFloatSize(9, getBarcodeAspectRatio());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasBarcodeAlternateText()
    {
      return this.hasBarcodeAlternateText;
    }
    
    public boolean hasBarcodeAspectRatio()
    {
      return this.hasBarcodeAspectRatio;
    }
    
    public boolean hasBarcodeImage()
    {
      return this.hasBarcodeImage;
    }
    
    public boolean hasId()
    {
      return this.hasId;
    }
    
    public boolean hasLinkToWallet()
    {
      return this.hasLinkToWallet;
    }
    
    public boolean hasPointsMsg()
    {
      return this.hasPointsMsg;
    }
    
    public boolean hasProgramLogoImage()
    {
      return this.hasProgramLogoImage;
    }
    
    public boolean hasProgramName()
    {
      return this.hasProgramName;
    }
    
    public boolean hasRedemptionCode()
    {
      return this.hasRedemptionCode;
    }
    
    public WalletLoyaltyEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setId(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setProgramName(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          Sidekick.Photo localPhoto2 = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto2);
          setProgramLogoImage(localPhoto2);
          break;
        case 34: 
          Sidekick.Photo localPhoto1 = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto1);
          setBarcodeImage(localPhoto1);
          break;
        case 42: 
          setBarcodeAlternateText(paramCodedInputStreamMicro.readString());
          break;
        case 50: 
          setLinkToWallet(paramCodedInputStreamMicro.readString());
          break;
        case 58: 
          setPointsMsg(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          setRedemptionCode(paramCodedInputStreamMicro.readString());
          break;
        }
        setBarcodeAspectRatio(paramCodedInputStreamMicro.readFloat());
      }
    }
    
    public WalletLoyaltyEntry setBarcodeAlternateText(String paramString)
    {
      this.hasBarcodeAlternateText = true;
      this.barcodeAlternateText_ = paramString;
      return this;
    }
    
    public WalletLoyaltyEntry setBarcodeAspectRatio(float paramFloat)
    {
      this.hasBarcodeAspectRatio = true;
      this.barcodeAspectRatio_ = paramFloat;
      return this;
    }
    
    public WalletLoyaltyEntry setBarcodeImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasBarcodeImage = true;
      this.barcodeImage_ = paramPhoto;
      return this;
    }
    
    public WalletLoyaltyEntry setId(String paramString)
    {
      this.hasId = true;
      this.id_ = paramString;
      return this;
    }
    
    public WalletLoyaltyEntry setLinkToWallet(String paramString)
    {
      this.hasLinkToWallet = true;
      this.linkToWallet_ = paramString;
      return this;
    }
    
    public WalletLoyaltyEntry setPointsMsg(String paramString)
    {
      this.hasPointsMsg = true;
      this.pointsMsg_ = paramString;
      return this;
    }
    
    public WalletLoyaltyEntry setProgramLogoImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasProgramLogoImage = true;
      this.programLogoImage_ = paramPhoto;
      return this;
    }
    
    public WalletLoyaltyEntry setProgramName(String paramString)
    {
      this.hasProgramName = true;
      this.programName_ = paramString;
      return this;
    }
    
    public WalletLoyaltyEntry setRedemptionCode(String paramString)
    {
      this.hasRedemptionCode = true;
      this.redemptionCode_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasId()) {
        paramCodedOutputStreamMicro.writeString(1, getId());
      }
      if (hasProgramName()) {
        paramCodedOutputStreamMicro.writeString(2, getProgramName());
      }
      if (hasProgramLogoImage()) {
        paramCodedOutputStreamMicro.writeMessage(3, getProgramLogoImage());
      }
      if (hasBarcodeImage()) {
        paramCodedOutputStreamMicro.writeMessage(4, getBarcodeImage());
      }
      if (hasBarcodeAlternateText()) {
        paramCodedOutputStreamMicro.writeString(5, getBarcodeAlternateText());
      }
      if (hasLinkToWallet()) {
        paramCodedOutputStreamMicro.writeString(6, getLinkToWallet());
      }
      if (hasPointsMsg()) {
        paramCodedOutputStreamMicro.writeString(7, getPointsMsg());
      }
      if (hasRedemptionCode()) {
        paramCodedOutputStreamMicro.writeString(8, getRedemptionCode());
      }
      if (hasBarcodeAspectRatio()) {
        paramCodedOutputStreamMicro.writeFloat(9, getBarcodeAspectRatio());
      }
    }
  }
  
  public static final class WalletOfferEntry
    extends MessageMicro
  {
    private String barcodeAlternateText_ = "";
    private float barcodeAspectRatio_ = 0.0F;
    private Sidekick.Photo barcodeImage_ = null;
    private int cachedSize = -1;
    private long expirationTimeMs_ = 0L;
    private boolean hasBarcodeAlternateText;
    private boolean hasBarcodeAspectRatio;
    private boolean hasBarcodeImage;
    private boolean hasExpirationTimeMs;
    private boolean hasId;
    private boolean hasIssuerName;
    private boolean hasLinkToWallet;
    private boolean hasOfferProviderMsg;
    private boolean hasRedemptionCode;
    private boolean hasTitle;
    private boolean hasTitleImage;
    private String id_ = "";
    private String issuerName_ = "";
    private String linkToWallet_ = "";
    private String offerProviderMsg_ = "";
    private String redemptionCode_ = "";
    private Sidekick.Photo titleImage_ = null;
    private String title_ = "";
    
    public String getBarcodeAlternateText()
    {
      return this.barcodeAlternateText_;
    }
    
    public float getBarcodeAspectRatio()
    {
      return this.barcodeAspectRatio_;
    }
    
    public Sidekick.Photo getBarcodeImage()
    {
      return this.barcodeImage_;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public long getExpirationTimeMs()
    {
      return this.expirationTimeMs_;
    }
    
    public String getId()
    {
      return this.id_;
    }
    
    public String getIssuerName()
    {
      return this.issuerName_;
    }
    
    public String getLinkToWallet()
    {
      return this.linkToWallet_;
    }
    
    public String getOfferProviderMsg()
    {
      return this.offerProviderMsg_;
    }
    
    public String getRedemptionCode()
    {
      return this.redemptionCode_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasId();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getId());
      }
      if (hasIssuerName()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getIssuerName());
      }
      if (hasTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getTitle());
      }
      if (hasTitleImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getTitleImage());
      }
      if (hasBarcodeImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getBarcodeImage());
      }
      if (hasExpirationTimeMs()) {
        i += CodedOutputStreamMicro.computeInt64Size(6, getExpirationTimeMs());
      }
      if (hasOfferProviderMsg()) {
        i += CodedOutputStreamMicro.computeStringSize(7, getOfferProviderMsg());
      }
      if (hasLinkToWallet()) {
        i += CodedOutputStreamMicro.computeStringSize(8, getLinkToWallet());
      }
      if (hasRedemptionCode()) {
        i += CodedOutputStreamMicro.computeStringSize(9, getRedemptionCode());
      }
      if (hasBarcodeAlternateText()) {
        i += CodedOutputStreamMicro.computeStringSize(10, getBarcodeAlternateText());
      }
      if (hasBarcodeAspectRatio()) {
        i += CodedOutputStreamMicro.computeFloatSize(11, getBarcodeAspectRatio());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public Sidekick.Photo getTitleImage()
    {
      return this.titleImage_;
    }
    
    public boolean hasBarcodeAlternateText()
    {
      return this.hasBarcodeAlternateText;
    }
    
    public boolean hasBarcodeAspectRatio()
    {
      return this.hasBarcodeAspectRatio;
    }
    
    public boolean hasBarcodeImage()
    {
      return this.hasBarcodeImage;
    }
    
    public boolean hasExpirationTimeMs()
    {
      return this.hasExpirationTimeMs;
    }
    
    public boolean hasId()
    {
      return this.hasId;
    }
    
    public boolean hasIssuerName()
    {
      return this.hasIssuerName;
    }
    
    public boolean hasLinkToWallet()
    {
      return this.hasLinkToWallet;
    }
    
    public boolean hasOfferProviderMsg()
    {
      return this.hasOfferProviderMsg;
    }
    
    public boolean hasRedemptionCode()
    {
      return this.hasRedemptionCode;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public boolean hasTitleImage()
    {
      return this.hasTitleImage;
    }
    
    public WalletOfferEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setId(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setIssuerName(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setTitle(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          Sidekick.Photo localPhoto2 = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto2);
          setTitleImage(localPhoto2);
          break;
        case 42: 
          Sidekick.Photo localPhoto1 = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto1);
          setBarcodeImage(localPhoto1);
          break;
        case 48: 
          setExpirationTimeMs(paramCodedInputStreamMicro.readInt64());
          break;
        case 58: 
          setOfferProviderMsg(paramCodedInputStreamMicro.readString());
          break;
        case 66: 
          setLinkToWallet(paramCodedInputStreamMicro.readString());
          break;
        case 74: 
          setRedemptionCode(paramCodedInputStreamMicro.readString());
          break;
        case 82: 
          setBarcodeAlternateText(paramCodedInputStreamMicro.readString());
          break;
        }
        setBarcodeAspectRatio(paramCodedInputStreamMicro.readFloat());
      }
    }
    
    public WalletOfferEntry setBarcodeAlternateText(String paramString)
    {
      this.hasBarcodeAlternateText = true;
      this.barcodeAlternateText_ = paramString;
      return this;
    }
    
    public WalletOfferEntry setBarcodeAspectRatio(float paramFloat)
    {
      this.hasBarcodeAspectRatio = true;
      this.barcodeAspectRatio_ = paramFloat;
      return this;
    }
    
    public WalletOfferEntry setBarcodeImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasBarcodeImage = true;
      this.barcodeImage_ = paramPhoto;
      return this;
    }
    
    public WalletOfferEntry setExpirationTimeMs(long paramLong)
    {
      this.hasExpirationTimeMs = true;
      this.expirationTimeMs_ = paramLong;
      return this;
    }
    
    public WalletOfferEntry setId(String paramString)
    {
      this.hasId = true;
      this.id_ = paramString;
      return this;
    }
    
    public WalletOfferEntry setIssuerName(String paramString)
    {
      this.hasIssuerName = true;
      this.issuerName_ = paramString;
      return this;
    }
    
    public WalletOfferEntry setLinkToWallet(String paramString)
    {
      this.hasLinkToWallet = true;
      this.linkToWallet_ = paramString;
      return this;
    }
    
    public WalletOfferEntry setOfferProviderMsg(String paramString)
    {
      this.hasOfferProviderMsg = true;
      this.offerProviderMsg_ = paramString;
      return this;
    }
    
    public WalletOfferEntry setRedemptionCode(String paramString)
    {
      this.hasRedemptionCode = true;
      this.redemptionCode_ = paramString;
      return this;
    }
    
    public WalletOfferEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public WalletOfferEntry setTitleImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasTitleImage = true;
      this.titleImage_ = paramPhoto;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasId()) {
        paramCodedOutputStreamMicro.writeString(1, getId());
      }
      if (hasIssuerName()) {
        paramCodedOutputStreamMicro.writeString(2, getIssuerName());
      }
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(3, getTitle());
      }
      if (hasTitleImage()) {
        paramCodedOutputStreamMicro.writeMessage(4, getTitleImage());
      }
      if (hasBarcodeImage()) {
        paramCodedOutputStreamMicro.writeMessage(5, getBarcodeImage());
      }
      if (hasExpirationTimeMs()) {
        paramCodedOutputStreamMicro.writeInt64(6, getExpirationTimeMs());
      }
      if (hasOfferProviderMsg()) {
        paramCodedOutputStreamMicro.writeString(7, getOfferProviderMsg());
      }
      if (hasLinkToWallet()) {
        paramCodedOutputStreamMicro.writeString(8, getLinkToWallet());
      }
      if (hasRedemptionCode()) {
        paramCodedOutputStreamMicro.writeString(9, getRedemptionCode());
      }
      if (hasBarcodeAlternateText()) {
        paramCodedOutputStreamMicro.writeString(10, getBarcodeAlternateText());
      }
      if (hasBarcodeAspectRatio()) {
        paramCodedOutputStreamMicro.writeFloat(11, getBarcodeAspectRatio());
      }
    }
  }
  
  public static final class WeatherEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private List<WeatherPoint> changeDescriptions_ = Collections.emptyList();
    private WeatherPoint currentConditions_ = null;
    private boolean hasCurrentConditions;
    private boolean hasLocation;
    private boolean hasLocationType;
    private boolean hasLongCityName;
    private boolean hasOneboxData;
    private int locationType_ = 1;
    private Sidekick.Location location_ = null;
    private String longCityName_ = "";
    private Sidekick.AuxiliaryMessage oneboxData_ = null;
    private List<WeatherPoint> weatherPoint_ = Collections.emptyList();
    
    public WeatherEntry addChangeDescriptions(WeatherPoint paramWeatherPoint)
    {
      if (paramWeatherPoint == null) {
        throw new NullPointerException();
      }
      if (this.changeDescriptions_.isEmpty()) {
        this.changeDescriptions_ = new ArrayList();
      }
      this.changeDescriptions_.add(paramWeatherPoint);
      return this;
    }
    
    public WeatherEntry addWeatherPoint(WeatherPoint paramWeatherPoint)
    {
      if (paramWeatherPoint == null) {
        throw new NullPointerException();
      }
      if (this.weatherPoint_.isEmpty()) {
        this.weatherPoint_ = new ArrayList();
      }
      this.weatherPoint_.add(paramWeatherPoint);
      return this;
    }
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public List<WeatherPoint> getChangeDescriptionsList()
    {
      return this.changeDescriptions_;
    }
    
    public WeatherPoint getCurrentConditions()
    {
      return this.currentConditions_;
    }
    
    public Sidekick.Location getLocation()
    {
      return this.location_;
    }
    
    public int getLocationType()
    {
      return this.locationType_;
    }
    
    public String getLongCityName()
    {
      return this.longCityName_;
    }
    
    public Sidekick.AuxiliaryMessage getOneboxData()
    {
      return this.oneboxData_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasLocation();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeMessageSize(1, getLocation());
      }
      Iterator localIterator1 = getWeatherPointList().iterator();
      while (localIterator1.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(2, (WeatherPoint)localIterator1.next());
      }
      if (hasLocationType()) {
        i += CodedOutputStreamMicro.computeInt32Size(3, getLocationType());
      }
      if (hasLongCityName()) {
        i += CodedOutputStreamMicro.computeStringSize(4, getLongCityName());
      }
      if (hasOneboxData()) {
        i += CodedOutputStreamMicro.computeMessageSize(5, getOneboxData());
      }
      Iterator localIterator2 = getChangeDescriptionsList().iterator();
      while (localIterator2.hasNext()) {
        i += CodedOutputStreamMicro.computeMessageSize(6, (WeatherPoint)localIterator2.next());
      }
      if (hasCurrentConditions()) {
        i += CodedOutputStreamMicro.computeMessageSize(7, getCurrentConditions());
      }
      this.cachedSize = i;
      return i;
    }
    
    public WeatherPoint getWeatherPoint(int paramInt)
    {
      return (WeatherPoint)this.weatherPoint_.get(paramInt);
    }
    
    public int getWeatherPointCount()
    {
      return this.weatherPoint_.size();
    }
    
    public List<WeatherPoint> getWeatherPointList()
    {
      return this.weatherPoint_;
    }
    
    public boolean hasCurrentConditions()
    {
      return this.hasCurrentConditions;
    }
    
    public boolean hasLocation()
    {
      return this.hasLocation;
    }
    
    public boolean hasLocationType()
    {
      return this.hasLocationType;
    }
    
    public boolean hasLongCityName()
    {
      return this.hasLongCityName;
    }
    
    public boolean hasOneboxData()
    {
      return this.hasOneboxData;
    }
    
    public WeatherEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          Sidekick.Location localLocation = new Sidekick.Location();
          paramCodedInputStreamMicro.readMessage(localLocation);
          setLocation(localLocation);
          break;
        case 18: 
          WeatherPoint localWeatherPoint3 = new WeatherPoint();
          paramCodedInputStreamMicro.readMessage(localWeatherPoint3);
          addWeatherPoint(localWeatherPoint3);
          break;
        case 24: 
          setLocationType(paramCodedInputStreamMicro.readInt32());
          break;
        case 34: 
          setLongCityName(paramCodedInputStreamMicro.readString());
          break;
        case 42: 
          Sidekick.AuxiliaryMessage localAuxiliaryMessage = new Sidekick.AuxiliaryMessage();
          paramCodedInputStreamMicro.readMessage(localAuxiliaryMessage);
          setOneboxData(localAuxiliaryMessage);
          break;
        case 50: 
          WeatherPoint localWeatherPoint2 = new WeatherPoint();
          paramCodedInputStreamMicro.readMessage(localWeatherPoint2);
          addChangeDescriptions(localWeatherPoint2);
          break;
        }
        WeatherPoint localWeatherPoint1 = new WeatherPoint();
        paramCodedInputStreamMicro.readMessage(localWeatherPoint1);
        setCurrentConditions(localWeatherPoint1);
      }
    }
    
    public WeatherEntry setCurrentConditions(WeatherPoint paramWeatherPoint)
    {
      if (paramWeatherPoint == null) {
        throw new NullPointerException();
      }
      this.hasCurrentConditions = true;
      this.currentConditions_ = paramWeatherPoint;
      return this;
    }
    
    public WeatherEntry setLocation(Sidekick.Location paramLocation)
    {
      if (paramLocation == null) {
        throw new NullPointerException();
      }
      this.hasLocation = true;
      this.location_ = paramLocation;
      return this;
    }
    
    public WeatherEntry setLocationType(int paramInt)
    {
      this.hasLocationType = true;
      this.locationType_ = paramInt;
      return this;
    }
    
    public WeatherEntry setLongCityName(String paramString)
    {
      this.hasLongCityName = true;
      this.longCityName_ = paramString;
      return this;
    }
    
    public WeatherEntry setOneboxData(Sidekick.AuxiliaryMessage paramAuxiliaryMessage)
    {
      if (paramAuxiliaryMessage == null) {
        throw new NullPointerException();
      }
      this.hasOneboxData = true;
      this.oneboxData_ = paramAuxiliaryMessage;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasLocation()) {
        paramCodedOutputStreamMicro.writeMessage(1, getLocation());
      }
      Iterator localIterator1 = getWeatherPointList().iterator();
      while (localIterator1.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(2, (WeatherPoint)localIterator1.next());
      }
      if (hasLocationType()) {
        paramCodedOutputStreamMicro.writeInt32(3, getLocationType());
      }
      if (hasLongCityName()) {
        paramCodedOutputStreamMicro.writeString(4, getLongCityName());
      }
      if (hasOneboxData()) {
        paramCodedOutputStreamMicro.writeMessage(5, getOneboxData());
      }
      Iterator localIterator2 = getChangeDescriptionsList().iterator();
      while (localIterator2.hasNext()) {
        paramCodedOutputStreamMicro.writeMessage(6, (WeatherPoint)localIterator2.next());
      }
      if (hasCurrentConditions()) {
        paramCodedOutputStreamMicro.writeMessage(7, getCurrentConditions());
      }
    }
    
    public static final class WeatherPoint
      extends MessageMicro
    {
      private int cachedSize = -1;
      private int chanceOfPrecipitation_ = 0;
      private String description_ = "";
      private boolean hasChanceOfPrecipitation;
      private boolean hasDescription;
      private boolean hasHighTemperature;
      private boolean hasImageUrl;
      private boolean hasLabel;
      private boolean hasLowTemperature;
      private boolean hasTemperatureUnit;
      private boolean hasWind;
      private boolean hasWindSpeed;
      private boolean hasWindUnit;
      private int highTemperature_ = 0;
      private String imageUrl_ = "";
      private String label_ = "";
      private int lowTemperature_ = 0;
      private int temperatureUnit_ = 1;
      private int windSpeed_ = 0;
      private int windUnit_ = 2;
      private String wind_ = "";
      
      public int getCachedSize()
      {
        if (this.cachedSize < 0) {
          getSerializedSize();
        }
        return this.cachedSize;
      }
      
      public int getChanceOfPrecipitation()
      {
        return this.chanceOfPrecipitation_;
      }
      
      public String getDescription()
      {
        return this.description_;
      }
      
      public int getHighTemperature()
      {
        return this.highTemperature_;
      }
      
      public String getImageUrl()
      {
        return this.imageUrl_;
      }
      
      public String getLabel()
      {
        return this.label_;
      }
      
      public int getLowTemperature()
      {
        return this.lowTemperature_;
      }
      
      public int getSerializedSize()
      {
        boolean bool = hasLabel();
        int i = 0;
        if (bool) {
          i = 0 + CodedOutputStreamMicro.computeStringSize(1, getLabel());
        }
        if (hasDescription()) {
          i += CodedOutputStreamMicro.computeStringSize(2, getDescription());
        }
        if (hasImageUrl()) {
          i += CodedOutputStreamMicro.computeStringSize(3, getImageUrl());
        }
        if (hasHighTemperature()) {
          i += CodedOutputStreamMicro.computeInt32Size(4, getHighTemperature());
        }
        if (hasLowTemperature()) {
          i += CodedOutputStreamMicro.computeInt32Size(5, getLowTemperature());
        }
        if (hasTemperatureUnit()) {
          i += CodedOutputStreamMicro.computeInt32Size(6, getTemperatureUnit());
        }
        if (hasChanceOfPrecipitation()) {
          i += CodedOutputStreamMicro.computeInt32Size(7, getChanceOfPrecipitation());
        }
        if (hasWindUnit()) {
          i += CodedOutputStreamMicro.computeInt32Size(8, getWindUnit());
        }
        if (hasWind()) {
          i += CodedOutputStreamMicro.computeStringSize(9, getWind());
        }
        if (hasWindSpeed()) {
          i += CodedOutputStreamMicro.computeInt32Size(10, getWindSpeed());
        }
        this.cachedSize = i;
        return i;
      }
      
      public int getTemperatureUnit()
      {
        return this.temperatureUnit_;
      }
      
      public String getWind()
      {
        return this.wind_;
      }
      
      public int getWindSpeed()
      {
        return this.windSpeed_;
      }
      
      public int getWindUnit()
      {
        return this.windUnit_;
      }
      
      public boolean hasChanceOfPrecipitation()
      {
        return this.hasChanceOfPrecipitation;
      }
      
      public boolean hasDescription()
      {
        return this.hasDescription;
      }
      
      public boolean hasHighTemperature()
      {
        return this.hasHighTemperature;
      }
      
      public boolean hasImageUrl()
      {
        return this.hasImageUrl;
      }
      
      public boolean hasLabel()
      {
        return this.hasLabel;
      }
      
      public boolean hasLowTemperature()
      {
        return this.hasLowTemperature;
      }
      
      public boolean hasTemperatureUnit()
      {
        return this.hasTemperatureUnit;
      }
      
      public boolean hasWind()
      {
        return this.hasWind;
      }
      
      public boolean hasWindSpeed()
      {
        return this.hasWindSpeed;
      }
      
      public boolean hasWindUnit()
      {
        return this.hasWindUnit;
      }
      
      public WeatherPoint mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
        throws IOException
      {
        for (;;)
        {
          int i = paramCodedInputStreamMicro.readTag();
          switch (i)
          {
          default: 
            if (parseUnknownField(paramCodedInputStreamMicro, i)) {
              continue;
            }
          case 0: 
            return this;
          case 10: 
            setLabel(paramCodedInputStreamMicro.readString());
            break;
          case 18: 
            setDescription(paramCodedInputStreamMicro.readString());
            break;
          case 26: 
            setImageUrl(paramCodedInputStreamMicro.readString());
            break;
          case 32: 
            setHighTemperature(paramCodedInputStreamMicro.readInt32());
            break;
          case 40: 
            setLowTemperature(paramCodedInputStreamMicro.readInt32());
            break;
          case 48: 
            setTemperatureUnit(paramCodedInputStreamMicro.readInt32());
            break;
          case 56: 
            setChanceOfPrecipitation(paramCodedInputStreamMicro.readInt32());
            break;
          case 64: 
            setWindUnit(paramCodedInputStreamMicro.readInt32());
            break;
          case 74: 
            setWind(paramCodedInputStreamMicro.readString());
            break;
          }
          setWindSpeed(paramCodedInputStreamMicro.readInt32());
        }
      }
      
      public WeatherPoint setChanceOfPrecipitation(int paramInt)
      {
        this.hasChanceOfPrecipitation = true;
        this.chanceOfPrecipitation_ = paramInt;
        return this;
      }
      
      public WeatherPoint setDescription(String paramString)
      {
        this.hasDescription = true;
        this.description_ = paramString;
        return this;
      }
      
      public WeatherPoint setHighTemperature(int paramInt)
      {
        this.hasHighTemperature = true;
        this.highTemperature_ = paramInt;
        return this;
      }
      
      public WeatherPoint setImageUrl(String paramString)
      {
        this.hasImageUrl = true;
        this.imageUrl_ = paramString;
        return this;
      }
      
      public WeatherPoint setLabel(String paramString)
      {
        this.hasLabel = true;
        this.label_ = paramString;
        return this;
      }
      
      public WeatherPoint setLowTemperature(int paramInt)
      {
        this.hasLowTemperature = true;
        this.lowTemperature_ = paramInt;
        return this;
      }
      
      public WeatherPoint setTemperatureUnit(int paramInt)
      {
        this.hasTemperatureUnit = true;
        this.temperatureUnit_ = paramInt;
        return this;
      }
      
      public WeatherPoint setWind(String paramString)
      {
        this.hasWind = true;
        this.wind_ = paramString;
        return this;
      }
      
      public WeatherPoint setWindSpeed(int paramInt)
      {
        this.hasWindSpeed = true;
        this.windSpeed_ = paramInt;
        return this;
      }
      
      public WeatherPoint setWindUnit(int paramInt)
      {
        this.hasWindUnit = true;
        this.windUnit_ = paramInt;
        return this;
      }
      
      public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
        throws IOException
      {
        if (hasLabel()) {
          paramCodedOutputStreamMicro.writeString(1, getLabel());
        }
        if (hasDescription()) {
          paramCodedOutputStreamMicro.writeString(2, getDescription());
        }
        if (hasImageUrl()) {
          paramCodedOutputStreamMicro.writeString(3, getImageUrl());
        }
        if (hasHighTemperature()) {
          paramCodedOutputStreamMicro.writeInt32(4, getHighTemperature());
        }
        if (hasLowTemperature()) {
          paramCodedOutputStreamMicro.writeInt32(5, getLowTemperature());
        }
        if (hasTemperatureUnit()) {
          paramCodedOutputStreamMicro.writeInt32(6, getTemperatureUnit());
        }
        if (hasChanceOfPrecipitation()) {
          paramCodedOutputStreamMicro.writeInt32(7, getChanceOfPrecipitation());
        }
        if (hasWindUnit()) {
          paramCodedOutputStreamMicro.writeInt32(8, getWindUnit());
        }
        if (hasWind()) {
          paramCodedOutputStreamMicro.writeString(9, getWind());
        }
        if (hasWindSpeed()) {
          paramCodedOutputStreamMicro.writeInt32(10, getWindSpeed());
        }
      }
    }
  }
  
  public static final class WebsearchConfiguration
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasOptedInToWebsearchHistory;
    private boolean optedInToWebsearchHistory_ = true;
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public boolean getOptedInToWebsearchHistory()
    {
      return this.optedInToWebsearchHistory_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasOptedInToWebsearchHistory();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeBoolSize(1, getOptedInToWebsearchHistory());
      }
      this.cachedSize = i;
      return i;
    }
    
    public boolean hasOptedInToWebsearchHistory()
    {
      return this.hasOptedInToWebsearchHistory;
    }
    
    public WebsearchConfiguration mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setOptedInToWebsearchHistory(paramCodedInputStreamMicro.readBool());
      }
    }
    
    public WebsearchConfiguration setOptedInToWebsearchHistory(boolean paramBoolean)
    {
      this.hasOptedInToWebsearchHistory = true;
      this.optedInToWebsearchHistory_ = paramBoolean;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasOptedInToWebsearchHistory()) {
        paramCodedOutputStreamMicro.writeBool(1, getOptedInToWebsearchHistory());
      }
    }
  }
  
  public static final class WebsiteUpdateEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private String clickUrl_ = "";
    private boolean hasClickUrl;
    private boolean hasImage;
    private boolean hasUpdateTimestampSeconds;
    private boolean hasUpdateTitle;
    private boolean hasWebsiteTitle;
    private Sidekick.Photo image_ = null;
    private long updateTimestampSeconds_ = 0L;
    private String updateTitle_ = "";
    private String websiteTitle_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public String getClickUrl()
    {
      return this.clickUrl_;
    }
    
    public Sidekick.Photo getImage()
    {
      return this.image_;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasWebsiteTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getWebsiteTitle());
      }
      if (hasClickUrl()) {
        i += CodedOutputStreamMicro.computeStringSize(2, getClickUrl());
      }
      if (hasUpdateTitle()) {
        i += CodedOutputStreamMicro.computeStringSize(3, getUpdateTitle());
      }
      if (hasImage()) {
        i += CodedOutputStreamMicro.computeMessageSize(4, getImage());
      }
      if (hasUpdateTimestampSeconds()) {
        i += CodedOutputStreamMicro.computeInt64Size(5, getUpdateTimestampSeconds());
      }
      this.cachedSize = i;
      return i;
    }
    
    public long getUpdateTimestampSeconds()
    {
      return this.updateTimestampSeconds_;
    }
    
    public String getUpdateTitle()
    {
      return this.updateTitle_;
    }
    
    public String getWebsiteTitle()
    {
      return this.websiteTitle_;
    }
    
    public boolean hasClickUrl()
    {
      return this.hasClickUrl;
    }
    
    public boolean hasImage()
    {
      return this.hasImage;
    }
    
    public boolean hasUpdateTimestampSeconds()
    {
      return this.hasUpdateTimestampSeconds;
    }
    
    public boolean hasUpdateTitle()
    {
      return this.hasUpdateTitle;
    }
    
    public boolean hasWebsiteTitle()
    {
      return this.hasWebsiteTitle;
    }
    
    public WebsiteUpdateEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        case 10: 
          setWebsiteTitle(paramCodedInputStreamMicro.readString());
          break;
        case 18: 
          setClickUrl(paramCodedInputStreamMicro.readString());
          break;
        case 26: 
          setUpdateTitle(paramCodedInputStreamMicro.readString());
          break;
        case 34: 
          Sidekick.Photo localPhoto = new Sidekick.Photo();
          paramCodedInputStreamMicro.readMessage(localPhoto);
          setImage(localPhoto);
          break;
        }
        setUpdateTimestampSeconds(paramCodedInputStreamMicro.readInt64());
      }
    }
    
    public WebsiteUpdateEntry setClickUrl(String paramString)
    {
      this.hasClickUrl = true;
      this.clickUrl_ = paramString;
      return this;
    }
    
    public WebsiteUpdateEntry setImage(Sidekick.Photo paramPhoto)
    {
      if (paramPhoto == null) {
        throw new NullPointerException();
      }
      this.hasImage = true;
      this.image_ = paramPhoto;
      return this;
    }
    
    public WebsiteUpdateEntry setUpdateTimestampSeconds(long paramLong)
    {
      this.hasUpdateTimestampSeconds = true;
      this.updateTimestampSeconds_ = paramLong;
      return this;
    }
    
    public WebsiteUpdateEntry setUpdateTitle(String paramString)
    {
      this.hasUpdateTitle = true;
      this.updateTitle_ = paramString;
      return this;
    }
    
    public WebsiteUpdateEntry setWebsiteTitle(String paramString)
    {
      this.hasWebsiteTitle = true;
      this.websiteTitle_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasWebsiteTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getWebsiteTitle());
      }
      if (hasClickUrl()) {
        paramCodedOutputStreamMicro.writeString(2, getClickUrl());
      }
      if (hasUpdateTitle()) {
        paramCodedOutputStreamMicro.writeString(3, getUpdateTitle());
      }
      if (hasImage()) {
        paramCodedOutputStreamMicro.writeMessage(4, getImage());
      }
      if (hasUpdateTimestampSeconds()) {
        paramCodedOutputStreamMicro.writeInt64(5, getUpdateTimestampSeconds());
      }
    }
  }
  
  public static final class WebsiteUpdateListEntry
    extends MessageMicro
  {
    private int cachedSize = -1;
    private boolean hasTitle;
    private String title_ = "";
    
    public int getCachedSize()
    {
      if (this.cachedSize < 0) {
        getSerializedSize();
      }
      return this.cachedSize;
    }
    
    public int getSerializedSize()
    {
      boolean bool = hasTitle();
      int i = 0;
      if (bool) {
        i = 0 + CodedOutputStreamMicro.computeStringSize(1, getTitle());
      }
      this.cachedSize = i;
      return i;
    }
    
    public String getTitle()
    {
      return this.title_;
    }
    
    public boolean hasTitle()
    {
      return this.hasTitle;
    }
    
    public WebsiteUpdateListEntry mergeFrom(CodedInputStreamMicro paramCodedInputStreamMicro)
      throws IOException
    {
      for (;;)
      {
        int i = paramCodedInputStreamMicro.readTag();
        switch (i)
        {
        default: 
          if (parseUnknownField(paramCodedInputStreamMicro, i)) {
            continue;
          }
        case 0: 
          return this;
        }
        setTitle(paramCodedInputStreamMicro.readString());
      }
    }
    
    public WebsiteUpdateListEntry setTitle(String paramString)
    {
      this.hasTitle = true;
      this.title_ = paramString;
      return this;
    }
    
    public void writeTo(CodedOutputStreamMicro paramCodedOutputStreamMicro)
      throws IOException
    {
      if (hasTitle()) {
        paramCodedOutputStreamMicro.writeString(1, getTitle());
      }
    }
  }
}


/* Location:           C:\Cygwin\home\breandan\apk-tool\classes-dex2jar.jar
 * Qualified Name:     com.google.geo.sidekick.Sidekick
 * JD-Core Version:    0.7.0.1
 */